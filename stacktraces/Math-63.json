{"tours": [{"failing_test": {"className": " org.apache.commons.math.util.MathUtilsTest", "methodName": "testArrayEquals", "error": "junit.framework.AssertionFailedError", "message": ""}, "patched_method": {"file_path": "/src/main/java/org/apache/commons/math/util/MathUtils.java", "method_name": "equals", "content": "    /**\n     * Returns true iff they are equal as defined by\n     * {@link #equals(double,double,int) equals(x, y, 1)}.\n     *\n     * @param x first value\n     * @param y second value\n     * @return {@code true} if the values are equal.\n     */\n    public static boolean equals(double x, double y) {\n        return (Double.isNaN(x) && Double.isNaN(y)) || x == y;\n    }", "javadoc_start_line": 408, "annotations_start_line": 416, "method_start_line": 416, "end_line": 418}, "steps": [{"file_path": "/src/test/java/org/apache/commons/math/util/MathUtilsTest.java", "method_name": "testArrayEquals", "content": "    /**\n     * @deprecated To be removed in release 3.0 (replaced by {@link\n     * #testArrayEqualsIncludingNaN()}.\n     */\n    public void testArrayEquals() {\n        assertFalse(MathUtils.equals(new double[] { 1d }, null));\n        assertFalse(MathUtils.equals(null, new double[] { 1d }));\n        assertTrue(MathUtils.equals((double[]) null, (double[]) null));\n\n        assertFalse(MathUtils.equals(new double[] { 1d }, new double[0]));\n        assertTrue(MathUtils.equals(new double[] { 1d }, new double[] { 1d }));\n        assertTrue(MathUtils.equals(new double[] {\n                                      Double.POSITIVE_INFINITY,\n                                      Double.NEGATIVE_INFINITY, 1d, 0d\n                                    }, new double[] {\n                                      Double.POSITIVE_INFINITY,\n                                      Double.NEGATIVE_INFINITY, 1d, 0d\n                                    }));\n        assertFalse(MathUtils.equals(new double[] { Double.NaN },\n                                     new double[] { Double.NaN }));\n        assertFalse(MathUtils.equals(new double[] { Double.POSITIVE_INFINITY },\n                                     new double[] { Double.NEGATIVE_INFINITY }));\n        assertFalse(MathUtils.equals(new double[] { 1d },\n                                     new double[] { FastMath.nextAfter(FastMath.nextAfter(1d, 2d), 2d) }));\n\n    }", "javadoc_start_line": 438, "annotations_start_line": 442, "method_start_line": 442, "end_line": 463}, {"file_path": "/src/main/java/org/apache/commons/math/util/MathUtils.java", "method_name": "equals", "content": "    /**\n     * Returns true iff both arguments are null or have same dimensions and all\n     * their elements are equal as defined by\n     * {@link #equals(double,double) this method}.\n     *\n     * @param x first array\n     * @param y second array\n     * @return true if the values are both null or have same dimension\n     * and equal elements.\n     */\n    public static boolean equals(double[] x, double[] y) {\n        if ((x == null) || (y == null)) {\n            return !((x == null) ^ (y == null));\n        }\n        if (x.length != y.length) {\n            return false;\n        }\n        for (int i = 0; i < x.length; ++i) {\n            if (!equals(x[i], y[i])) {\n                return false;\n            }\n        }\n        return true;\n    }", "javadoc_start_line": 512, "annotations_start_line": 522, "method_start_line": 522, "end_line": 535}]}], "project": {"name": "Math", "version": 63}}