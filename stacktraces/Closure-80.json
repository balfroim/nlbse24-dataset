{"tours": [{"failing_test": {"className": " com.google.javascript.jscomp.NodeUtilTest", "methodName": "testIsBooleanResult", "error": "junit.framework.AssertionFailedError", "message": ""}, "patched_method": {"file_path": "/src/com/google/javascript/jscomp/NodeUtil.java", "method_name": "evaluatesToLocalValue", "content": "  /**\n   * @param locals A predicate to apply to unknown local values.\n   * @return Whether the node is known to be a value that is not a reference\n   *     outside the expression scope.\n   */\n  static boolean evaluatesToLocalValue(Node value, Predicate<Node> locals) {\n    switch (value.getType()) {\n      case Token.ASSIGN:\n        // A result that is aliased by a non-local name, is the effectively the\n        // same as returning a non-local name, but this doesn't matter if the\n        // value is immutable.\n        return NodeUtil.isImmutableValue(value.getLastChild())\n            || (locals.apply(value)\n                && evaluatesToLocalValue(value.getLastChild(), locals));\n      case Token.COMMA:\n        return evaluatesToLocalValue(value.getLastChild(), locals);\n      case Token.AND:\n      case Token.OR:\n        return evaluatesToLocalValue(value.getFirstChild(), locals)\n           && evaluatesToLocalValue(value.getLastChild(), locals);\n      case Token.HOOK:\n        return evaluatesToLocalValue(value.getFirstChild().getNext(), locals)\n           && evaluatesToLocalValue(value.getLastChild(), locals);\n      case Token.INC:\n      case Token.DEC:\n        if (value.getBooleanProp(Node.INCRDECR_PROP)) {\n          return evaluatesToLocalValue(value.getFirstChild(), locals);\n        } else {\n          return true;\n        }\n      case Token.THIS:\n        return locals.apply(value);\n      case Token.NAME:\n        return isImmutableValue(value) || locals.apply(value);\n      case Token.GETELEM:\n      case Token.GETPROP:\n        // There is no information about the locality of object properties.\n        return locals.apply(value);\n      case Token.CALL:\n        return callHasLocalResult(value)\n            || isToStringMethodCall(value)\n            || locals.apply(value);\n      case Token.NEW:\n        return newHasLocalResult(value)\n               || locals.apply(value);\n      case Token.FUNCTION:\n      case Token.REGEXP:\n      case Token.ARRAYLIT:\n      case Token.OBJECTLIT:\n        // Literals objects with non-literal children are allowed.\n        return true;\n      case Token.IN:\n        // TODO(johnlenz): should IN operator be included in #isSimpleOperator?\n        return true;\n      default:\n        // Other op force a local value:\n        //  x = '' + g (x is now an local string)\n        //  x -= g (x is now an local number)\n        if (isAssignmentOp(value)\n            || isSimpleOperator(value)\n            || isImmutableValue(value)) {\n          return true;\n        }\n\n        throw new IllegalStateException(\n            \"Unexpected expression node\" + value +\n            \"\\n parent:\" + value.getParent());\n    }\n  }", "javadoc_start_line": 2859, "annotations_start_line": 2864, "method_start_line": 2864, "end_line": 2927}, "steps": [], "generation_failure": {"error": "Failed to generate stacktrace", "error_message": "[Errno 2] No such file or directory: './projects/Closure/80/results/stacktrace-testIsBooleanResult-evaluatesToLocalValue.csv'"}}, {"failing_test": {"className": " com.google.javascript.jscomp.NodeUtilTest", "methodName": "testIsBooleanResult", "error": "junit.framework.AssertionFailedError", "message": ""}, "patched_method": {"file_path": "/src/com/google/javascript/jscomp/NodeUtil.java", "method_name": "isBooleanResultHelper", "content": "  static boolean isBooleanResultHelper(Node n) {\n    switch (n.getType()) {\n      // Primitives\n      case Token.TRUE:\n      case Token.FALSE:\n      // Comparisons\n      case Token.EQ:\n      case Token.NE:\n      case Token.SHEQ:\n      case Token.SHNE:\n      case Token.LT:\n      case Token.GT:\n      case Token.LE:\n      case Token.GE:\n      // Queryies\n      case Token.IN:\n      case Token.INSTANCEOF:\n      // Inversion\n      case Token.NOT:\n      // delete operator returns a boolean.\n        return true;\n      default:\n        return false;\n    }\n  }", "javadoc_start_line": 1242, "annotations_start_line": 1242, "method_start_line": 1242, "end_line": 1266}, "steps": [{"file_path": "/src/com/google/javascript/jscomp/NodeUtil.java", "method_name": "isBooleanResult", "content": "  /**\n   * @return Whether the result of node evaluation is always a boolean\n   */\n  static boolean isBooleanResult(Node n) {\n    return valueCheck(n, BOOLEAN_RESULT_PREDICATE);\n  }", "javadoc_start_line": 1235, "annotations_start_line": 1238, "method_start_line": 1238, "end_line": 1240}, {"file_path": "/src/com/google/javascript/jscomp/NodeUtil.java", "method_name": "valueCheck", "content": "  /**\n   * Apply the supplied predicate against the potential\n   * all possible result of the expression.\n   */\n  static boolean valueCheck(Node n, Predicate<Node> p) {\n    switch (n.getType()) {\n      case Token.ASSIGN:\n      case Token.COMMA:\n        return valueCheck(n.getLastChild(), p);\n      case Token.AND:\n      case Token.OR:\n        return valueCheck(n.getFirstChild(), p)\n            && valueCheck(n.getLastChild(), p);\n      case Token.HOOK:\n        return valueCheck(n.getFirstChild().getNext(), p)\n            && valueCheck(n.getLastChild(), p);\n      default:\n        return p.apply(n);\n    }\n  }", "javadoc_start_line": 1153, "annotations_start_line": 1157, "method_start_line": 1157, "end_line": 1172}, {"file_path": "/src/com/google/javascript/jscomp/NodeUtil.java", "method_name": "isBooleanResultHelper", "content": "  static boolean isBooleanResultHelper(Node n) {\n    switch (n.getType()) {\n      // Primitives\n      case Token.TRUE:\n      case Token.FALSE:\n      // Comparisons\n      case Token.EQ:\n      case Token.NE:\n      case Token.SHEQ:\n      case Token.SHNE:\n      case Token.LT:\n      case Token.GT:\n      case Token.LE:\n      case Token.GE:\n      // Queryies\n      case Token.IN:\n      case Token.INSTANCEOF:\n      // Inversion\n      case Token.NOT:\n      // delete operator returns a boolean.\n        return true;\n      default:\n        return false;\n    }\n  }", "javadoc_start_line": 1242, "annotations_start_line": 1242, "method_start_line": 1242, "end_line": 1266}]}, {"failing_test": {"className": " com.google.javascript.jscomp.NodeUtilTest", "methodName": "testLocalValue1", "error": "java.lang.IllegalStateException", "message": "Unexpected expression nodeDELPROP 1 [sourcename:  [testcode] ] [parenthesized: true]"}, "patched_method": {"file_path": "/src/com/google/javascript/jscomp/NodeUtil.java", "method_name": "evaluatesToLocalValue", "content": "  /**\n   * @param locals A predicate to apply to unknown local values.\n   * @return Whether the node is known to be a value that is not a reference\n   *     outside the expression scope.\n   */\n  static boolean evaluatesToLocalValue(Node value, Predicate<Node> locals) {\n    switch (value.getType()) {\n      case Token.ASSIGN:\n        // A result that is aliased by a non-local name, is the effectively the\n        // same as returning a non-local name, but this doesn't matter if the\n        // value is immutable.\n        return NodeUtil.isImmutableValue(value.getLastChild())\n            || (locals.apply(value)\n                && evaluatesToLocalValue(value.getLastChild(), locals));\n      case Token.COMMA:\n        return evaluatesToLocalValue(value.getLastChild(), locals);\n      case Token.AND:\n      case Token.OR:\n        return evaluatesToLocalValue(value.getFirstChild(), locals)\n           && evaluatesToLocalValue(value.getLastChild(), locals);\n      case Token.HOOK:\n        return evaluatesToLocalValue(value.getFirstChild().getNext(), locals)\n           && evaluatesToLocalValue(value.getLastChild(), locals);\n      case Token.INC:\n      case Token.DEC:\n        if (value.getBooleanProp(Node.INCRDECR_PROP)) {\n          return evaluatesToLocalValue(value.getFirstChild(), locals);\n        } else {\n          return true;\n        }\n      case Token.THIS:\n        return locals.apply(value);\n      case Token.NAME:\n        return isImmutableValue(value) || locals.apply(value);\n      case Token.GETELEM:\n      case Token.GETPROP:\n        // There is no information about the locality of object properties.\n        return locals.apply(value);\n      case Token.CALL:\n        return callHasLocalResult(value)\n            || isToStringMethodCall(value)\n            || locals.apply(value);\n      case Token.NEW:\n        return newHasLocalResult(value)\n               || locals.apply(value);\n      case Token.FUNCTION:\n      case Token.REGEXP:\n      case Token.ARRAYLIT:\n      case Token.OBJECTLIT:\n        // Literals objects with non-literal children are allowed.\n        return true;\n      case Token.IN:\n        // TODO(johnlenz): should IN operator be included in #isSimpleOperator?\n        return true;\n      default:\n        // Other op force a local value:\n        //  x = '' + g (x is now an local string)\n        //  x -= g (x is now an local number)\n        if (isAssignmentOp(value)\n            || isSimpleOperator(value)\n            || isImmutableValue(value)) {\n          return true;\n        }\n\n        throw new IllegalStateException(\n            \"Unexpected expression node\" + value +\n            \"\\n parent:\" + value.getParent());\n    }\n  }", "javadoc_start_line": 2859, "annotations_start_line": 2864, "method_start_line": 2864, "end_line": 2927}, "steps": [{"file_path": "/src/com/google/javascript/jscomp/NodeUtil.java", "method_name": "evaluatesToLocalValue", "content": "  /**\n   * @return Whether the node is known to be a value that is not referenced\n   * elsewhere.\n   */\n  static boolean evaluatesToLocalValue(Node value) {\n    return evaluatesToLocalValue(value, Predicates.<Node>alwaysFalse());\n  }", "javadoc_start_line": 2851, "annotations_start_line": 2855, "method_start_line": 2855, "end_line": 2857}]}, {"failing_test": {"className": " com.google.javascript.jscomp.NodeUtilTest", "methodName": "testLocalValue1", "error": "java.lang.IllegalStateException", "message": "Unexpected expression nodeDELPROP 1 [sourcename:  [testcode] ] [parenthesized: true]"}, "patched_method": {"file_path": "/src/com/google/javascript/jscomp/NodeUtil.java", "method_name": "isBooleanResultHelper", "content": "  static boolean isBooleanResultHelper(Node n) {\n    switch (n.getType()) {\n      // Primitives\n      case Token.TRUE:\n      case Token.FALSE:\n      // Comparisons\n      case Token.EQ:\n      case Token.NE:\n      case Token.SHEQ:\n      case Token.SHNE:\n      case Token.LT:\n      case Token.GT:\n      case Token.LE:\n      case Token.GE:\n      // Queryies\n      case Token.IN:\n      case Token.INSTANCEOF:\n      // Inversion\n      case Token.NOT:\n      // delete operator returns a boolean.\n        return true;\n      default:\n        return false;\n    }\n  }", "javadoc_start_line": 1242, "annotations_start_line": 1242, "method_start_line": 1242, "end_line": 1266}, "steps": [], "generation_failure": {"error": "Failed to generate stacktrace", "error_message": "[Errno 2] No such file or directory: './projects/Closure/80/results/stacktrace-testLocalValue1-isBooleanResultHelper.csv'"}}], "project": {"name": "Closure", "version": 80}}