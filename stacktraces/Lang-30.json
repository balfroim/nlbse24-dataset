{"tours": [{"failing_test": {"className": " org.apache.commons.lang3.StringUtilsEqualsIndexOfTest", "methodName": "testContainsNone_CharArrayWithSupplementaryChars", "error": "junit.framework.AssertionFailedError", "message": "expected:<true> but was:<false>"}, "patched_method": {"file_path": "/src/main/java/org/apache/commons/lang3/StringUtils.java", "method_name": "containsNone", "content": "    /**\n     * <p>Checks that the CharSequence does not contain certain characters.</p>\n     *\n     * <p>A <code>null</code> CharSequence will return <code>true</code>.\n     * A <code>null</code> invalid character array will return <code>true</code>.\n     * An empty CharSequence (length()=0) always returns true.</p>\n     *\n     * <pre>\n     * StringUtils.containsNone(null, *)       = true\n     * StringUtils.containsNone(*, null)       = true\n     * StringUtils.containsNone(\"\", *)         = true\n     * StringUtils.containsNone(\"ab\", '')      = true\n     * StringUtils.containsNone(\"abab\", 'xyz') = true\n     * StringUtils.containsNone(\"ab1\", 'xyz')  = true\n     * StringUtils.containsNone(\"abz\", 'xyz')  = false\n     * </pre>\n     *\n     * @param cs  the CharSequence to check, may be null\n     * @param searchChars  an array of invalid chars, may be null\n     * @return true if it contains none of the invalid chars, or is null\n     * @since 2.0\n     */\n    public static boolean containsNone(CharSequence cs, char[] searchChars) {\n        if (cs == null || searchChars == null) {\n            return true;\n        }\n        int csLen = cs.length();\n        int searchLen = searchChars.length;\n        for (int i = 0; i < csLen; i++) {\n            char ch = cs.charAt(i);\n            for (int j = 0; j < searchLen; j++) {\n                if (searchChars[j] == ch) {\n                            // missing low surrogate, fine, like String.indexOf(String)\n                        // ch is in the Basic Multilingual Plane\n                        return false;\n                }\n            }\n        }\n        return true;\n    }", "javadoc_start_line": 1651, "annotations_start_line": 1673, "method_start_line": 1673, "end_line": 1690}, "steps": [{"file_path": "/src/test/java/org/apache/commons/lang3/StringUtilsEqualsIndexOfTest.java", "method_name": "testContainsNone_CharArrayWithSupplementaryChars", "content": "    /**\n     * See http://java.sun.com/developer/technicalArticles/Intl/Supplementary/\n     */\n    public void testContainsNone_CharArrayWithSupplementaryChars() {\n        assertEquals(false, StringUtils.containsNone(CharU20000 + CharU20001, CharU20000.toCharArray()));\n        assertEquals(false, StringUtils.containsNone(CharU20000 + CharU20001, CharU20001.toCharArray()));\n        assertEquals(false, StringUtils.containsNone(CharU20000, CharU20000.toCharArray()));\n        // Sanity check:\n        assertEquals(-1, CharU20000.indexOf(CharU20001));\n        assertEquals(0, CharU20000.indexOf(CharU20001.charAt(0)));\n        assertEquals(-1, CharU20000.indexOf(CharU20001.charAt(1)));\n        // Test:\n        assertEquals(true, StringUtils.containsNone(CharU20000, CharU20001.toCharArray()));\n        assertEquals(true, StringUtils.containsNone(CharU20001, CharU20000.toCharArray()));\n    }", "javadoc_start_line": 315, "annotations_start_line": 318, "method_start_line": 318, "end_line": 329}, {"file_path": "/src/main/java/org/apache/commons/lang3/StringUtils.java", "method_name": "containsNone", "content": "    /**\n     * <p>Checks that the CharSequence does not contain certain characters.</p>\n     *\n     * <p>A <code>null</code> CharSequence will return <code>true</code>.\n     * A <code>null</code> invalid character array will return <code>true</code>.\n     * An empty CharSequence (length()=0) always returns true.</p>\n     *\n     * <pre>\n     * StringUtils.containsNone(null, *)       = true\n     * StringUtils.containsNone(*, null)       = true\n     * StringUtils.containsNone(\"\", *)         = true\n     * StringUtils.containsNone(\"ab\", '')      = true\n     * StringUtils.containsNone(\"abab\", 'xyz') = true\n     * StringUtils.containsNone(\"ab1\", 'xyz')  = true\n     * StringUtils.containsNone(\"abz\", 'xyz')  = false\n     * </pre>\n     *\n     * @param cs  the CharSequence to check, may be null\n     * @param searchChars  an array of invalid chars, may be null\n     * @return true if it contains none of the invalid chars, or is null\n     * @since 2.0\n     */\n    public static boolean containsNone(CharSequence cs, char[] searchChars) {\n        if (cs == null || searchChars == null) {\n            return true;\n        }\n        int csLen = cs.length();\n        int searchLen = searchChars.length;\n        for (int i = 0; i < csLen; i++) {\n            char ch = cs.charAt(i);\n            for (int j = 0; j < searchLen; j++) {\n                if (searchChars[j] == ch) {\n                            // missing low surrogate, fine, like String.indexOf(String)\n                        // ch is in the Basic Multilingual Plane\n                        return false;\n                }\n            }\n        }\n        return true;\n    }", "javadoc_start_line": 1651, "annotations_start_line": 1673, "method_start_line": 1673, "end_line": 1690}]}, {"failing_test": {"className": " org.apache.commons.lang3.StringUtilsEqualsIndexOfTest", "methodName": "testContainsNone_CharArrayWithSupplementaryChars", "error": "junit.framework.AssertionFailedError", "message": "expected:<true> but was:<false>"}, "patched_method": {"file_path": "/src/main/java/org/apache/commons/lang3/StringUtils.java", "method_name": "indexOfAnyBut", "content": "    /**\n     * <p>Search a String to find the first index of any\n     * character not in the given set of characters.</p>\n     *\n     * <p>A <code>null</code> String will return <code>-1</code>.\n     * A <code>null</code> search string will return <code>-1</code>.</p>\n     *\n     * <pre>\n     * StringUtils.indexOfAnyBut(null, *)            = -1\n     * StringUtils.indexOfAnyBut(\"\", *)              = -1\n     * StringUtils.indexOfAnyBut(*, null)            = -1\n     * StringUtils.indexOfAnyBut(*, \"\")              = -1\n     * StringUtils.indexOfAnyBut(\"zzabyycdxx\", \"za\") = 3\n     * StringUtils.indexOfAnyBut(\"zzabyycdxx\", \"\")   = 0\n     * StringUtils.indexOfAnyBut(\"aba\",\"ab\")         = -1\n     * </pre>\n     *\n     * @param str  the String to check, may be null\n     * @param searchChars  the chars to search for, may be null\n     * @return the index of any of the chars, -1 if no match or null input\n     * @since 2.0\n     */\n    public static int indexOfAnyBut(String str, String searchChars) {\n        if (isEmpty(str) || isEmpty(searchChars)) {\n            return INDEX_NOT_FOUND;\n        }\n        int strLen = str.length();\n        for (int i = 0; i < strLen; i++) {\n            char ch = str.charAt(i);\n            if (searchChars.indexOf(ch) < 0) {\n                    return i;\n            }\n        }\n        return INDEX_NOT_FOUND;\n    }", "javadoc_start_line": 1547, "annotations_start_line": 1569, "method_start_line": 1569, "end_line": 1581}, "steps": [], "generation_failure": {"error": "Failed to generate stacktrace", "error_message": "[Errno 2] No such file or directory: './projects/Lang/30/results/stacktrace-testContainsNone_CharArrayWithSupplementaryChars-indexOfAnyBut.csv'"}}, {"failing_test": {"className": " org.apache.commons.lang3.StringUtilsEqualsIndexOfTest", "methodName": "testContainsNone_CharArrayWithSupplementaryChars", "error": "junit.framework.AssertionFailedError", "message": "expected:<true> but was:<false>"}, "patched_method": {"file_path": "/src/main/java/org/apache/commons/lang3/StringUtils.java", "method_name": "indexOfAnyBut", "content": "    /**\n     * <p>Searches a CharSequence to find the first index of any\n     * character not in the given set of characters.</p>\n     *\n     * <p>A <code>null</code> CharSequence will return <code>-1</code>.\n     * A <code>null</code> or zero length search array will return <code>-1</code>.</p>\n     *\n     * <pre>\n     * StringUtils.indexOfAnyBut(null, *)           = -1\n     * StringUtils.indexOfAnyBut(\"\", *)             = -1\n     * StringUtils.indexOfAnyBut(*, null)           = -1\n     * StringUtils.indexOfAnyBut(*, [])             = -1\n     * StringUtils.indexOfAnyBut(\"zzabyycdxx\",'za') = 3\n     * StringUtils.indexOfAnyBut(\"zzabyycdxx\", '')  = 0\n     * StringUtils.indexOfAnyBut(\"aba\", 'ab')       = -1\n     * </pre>\n     *\n     * @param cs  the CharSequence to check, may be null\n     * @param searchChars  the chars to search for, may be null\n     * @return the index of any of the chars, -1 if no match or null input\n     * @since 2.0\n     */\n    public static int indexOfAnyBut(CharSequence cs, char[] searchChars) {\n        if (isEmpty(cs) || ArrayUtils.isEmpty(searchChars)) {\n            return INDEX_NOT_FOUND;\n        }\n        int csLen = cs.length();\n        int searchLen = searchChars.length;\n        outer:\n        for (int i = 0; i < csLen; i++) {\n            char ch = cs.charAt(i);\n            for (int j = 0; j < searchLen; j++) {\n                if (searchChars[j] == ch) {\n                        continue outer;\n                }\n            }\n            return i;\n        }\n        return INDEX_NOT_FOUND;\n    }", "javadoc_start_line": 1506, "annotations_start_line": 1528, "method_start_line": 1528, "end_line": 1545}, "steps": [], "generation_failure": {"error": "Failed to generate stacktrace", "error_message": "[Errno 2] No such file or directory: './projects/Lang/30/results/stacktrace-testContainsNone_CharArrayWithSupplementaryChars-indexOfAnyBut.csv'"}}, {"failing_test": {"className": " org.apache.commons.lang3.StringUtilsEqualsIndexOfTest", "methodName": "testContainsNone_CharArrayWithSupplementaryChars", "error": "junit.framework.AssertionFailedError", "message": "expected:<true> but was:<false>"}, "patched_method": {"file_path": "/src/main/java/org/apache/commons/lang3/StringUtils.java", "method_name": "containsAny", "content": "    /**\n     * <p>\n     * Checks if the CharSequence contains any character in the given set of characters.\n     * </p>\n     * \n     * <p>\n     * A <code>null</code> CharSequence will return <code>false</code>. A <code>null</code> search CharSequence will return\n     * <code>false</code>.\n     * </p>\n     * \n     * <pre>\n     * StringUtils.containsAny(null, *)            = false\n     * StringUtils.containsAny(\"\", *)              = false\n     * StringUtils.containsAny(*, null)            = false\n     * StringUtils.containsAny(*, \"\")              = false\n     * StringUtils.containsAny(\"zzabyycdxx\", \"za\") = true\n     * StringUtils.containsAny(\"zzabyycdxx\", \"by\") = true\n     * StringUtils.containsAny(\"aba\",\"z\")          = false\n     * </pre>\n     * \n     * @param cs\n     *            the CharSequence to check, may be null\n     * @param searchChars\n     *            the chars to search for, may be null\n     * @return the <code>true</code> if any of the chars are found, <code>false</code> if no match or null input\n     * @since 2.4\n     */\n    public static boolean containsAny(CharSequence cs, String searchChars) {\n        if (searchChars == null) {\n            return false;\n        }\n        return containsAny(cs, searchChars.toCharArray());\n    }", "javadoc_start_line": 1470, "annotations_start_line": 1497, "method_start_line": 1497, "end_line": 1502}, "steps": [], "generation_failure": {"error": "Failed to generate stacktrace", "error_message": "[Errno 2] No such file or directory: './projects/Lang/30/results/stacktrace-testContainsNone_CharArrayWithSupplementaryChars-containsAny.csv'"}}, {"failing_test": {"className": " org.apache.commons.lang3.StringUtilsEqualsIndexOfTest", "methodName": "testContainsNone_CharArrayWithSupplementaryChars", "error": "junit.framework.AssertionFailedError", "message": "expected:<true> but was:<false>"}, "patched_method": {"file_path": "/src/main/java/org/apache/commons/lang3/StringUtils.java", "method_name": "containsAny", "content": "    /**\n     * <p>Checks if the CharSequence contains any character in the given\n     * set of characters.</p>\n     *\n     * <p>A <code>null</code> CharSequence will return <code>false</code>.\n     * A <code>null</code> or zero length search array will return <code>false</code>.</p>\n     *\n     * <pre>\n     * StringUtils.containsAny(null, *)                = false\n     * StringUtils.containsAny(\"\", *)                  = false\n     * StringUtils.containsAny(*, null)                = false\n     * StringUtils.containsAny(*, [])                  = false\n     * StringUtils.containsAny(\"zzabyycdxx\",['z','a']) = true\n     * StringUtils.containsAny(\"zzabyycdxx\",['b','y']) = true\n     * StringUtils.containsAny(\"aba\", ['z'])           = false\n     * </pre>\n     *\n     * @param cs  the CharSequence to check, may be null\n     * @param searchChars  the chars to search for, may be null\n     * @return the <code>true</code> if any of the chars are found,\n     * <code>false</code> if no match or null input\n     * @since 2.4\n     */\n    public static boolean containsAny(CharSequence cs, char[] searchChars) {\n        if (isEmpty(cs) || ArrayUtils.isEmpty(searchChars)) {\n            return false;\n        }\n        int csLength = cs.length();\n        int searchLength = searchChars.length;\n        int csLast = csLength - 1;\n        int searchLast = searchLength - 1;\n        for (int i = 0; i < csLength; i++) {\n            char ch = cs.charAt(i);\n            for (int j = 0; j < searchLength; j++) {\n                if (searchChars[j] == ch) {\n                    if (i < csLast && j < searchLast && ch >= Character.MIN_HIGH_SURROGATE && ch <= Character.MAX_HIGH_SURROGATE) {\n                            // missing low surrogate, fine, like String.indexOf(String)\n                        if (searchChars[j + 1] == cs.charAt(i + 1)) {\n                            return true;\n                        }\n                    } else {\n                        // ch is in the Basic Multilingual Plane\n                        return true;\n                    }\n                }\n            }\n        }\n        return false;\n    }", "javadoc_start_line": 1420, "annotations_start_line": 1443, "method_start_line": 1443, "end_line": 1468}, "steps": [], "generation_failure": {"error": "Failed to generate stacktrace", "error_message": "[Errno 2] No such file or directory: './projects/Lang/30/results/stacktrace-testContainsNone_CharArrayWithSupplementaryChars-containsAny.csv'"}}, {"failing_test": {"className": " org.apache.commons.lang3.StringUtilsEqualsIndexOfTest", "methodName": "testContainsNone_CharArrayWithSupplementaryChars", "error": "junit.framework.AssertionFailedError", "message": "expected:<true> but was:<false>"}, "patched_method": {"file_path": "/src/main/java/org/apache/commons/lang3/StringUtils.java", "method_name": "indexOfAny", "content": "    /**\n     * <p>Search a CharSequence to find the first index of any\n     * character in the given set of characters.</p>\n     *\n     * <p>A <code>null</code> String will return <code>-1</code>.\n     * A <code>null</code> or zero length search array will return <code>-1</code>.</p>\n     *\n     * <pre>\n     * StringUtils.indexOfAny(null, *)                = -1\n     * StringUtils.indexOfAny(\"\", *)                  = -1\n     * StringUtils.indexOfAny(*, null)                = -1\n     * StringUtils.indexOfAny(*, [])                  = -1\n     * StringUtils.indexOfAny(\"zzabyycdxx\",['z','a']) = 0\n     * StringUtils.indexOfAny(\"zzabyycdxx\",['b','y']) = 3\n     * StringUtils.indexOfAny(\"aba\", ['z'])           = -1\n     * </pre>\n     *\n     * @param cs  the CharSequence to check, may be null\n     * @param searchChars  the chars to search for, may be null\n     * @return the index of any of the chars, -1 if no match or null input\n     * @since 2.0\n     */\n    public static int indexOfAny(CharSequence cs, char[] searchChars) {\n        if (isEmpty(cs) || ArrayUtils.isEmpty(searchChars)) {\n            return INDEX_NOT_FOUND;\n        }\n        int csLen = cs.length();\n        int searchLen = searchChars.length;\n        for (int i = 0; i < csLen; i++) {\n            char ch = cs.charAt(i);\n            for (int j = 0; j < searchLen; j++) {\n                if (searchChars[j] == ch) {\n                        // ch is a supplementary character\n                        return i;\n                }\n            }\n        }\n        return INDEX_NOT_FOUND;\n    }", "javadoc_start_line": 1349, "annotations_start_line": 1371, "method_start_line": 1371, "end_line": 1387}, "steps": [], "generation_failure": {"error": "Failed to generate stacktrace", "error_message": "[Errno 2] No such file or directory: './projects/Lang/30/results/stacktrace-testContainsNone_CharArrayWithSupplementaryChars-indexOfAny.csv'"}}, {"failing_test": {"className": " org.apache.commons.lang3.StringUtilsEqualsIndexOfTest", "methodName": "testContainsNone_StringWithSupplementaryChars", "error": "junit.framework.AssertionFailedError", "message": "expected:<true> but was:<false>"}, "patched_method": {"file_path": "/src/main/java/org/apache/commons/lang3/StringUtils.java", "method_name": "containsNone", "content": "    /**\n     * <p>Checks that the CharSequence does not contain certain characters.</p>\n     *\n     * <p>A <code>null</code> CharSequence will return <code>true</code>.\n     * A <code>null</code> invalid character array will return <code>true</code>.\n     * An empty CharSequence (length()=0) always returns true.</p>\n     *\n     * <pre>\n     * StringUtils.containsNone(null, *)       = true\n     * StringUtils.containsNone(*, null)       = true\n     * StringUtils.containsNone(\"\", *)         = true\n     * StringUtils.containsNone(\"ab\", '')      = true\n     * StringUtils.containsNone(\"abab\", 'xyz') = true\n     * StringUtils.containsNone(\"ab1\", 'xyz')  = true\n     * StringUtils.containsNone(\"abz\", 'xyz')  = false\n     * </pre>\n     *\n     * @param cs  the CharSequence to check, may be null\n     * @param searchChars  an array of invalid chars, may be null\n     * @return true if it contains none of the invalid chars, or is null\n     * @since 2.0\n     */\n    public static boolean containsNone(CharSequence cs, char[] searchChars) {\n        if (cs == null || searchChars == null) {\n            return true;\n        }\n        int csLen = cs.length();\n        int searchLen = searchChars.length;\n        for (int i = 0; i < csLen; i++) {\n            char ch = cs.charAt(i);\n            for (int j = 0; j < searchLen; j++) {\n                if (searchChars[j] == ch) {\n                            // missing low surrogate, fine, like String.indexOf(String)\n                        // ch is in the Basic Multilingual Plane\n                        return false;\n                }\n            }\n        }\n        return true;\n    }", "javadoc_start_line": 1651, "annotations_start_line": 1673, "method_start_line": 1673, "end_line": 1690}, "steps": [{"file_path": "/src/test/java/org/apache/commons/lang3/StringUtilsEqualsIndexOfTest.java", "method_name": "testContainsNone_StringWithSupplementaryChars", "content": "    /**\n     * See http://java.sun.com/developer/technicalArticles/Intl/Supplementary/\n     */\n    public void testContainsNone_StringWithSupplementaryChars() {\n        assertEquals(false, StringUtils.containsNone(CharU20000 + CharU20001, CharU20000));\n        assertEquals(false, StringUtils.containsNone(CharU20000 + CharU20001, CharU20001));\n        assertEquals(false, StringUtils.containsNone(CharU20000, CharU20000));\n        // Sanity check:\n        assertEquals(-1, CharU20000.indexOf(CharU20001));\n        assertEquals(0, CharU20000.indexOf(CharU20001.charAt(0)));\n        assertEquals(-1, CharU20000.indexOf(CharU20001.charAt(1)));\n        // Test:\n        assertEquals(true, StringUtils.containsNone(CharU20000, CharU20001));\n        assertEquals(true, StringUtils.containsNone(CharU20001, CharU20000));\n    }", "javadoc_start_line": 369, "annotations_start_line": 372, "method_start_line": 372, "end_line": 383}]}, {"failing_test": {"className": " org.apache.commons.lang3.StringUtilsEqualsIndexOfTest", "methodName": "testContainsNone_StringWithSupplementaryChars", "error": "junit.framework.AssertionFailedError", "message": "expected:<true> but was:<false>"}, "patched_method": {"file_path": "/src/main/java/org/apache/commons/lang3/StringUtils.java", "method_name": "indexOfAnyBut", "content": "    /**\n     * <p>Search a String to find the first index of any\n     * character not in the given set of characters.</p>\n     *\n     * <p>A <code>null</code> String will return <code>-1</code>.\n     * A <code>null</code> search string will return <code>-1</code>.</p>\n     *\n     * <pre>\n     * StringUtils.indexOfAnyBut(null, *)            = -1\n     * StringUtils.indexOfAnyBut(\"\", *)              = -1\n     * StringUtils.indexOfAnyBut(*, null)            = -1\n     * StringUtils.indexOfAnyBut(*, \"\")              = -1\n     * StringUtils.indexOfAnyBut(\"zzabyycdxx\", \"za\") = 3\n     * StringUtils.indexOfAnyBut(\"zzabyycdxx\", \"\")   = 0\n     * StringUtils.indexOfAnyBut(\"aba\",\"ab\")         = -1\n     * </pre>\n     *\n     * @param str  the String to check, may be null\n     * @param searchChars  the chars to search for, may be null\n     * @return the index of any of the chars, -1 if no match or null input\n     * @since 2.0\n     */\n    public static int indexOfAnyBut(String str, String searchChars) {\n        if (isEmpty(str) || isEmpty(searchChars)) {\n            return INDEX_NOT_FOUND;\n        }\n        int strLen = str.length();\n        for (int i = 0; i < strLen; i++) {\n            char ch = str.charAt(i);\n            if (searchChars.indexOf(ch) < 0) {\n                    return i;\n            }\n        }\n        return INDEX_NOT_FOUND;\n    }", "javadoc_start_line": 1547, "annotations_start_line": 1569, "method_start_line": 1569, "end_line": 1581}, "steps": [], "generation_failure": {"error": "Failed to generate stacktrace", "error_message": "[Errno 2] No such file or directory: './projects/Lang/30/results/stacktrace-testContainsNone_StringWithSupplementaryChars-indexOfAnyBut.csv'"}}, {"failing_test": {"className": " org.apache.commons.lang3.StringUtilsEqualsIndexOfTest", "methodName": "testContainsNone_StringWithSupplementaryChars", "error": "junit.framework.AssertionFailedError", "message": "expected:<true> but was:<false>"}, "patched_method": {"file_path": "/src/main/java/org/apache/commons/lang3/StringUtils.java", "method_name": "indexOfAnyBut", "content": "    /**\n     * <p>Searches a CharSequence to find the first index of any\n     * character not in the given set of characters.</p>\n     *\n     * <p>A <code>null</code> CharSequence will return <code>-1</code>.\n     * A <code>null</code> or zero length search array will return <code>-1</code>.</p>\n     *\n     * <pre>\n     * StringUtils.indexOfAnyBut(null, *)           = -1\n     * StringUtils.indexOfAnyBut(\"\", *)             = -1\n     * StringUtils.indexOfAnyBut(*, null)           = -1\n     * StringUtils.indexOfAnyBut(*, [])             = -1\n     * StringUtils.indexOfAnyBut(\"zzabyycdxx\",'za') = 3\n     * StringUtils.indexOfAnyBut(\"zzabyycdxx\", '')  = 0\n     * StringUtils.indexOfAnyBut(\"aba\", 'ab')       = -1\n     * </pre>\n     *\n     * @param cs  the CharSequence to check, may be null\n     * @param searchChars  the chars to search for, may be null\n     * @return the index of any of the chars, -1 if no match or null input\n     * @since 2.0\n     */\n    public static int indexOfAnyBut(CharSequence cs, char[] searchChars) {\n        if (isEmpty(cs) || ArrayUtils.isEmpty(searchChars)) {\n            return INDEX_NOT_FOUND;\n        }\n        int csLen = cs.length();\n        int searchLen = searchChars.length;\n        outer:\n        for (int i = 0; i < csLen; i++) {\n            char ch = cs.charAt(i);\n            for (int j = 0; j < searchLen; j++) {\n                if (searchChars[j] == ch) {\n                        continue outer;\n                }\n            }\n            return i;\n        }\n        return INDEX_NOT_FOUND;\n    }", "javadoc_start_line": 1506, "annotations_start_line": 1528, "method_start_line": 1528, "end_line": 1545}, "steps": [], "generation_failure": {"error": "Failed to generate stacktrace", "error_message": "[Errno 2] No such file or directory: './projects/Lang/30/results/stacktrace-testContainsNone_StringWithSupplementaryChars-indexOfAnyBut.csv'"}}, {"failing_test": {"className": " org.apache.commons.lang3.StringUtilsEqualsIndexOfTest", "methodName": "testContainsNone_StringWithSupplementaryChars", "error": "junit.framework.AssertionFailedError", "message": "expected:<true> but was:<false>"}, "patched_method": {"file_path": "/src/main/java/org/apache/commons/lang3/StringUtils.java", "method_name": "containsAny", "content": "    /**\n     * <p>\n     * Checks if the CharSequence contains any character in the given set of characters.\n     * </p>\n     * \n     * <p>\n     * A <code>null</code> CharSequence will return <code>false</code>. A <code>null</code> search CharSequence will return\n     * <code>false</code>.\n     * </p>\n     * \n     * <pre>\n     * StringUtils.containsAny(null, *)            = false\n     * StringUtils.containsAny(\"\", *)              = false\n     * StringUtils.containsAny(*, null)            = false\n     * StringUtils.containsAny(*, \"\")              = false\n     * StringUtils.containsAny(\"zzabyycdxx\", \"za\") = true\n     * StringUtils.containsAny(\"zzabyycdxx\", \"by\") = true\n     * StringUtils.containsAny(\"aba\",\"z\")          = false\n     * </pre>\n     * \n     * @param cs\n     *            the CharSequence to check, may be null\n     * @param searchChars\n     *            the chars to search for, may be null\n     * @return the <code>true</code> if any of the chars are found, <code>false</code> if no match or null input\n     * @since 2.4\n     */\n    public static boolean containsAny(CharSequence cs, String searchChars) {\n        if (searchChars == null) {\n            return false;\n        }\n        return containsAny(cs, searchChars.toCharArray());\n    }", "javadoc_start_line": 1470, "annotations_start_line": 1497, "method_start_line": 1497, "end_line": 1502}, "steps": [], "generation_failure": {"error": "Failed to generate stacktrace", "error_message": "[Errno 2] No such file or directory: './projects/Lang/30/results/stacktrace-testContainsNone_StringWithSupplementaryChars-containsAny.csv'"}}, {"failing_test": {"className": " org.apache.commons.lang3.StringUtilsEqualsIndexOfTest", "methodName": "testContainsNone_StringWithSupplementaryChars", "error": "junit.framework.AssertionFailedError", "message": "expected:<true> but was:<false>"}, "patched_method": {"file_path": "/src/main/java/org/apache/commons/lang3/StringUtils.java", "method_name": "containsAny", "content": "    /**\n     * <p>Checks if the CharSequence contains any character in the given\n     * set of characters.</p>\n     *\n     * <p>A <code>null</code> CharSequence will return <code>false</code>.\n     * A <code>null</code> or zero length search array will return <code>false</code>.</p>\n     *\n     * <pre>\n     * StringUtils.containsAny(null, *)                = false\n     * StringUtils.containsAny(\"\", *)                  = false\n     * StringUtils.containsAny(*, null)                = false\n     * StringUtils.containsAny(*, [])                  = false\n     * StringUtils.containsAny(\"zzabyycdxx\",['z','a']) = true\n     * StringUtils.containsAny(\"zzabyycdxx\",['b','y']) = true\n     * StringUtils.containsAny(\"aba\", ['z'])           = false\n     * </pre>\n     *\n     * @param cs  the CharSequence to check, may be null\n     * @param searchChars  the chars to search for, may be null\n     * @return the <code>true</code> if any of the chars are found,\n     * <code>false</code> if no match or null input\n     * @since 2.4\n     */\n    public static boolean containsAny(CharSequence cs, char[] searchChars) {\n        if (isEmpty(cs) || ArrayUtils.isEmpty(searchChars)) {\n            return false;\n        }\n        int csLength = cs.length();\n        int searchLength = searchChars.length;\n        int csLast = csLength - 1;\n        int searchLast = searchLength - 1;\n        for (int i = 0; i < csLength; i++) {\n            char ch = cs.charAt(i);\n            for (int j = 0; j < searchLength; j++) {\n                if (searchChars[j] == ch) {\n                    if (i < csLast && j < searchLast && ch >= Character.MIN_HIGH_SURROGATE && ch <= Character.MAX_HIGH_SURROGATE) {\n                            // missing low surrogate, fine, like String.indexOf(String)\n                        if (searchChars[j + 1] == cs.charAt(i + 1)) {\n                            return true;\n                        }\n                    } else {\n                        // ch is in the Basic Multilingual Plane\n                        return true;\n                    }\n                }\n            }\n        }\n        return false;\n    }", "javadoc_start_line": 1420, "annotations_start_line": 1443, "method_start_line": 1443, "end_line": 1468}, "steps": [], "generation_failure": {"error": "Failed to generate stacktrace", "error_message": "[Errno 2] No such file or directory: './projects/Lang/30/results/stacktrace-testContainsNone_StringWithSupplementaryChars-containsAny.csv'"}}, {"failing_test": {"className": " org.apache.commons.lang3.StringUtilsEqualsIndexOfTest", "methodName": "testContainsNone_StringWithSupplementaryChars", "error": "junit.framework.AssertionFailedError", "message": "expected:<true> but was:<false>"}, "patched_method": {"file_path": "/src/main/java/org/apache/commons/lang3/StringUtils.java", "method_name": "indexOfAny", "content": "    /**\n     * <p>Search a CharSequence to find the first index of any\n     * character in the given set of characters.</p>\n     *\n     * <p>A <code>null</code> String will return <code>-1</code>.\n     * A <code>null</code> or zero length search array will return <code>-1</code>.</p>\n     *\n     * <pre>\n     * StringUtils.indexOfAny(null, *)                = -1\n     * StringUtils.indexOfAny(\"\", *)                  = -1\n     * StringUtils.indexOfAny(*, null)                = -1\n     * StringUtils.indexOfAny(*, [])                  = -1\n     * StringUtils.indexOfAny(\"zzabyycdxx\",['z','a']) = 0\n     * StringUtils.indexOfAny(\"zzabyycdxx\",['b','y']) = 3\n     * StringUtils.indexOfAny(\"aba\", ['z'])           = -1\n     * </pre>\n     *\n     * @param cs  the CharSequence to check, may be null\n     * @param searchChars  the chars to search for, may be null\n     * @return the index of any of the chars, -1 if no match or null input\n     * @since 2.0\n     */\n    public static int indexOfAny(CharSequence cs, char[] searchChars) {\n        if (isEmpty(cs) || ArrayUtils.isEmpty(searchChars)) {\n            return INDEX_NOT_FOUND;\n        }\n        int csLen = cs.length();\n        int searchLen = searchChars.length;\n        for (int i = 0; i < csLen; i++) {\n            char ch = cs.charAt(i);\n            for (int j = 0; j < searchLen; j++) {\n                if (searchChars[j] == ch) {\n                        // ch is a supplementary character\n                        return i;\n                }\n            }\n        }\n        return INDEX_NOT_FOUND;\n    }", "javadoc_start_line": 1349, "annotations_start_line": 1371, "method_start_line": 1371, "end_line": 1387}, "steps": [], "generation_failure": {"error": "Failed to generate stacktrace", "error_message": "[Errno 2] No such file or directory: './projects/Lang/30/results/stacktrace-testContainsNone_StringWithSupplementaryChars-indexOfAny.csv'"}}, {"failing_test": {"className": " org.apache.commons.lang3.StringUtilsEqualsIndexOfTest", "methodName": "testContainsAny_StringCharArrayWithBadSupplementaryChars", "error": "junit.framework.AssertionFailedError", "message": "expected:<false> but was:<true>"}, "patched_method": {"file_path": "/src/main/java/org/apache/commons/lang3/StringUtils.java", "method_name": "containsNone", "content": "    /**\n     * <p>Checks that the CharSequence does not contain certain characters.</p>\n     *\n     * <p>A <code>null</code> CharSequence will return <code>true</code>.\n     * A <code>null</code> invalid character array will return <code>true</code>.\n     * An empty CharSequence (length()=0) always returns true.</p>\n     *\n     * <pre>\n     * StringUtils.containsNone(null, *)       = true\n     * StringUtils.containsNone(*, null)       = true\n     * StringUtils.containsNone(\"\", *)         = true\n     * StringUtils.containsNone(\"ab\", '')      = true\n     * StringUtils.containsNone(\"abab\", 'xyz') = true\n     * StringUtils.containsNone(\"ab1\", 'xyz')  = true\n     * StringUtils.containsNone(\"abz\", 'xyz')  = false\n     * </pre>\n     *\n     * @param cs  the CharSequence to check, may be null\n     * @param searchChars  an array of invalid chars, may be null\n     * @return true if it contains none of the invalid chars, or is null\n     * @since 2.0\n     */\n    public static boolean containsNone(CharSequence cs, char[] searchChars) {\n        if (cs == null || searchChars == null) {\n            return true;\n        }\n        int csLen = cs.length();\n        int searchLen = searchChars.length;\n        for (int i = 0; i < csLen; i++) {\n            char ch = cs.charAt(i);\n            for (int j = 0; j < searchLen; j++) {\n                if (searchChars[j] == ch) {\n                            // missing low surrogate, fine, like String.indexOf(String)\n                        // ch is in the Basic Multilingual Plane\n                        return false;\n                }\n            }\n        }\n        return true;\n    }", "javadoc_start_line": 1651, "annotations_start_line": 1673, "method_start_line": 1673, "end_line": 1690}, "steps": [], "generation_failure": {"error": "Failed to generate stacktrace", "error_message": "[Errno 2] No such file or directory: './projects/Lang/30/results/stacktrace-testContainsAny_StringCharArrayWithBadSupplementaryChars-containsNone.csv'"}}, {"failing_test": {"className": " org.apache.commons.lang3.StringUtilsEqualsIndexOfTest", "methodName": "testContainsAny_StringCharArrayWithBadSupplementaryChars", "error": "junit.framework.AssertionFailedError", "message": "expected:<false> but was:<true>"}, "patched_method": {"file_path": "/src/main/java/org/apache/commons/lang3/StringUtils.java", "method_name": "indexOfAnyBut", "content": "    /**\n     * <p>Search a String to find the first index of any\n     * character not in the given set of characters.</p>\n     *\n     * <p>A <code>null</code> String will return <code>-1</code>.\n     * A <code>null</code> search string will return <code>-1</code>.</p>\n     *\n     * <pre>\n     * StringUtils.indexOfAnyBut(null, *)            = -1\n     * StringUtils.indexOfAnyBut(\"\", *)              = -1\n     * StringUtils.indexOfAnyBut(*, null)            = -1\n     * StringUtils.indexOfAnyBut(*, \"\")              = -1\n     * StringUtils.indexOfAnyBut(\"zzabyycdxx\", \"za\") = 3\n     * StringUtils.indexOfAnyBut(\"zzabyycdxx\", \"\")   = 0\n     * StringUtils.indexOfAnyBut(\"aba\",\"ab\")         = -1\n     * </pre>\n     *\n     * @param str  the String to check, may be null\n     * @param searchChars  the chars to search for, may be null\n     * @return the index of any of the chars, -1 if no match or null input\n     * @since 2.0\n     */\n    public static int indexOfAnyBut(String str, String searchChars) {\n        if (isEmpty(str) || isEmpty(searchChars)) {\n            return INDEX_NOT_FOUND;\n        }\n        int strLen = str.length();\n        for (int i = 0; i < strLen; i++) {\n            char ch = str.charAt(i);\n            if (searchChars.indexOf(ch) < 0) {\n                    return i;\n            }\n        }\n        return INDEX_NOT_FOUND;\n    }", "javadoc_start_line": 1547, "annotations_start_line": 1569, "method_start_line": 1569, "end_line": 1581}, "steps": [], "generation_failure": {"error": "Failed to generate stacktrace", "error_message": "[Errno 2] No such file or directory: './projects/Lang/30/results/stacktrace-testContainsAny_StringCharArrayWithBadSupplementaryChars-indexOfAnyBut.csv'"}}, {"failing_test": {"className": " org.apache.commons.lang3.StringUtilsEqualsIndexOfTest", "methodName": "testContainsAny_StringCharArrayWithBadSupplementaryChars", "error": "junit.framework.AssertionFailedError", "message": "expected:<false> but was:<true>"}, "patched_method": {"file_path": "/src/main/java/org/apache/commons/lang3/StringUtils.java", "method_name": "indexOfAnyBut", "content": "    /**\n     * <p>Searches a CharSequence to find the first index of any\n     * character not in the given set of characters.</p>\n     *\n     * <p>A <code>null</code> CharSequence will return <code>-1</code>.\n     * A <code>null</code> or zero length search array will return <code>-1</code>.</p>\n     *\n     * <pre>\n     * StringUtils.indexOfAnyBut(null, *)           = -1\n     * StringUtils.indexOfAnyBut(\"\", *)             = -1\n     * StringUtils.indexOfAnyBut(*, null)           = -1\n     * StringUtils.indexOfAnyBut(*, [])             = -1\n     * StringUtils.indexOfAnyBut(\"zzabyycdxx\",'za') = 3\n     * StringUtils.indexOfAnyBut(\"zzabyycdxx\", '')  = 0\n     * StringUtils.indexOfAnyBut(\"aba\", 'ab')       = -1\n     * </pre>\n     *\n     * @param cs  the CharSequence to check, may be null\n     * @param searchChars  the chars to search for, may be null\n     * @return the index of any of the chars, -1 if no match or null input\n     * @since 2.0\n     */\n    public static int indexOfAnyBut(CharSequence cs, char[] searchChars) {\n        if (isEmpty(cs) || ArrayUtils.isEmpty(searchChars)) {\n            return INDEX_NOT_FOUND;\n        }\n        int csLen = cs.length();\n        int searchLen = searchChars.length;\n        outer:\n        for (int i = 0; i < csLen; i++) {\n            char ch = cs.charAt(i);\n            for (int j = 0; j < searchLen; j++) {\n                if (searchChars[j] == ch) {\n                        continue outer;\n                }\n            }\n            return i;\n        }\n        return INDEX_NOT_FOUND;\n    }", "javadoc_start_line": 1506, "annotations_start_line": 1528, "method_start_line": 1528, "end_line": 1545}, "steps": [], "generation_failure": {"error": "Failed to generate stacktrace", "error_message": "[Errno 2] No such file or directory: './projects/Lang/30/results/stacktrace-testContainsAny_StringCharArrayWithBadSupplementaryChars-indexOfAnyBut.csv'"}}, {"failing_test": {"className": " org.apache.commons.lang3.StringUtilsEqualsIndexOfTest", "methodName": "testContainsAny_StringCharArrayWithBadSupplementaryChars", "error": "junit.framework.AssertionFailedError", "message": "expected:<false> but was:<true>"}, "patched_method": {"file_path": "/src/main/java/org/apache/commons/lang3/StringUtils.java", "method_name": "containsAny", "content": "    /**\n     * <p>\n     * Checks if the CharSequence contains any character in the given set of characters.\n     * </p>\n     * \n     * <p>\n     * A <code>null</code> CharSequence will return <code>false</code>. A <code>null</code> search CharSequence will return\n     * <code>false</code>.\n     * </p>\n     * \n     * <pre>\n     * StringUtils.containsAny(null, *)            = false\n     * StringUtils.containsAny(\"\", *)              = false\n     * StringUtils.containsAny(*, null)            = false\n     * StringUtils.containsAny(*, \"\")              = false\n     * StringUtils.containsAny(\"zzabyycdxx\", \"za\") = true\n     * StringUtils.containsAny(\"zzabyycdxx\", \"by\") = true\n     * StringUtils.containsAny(\"aba\",\"z\")          = false\n     * </pre>\n     * \n     * @param cs\n     *            the CharSequence to check, may be null\n     * @param searchChars\n     *            the chars to search for, may be null\n     * @return the <code>true</code> if any of the chars are found, <code>false</code> if no match or null input\n     * @since 2.4\n     */\n    public static boolean containsAny(CharSequence cs, String searchChars) {\n        if (searchChars == null) {\n            return false;\n        }\n        return containsAny(cs, searchChars.toCharArray());\n    }", "javadoc_start_line": 1470, "annotations_start_line": 1497, "method_start_line": 1497, "end_line": 1502}, "steps": [], "generation_failure": {"error": "Failed to generate stacktrace", "error_message": "[Errno 2] No such file or directory: './projects/Lang/30/results/stacktrace-testContainsAny_StringCharArrayWithBadSupplementaryChars-containsAny.csv'"}}, {"failing_test": {"className": " org.apache.commons.lang3.StringUtilsEqualsIndexOfTest", "methodName": "testContainsAny_StringCharArrayWithBadSupplementaryChars", "error": "junit.framework.AssertionFailedError", "message": "expected:<false> but was:<true>"}, "patched_method": {"file_path": "/src/main/java/org/apache/commons/lang3/StringUtils.java", "method_name": "containsAny", "content": "    /**\n     * <p>Checks if the CharSequence contains any character in the given\n     * set of characters.</p>\n     *\n     * <p>A <code>null</code> CharSequence will return <code>false</code>.\n     * A <code>null</code> or zero length search array will return <code>false</code>.</p>\n     *\n     * <pre>\n     * StringUtils.containsAny(null, *)                = false\n     * StringUtils.containsAny(\"\", *)                  = false\n     * StringUtils.containsAny(*, null)                = false\n     * StringUtils.containsAny(*, [])                  = false\n     * StringUtils.containsAny(\"zzabyycdxx\",['z','a']) = true\n     * StringUtils.containsAny(\"zzabyycdxx\",['b','y']) = true\n     * StringUtils.containsAny(\"aba\", ['z'])           = false\n     * </pre>\n     *\n     * @param cs  the CharSequence to check, may be null\n     * @param searchChars  the chars to search for, may be null\n     * @return the <code>true</code> if any of the chars are found,\n     * <code>false</code> if no match or null input\n     * @since 2.4\n     */\n    public static boolean containsAny(CharSequence cs, char[] searchChars) {\n        if (isEmpty(cs) || ArrayUtils.isEmpty(searchChars)) {\n            return false;\n        }\n        int csLength = cs.length();\n        int searchLength = searchChars.length;\n        int csLast = csLength - 1;\n        int searchLast = searchLength - 1;\n        for (int i = 0; i < csLength; i++) {\n            char ch = cs.charAt(i);\n            for (int j = 0; j < searchLength; j++) {\n                if (searchChars[j] == ch) {\n                    if (i < csLast && j < searchLast && ch >= Character.MIN_HIGH_SURROGATE && ch <= Character.MAX_HIGH_SURROGATE) {\n                            // missing low surrogate, fine, like String.indexOf(String)\n                        if (searchChars[j + 1] == cs.charAt(i + 1)) {\n                            return true;\n                        }\n                    } else {\n                        // ch is in the Basic Multilingual Plane\n                        return true;\n                    }\n                }\n            }\n        }\n        return false;\n    }", "javadoc_start_line": 1420, "annotations_start_line": 1443, "method_start_line": 1443, "end_line": 1468}, "steps": [{"file_path": "/src/test/java/org/apache/commons/lang3/StringUtilsEqualsIndexOfTest.java", "method_name": "testContainsAny_StringCharArrayWithBadSupplementaryChars", "content": "    /**\n     * See http://java.sun.com/developer/technicalArticles/Intl/Supplementary/\n     */\n    public void testContainsAny_StringCharArrayWithBadSupplementaryChars() {\n        // Test edge case: 1/2 of a (broken) supplementary char\n        assertEquals(false, StringUtils.containsAny(CharUSuppCharHigh, CharU20001.toCharArray()));\n        assertEquals(false, StringUtils.containsAny(\"abc\" + CharUSuppCharHigh + \"xyz\", CharU20001.toCharArray()));\n        assertEquals(-1, CharUSuppCharLow.indexOf(CharU20001));\n        assertEquals(false, StringUtils.containsAny(CharUSuppCharLow, CharU20001.toCharArray()));\n        assertEquals(false, StringUtils.containsAny(CharU20001, CharUSuppCharHigh.toCharArray()));\n        assertEquals(0, CharU20001.indexOf(CharUSuppCharLow));\n        assertEquals(true, StringUtils.containsAny(CharU20001, CharUSuppCharLow.toCharArray()));\n    }", "javadoc_start_line": 130, "annotations_start_line": 133, "method_start_line": 133, "end_line": 142}, {"file_path": "/src/main/java/org/apache/commons/lang3/StringUtils.java", "method_name": "containsAny", "content": "    /**\n     * <p>Checks if the CharSequence contains any character in the given\n     * set of characters.</p>\n     *\n     * <p>A <code>null</code> CharSequence will return <code>false</code>.\n     * A <code>null</code> or zero length search array will return <code>false</code>.</p>\n     *\n     * <pre>\n     * StringUtils.containsAny(null, *)                = false\n     * StringUtils.containsAny(\"\", *)                  = false\n     * StringUtils.containsAny(*, null)                = false\n     * StringUtils.containsAny(*, [])                  = false\n     * StringUtils.containsAny(\"zzabyycdxx\",['z','a']) = true\n     * StringUtils.containsAny(\"zzabyycdxx\",['b','y']) = true\n     * StringUtils.containsAny(\"aba\", ['z'])           = false\n     * </pre>\n     *\n     * @param cs  the CharSequence to check, may be null\n     * @param searchChars  the chars to search for, may be null\n     * @return the <code>true</code> if any of the chars are found,\n     * <code>false</code> if no match or null input\n     * @since 2.4\n     */\n    public static boolean containsAny(CharSequence cs, char[] searchChars) {\n        if (isEmpty(cs) || ArrayUtils.isEmpty(searchChars)) {\n            return false;\n        }\n        int csLength = cs.length();\n        int searchLength = searchChars.length;\n        int csLast = csLength - 1;\n        int searchLast = searchLength - 1;\n        for (int i = 0; i < csLength; i++) {\n            char ch = cs.charAt(i);\n            for (int j = 0; j < searchLength; j++) {\n                if (searchChars[j] == ch) {\n                    if (i < csLast && j < searchLast && ch >= Character.MIN_HIGH_SURROGATE && ch <= Character.MAX_HIGH_SURROGATE) {\n                            // missing low surrogate, fine, like String.indexOf(String)\n                        if (searchChars[j + 1] == cs.charAt(i + 1)) {\n                            return true;\n                        }\n                    } else {\n                        // ch is in the Basic Multilingual Plane\n                        return true;\n                    }\n                }\n            }\n        }\n        return false;\n    }", "javadoc_start_line": 1420, "annotations_start_line": 1443, "method_start_line": 1443, "end_line": 1468}]}, {"failing_test": {"className": " org.apache.commons.lang3.StringUtilsEqualsIndexOfTest", "methodName": "testContainsAny_StringCharArrayWithBadSupplementaryChars", "error": "junit.framework.AssertionFailedError", "message": "expected:<false> but was:<true>"}, "patched_method": {"file_path": "/src/main/java/org/apache/commons/lang3/StringUtils.java", "method_name": "indexOfAny", "content": "    /**\n     * <p>Search a CharSequence to find the first index of any\n     * character in the given set of characters.</p>\n     *\n     * <p>A <code>null</code> String will return <code>-1</code>.\n     * A <code>null</code> or zero length search array will return <code>-1</code>.</p>\n     *\n     * <pre>\n     * StringUtils.indexOfAny(null, *)                = -1\n     * StringUtils.indexOfAny(\"\", *)                  = -1\n     * StringUtils.indexOfAny(*, null)                = -1\n     * StringUtils.indexOfAny(*, [])                  = -1\n     * StringUtils.indexOfAny(\"zzabyycdxx\",['z','a']) = 0\n     * StringUtils.indexOfAny(\"zzabyycdxx\",['b','y']) = 3\n     * StringUtils.indexOfAny(\"aba\", ['z'])           = -1\n     * </pre>\n     *\n     * @param cs  the CharSequence to check, may be null\n     * @param searchChars  the chars to search for, may be null\n     * @return the index of any of the chars, -1 if no match or null input\n     * @since 2.0\n     */\n    public static int indexOfAny(CharSequence cs, char[] searchChars) {\n        if (isEmpty(cs) || ArrayUtils.isEmpty(searchChars)) {\n            return INDEX_NOT_FOUND;\n        }\n        int csLen = cs.length();\n        int searchLen = searchChars.length;\n        for (int i = 0; i < csLen; i++) {\n            char ch = cs.charAt(i);\n            for (int j = 0; j < searchLen; j++) {\n                if (searchChars[j] == ch) {\n                        // ch is a supplementary character\n                        return i;\n                }\n            }\n        }\n        return INDEX_NOT_FOUND;\n    }", "javadoc_start_line": 1349, "annotations_start_line": 1371, "method_start_line": 1371, "end_line": 1387}, "steps": [], "generation_failure": {"error": "Failed to generate stacktrace", "error_message": "[Errno 2] No such file or directory: './projects/Lang/30/results/stacktrace-testContainsAny_StringCharArrayWithBadSupplementaryChars-indexOfAny.csv'"}}, {"failing_test": {"className": " org.apache.commons.lang3.StringUtilsEqualsIndexOfTest", "methodName": "testIndexOfAnyBut_StringStringWithSupplementaryChars", "error": "junit.framework.AssertionFailedError", "message": "expected:<2> but was:<3>"}, "patched_method": {"file_path": "/src/main/java/org/apache/commons/lang3/StringUtils.java", "method_name": "containsNone", "content": "    /**\n     * <p>Checks that the CharSequence does not contain certain characters.</p>\n     *\n     * <p>A <code>null</code> CharSequence will return <code>true</code>.\n     * A <code>null</code> invalid character array will return <code>true</code>.\n     * An empty CharSequence (length()=0) always returns true.</p>\n     *\n     * <pre>\n     * StringUtils.containsNone(null, *)       = true\n     * StringUtils.containsNone(*, null)       = true\n     * StringUtils.containsNone(\"\", *)         = true\n     * StringUtils.containsNone(\"ab\", '')      = true\n     * StringUtils.containsNone(\"abab\", 'xyz') = true\n     * StringUtils.containsNone(\"ab1\", 'xyz')  = true\n     * StringUtils.containsNone(\"abz\", 'xyz')  = false\n     * </pre>\n     *\n     * @param cs  the CharSequence to check, may be null\n     * @param searchChars  an array of invalid chars, may be null\n     * @return true if it contains none of the invalid chars, or is null\n     * @since 2.0\n     */\n    public static boolean containsNone(CharSequence cs, char[] searchChars) {\n        if (cs == null || searchChars == null) {\n            return true;\n        }\n        int csLen = cs.length();\n        int searchLen = searchChars.length;\n        for (int i = 0; i < csLen; i++) {\n            char ch = cs.charAt(i);\n            for (int j = 0; j < searchLen; j++) {\n                if (searchChars[j] == ch) {\n                            // missing low surrogate, fine, like String.indexOf(String)\n                        // ch is in the Basic Multilingual Plane\n                        return false;\n                }\n            }\n        }\n        return true;\n    }", "javadoc_start_line": 1651, "annotations_start_line": 1673, "method_start_line": 1673, "end_line": 1690}, "steps": [], "generation_failure": {"error": "Failed to generate stacktrace", "error_message": "[Errno 2] No such file or directory: './projects/Lang/30/results/stacktrace-testIndexOfAnyBut_StringStringWithSupplementaryChars-containsNone.csv'"}}, {"failing_test": {"className": " org.apache.commons.lang3.StringUtilsEqualsIndexOfTest", "methodName": "testIndexOfAnyBut_StringStringWithSupplementaryChars", "error": "junit.framework.AssertionFailedError", "message": "expected:<2> but was:<3>"}, "patched_method": {"file_path": "/src/main/java/org/apache/commons/lang3/StringUtils.java", "method_name": "indexOfAnyBut", "content": "    /**\n     * <p>Search a String to find the first index of any\n     * character not in the given set of characters.</p>\n     *\n     * <p>A <code>null</code> String will return <code>-1</code>.\n     * A <code>null</code> search string will return <code>-1</code>.</p>\n     *\n     * <pre>\n     * StringUtils.indexOfAnyBut(null, *)            = -1\n     * StringUtils.indexOfAnyBut(\"\", *)              = -1\n     * StringUtils.indexOfAnyBut(*, null)            = -1\n     * StringUtils.indexOfAnyBut(*, \"\")              = -1\n     * StringUtils.indexOfAnyBut(\"zzabyycdxx\", \"za\") = 3\n     * StringUtils.indexOfAnyBut(\"zzabyycdxx\", \"\")   = 0\n     * StringUtils.indexOfAnyBut(\"aba\",\"ab\")         = -1\n     * </pre>\n     *\n     * @param str  the String to check, may be null\n     * @param searchChars  the chars to search for, may be null\n     * @return the index of any of the chars, -1 if no match or null input\n     * @since 2.0\n     */\n    public static int indexOfAnyBut(String str, String searchChars) {\n        if (isEmpty(str) || isEmpty(searchChars)) {\n            return INDEX_NOT_FOUND;\n        }\n        int strLen = str.length();\n        for (int i = 0; i < strLen; i++) {\n            char ch = str.charAt(i);\n            if (searchChars.indexOf(ch) < 0) {\n                    return i;\n            }\n        }\n        return INDEX_NOT_FOUND;\n    }", "javadoc_start_line": 1547, "annotations_start_line": 1569, "method_start_line": 1569, "end_line": 1581}, "steps": [{"file_path": "/src/test/java/org/apache/commons/lang3/StringUtilsEqualsIndexOfTest.java", "method_name": "testIndexOfAnyBut_StringStringWithSupplementaryChars", "content": "    public void testIndexOfAnyBut_StringStringWithSupplementaryChars() {\n        assertEquals(2, StringUtils.indexOfAnyBut(CharU20000 + CharU20001, CharU20000));\n        assertEquals(0, StringUtils.indexOfAnyBut(CharU20000 + CharU20001, CharU20001));\n        assertEquals(-1, StringUtils.indexOfAnyBut(CharU20000, CharU20000));\n        assertEquals(0, StringUtils.indexOfAnyBut(CharU20000, CharU20001));        \n    }", "javadoc_start_line": 615, "annotations_start_line": 615, "method_start_line": 615, "end_line": 620}, {"file_path": "/src/main/java/org/apache/commons/lang3/StringUtils.java", "method_name": "indexOfAnyBut", "content": "    /**\n     * <p>Search a String to find the first index of any\n     * character not in the given set of characters.</p>\n     *\n     * <p>A <code>null</code> String will return <code>-1</code>.\n     * A <code>null</code> search string will return <code>-1</code>.</p>\n     *\n     * <pre>\n     * StringUtils.indexOfAnyBut(null, *)            = -1\n     * StringUtils.indexOfAnyBut(\"\", *)              = -1\n     * StringUtils.indexOfAnyBut(*, null)            = -1\n     * StringUtils.indexOfAnyBut(*, \"\")              = -1\n     * StringUtils.indexOfAnyBut(\"zzabyycdxx\", \"za\") = 3\n     * StringUtils.indexOfAnyBut(\"zzabyycdxx\", \"\")   = 0\n     * StringUtils.indexOfAnyBut(\"aba\",\"ab\")         = -1\n     * </pre>\n     *\n     * @param str  the String to check, may be null\n     * @param searchChars  the chars to search for, may be null\n     * @return the index of any of the chars, -1 if no match or null input\n     * @since 2.0\n     */\n    public static int indexOfAnyBut(String str, String searchChars) {\n        if (isEmpty(str) || isEmpty(searchChars)) {\n            return INDEX_NOT_FOUND;\n        }\n        int strLen = str.length();\n        for (int i = 0; i < strLen; i++) {\n            char ch = str.charAt(i);\n            if (searchChars.indexOf(ch) < 0) {\n                    return i;\n            }\n        }\n        return INDEX_NOT_FOUND;\n    }", "javadoc_start_line": 1547, "annotations_start_line": 1569, "method_start_line": 1569, "end_line": 1581}]}, {"failing_test": {"className": " org.apache.commons.lang3.StringUtilsEqualsIndexOfTest", "methodName": "testIndexOfAnyBut_StringStringWithSupplementaryChars", "error": "junit.framework.AssertionFailedError", "message": "expected:<2> but was:<3>"}, "patched_method": {"file_path": "/src/main/java/org/apache/commons/lang3/StringUtils.java", "method_name": "indexOfAnyBut", "content": "    /**\n     * <p>Searches a CharSequence to find the first index of any\n     * character not in the given set of characters.</p>\n     *\n     * <p>A <code>null</code> CharSequence will return <code>-1</code>.\n     * A <code>null</code> or zero length search array will return <code>-1</code>.</p>\n     *\n     * <pre>\n     * StringUtils.indexOfAnyBut(null, *)           = -1\n     * StringUtils.indexOfAnyBut(\"\", *)             = -1\n     * StringUtils.indexOfAnyBut(*, null)           = -1\n     * StringUtils.indexOfAnyBut(*, [])             = -1\n     * StringUtils.indexOfAnyBut(\"zzabyycdxx\",'za') = 3\n     * StringUtils.indexOfAnyBut(\"zzabyycdxx\", '')  = 0\n     * StringUtils.indexOfAnyBut(\"aba\", 'ab')       = -1\n     * </pre>\n     *\n     * @param cs  the CharSequence to check, may be null\n     * @param searchChars  the chars to search for, may be null\n     * @return the index of any of the chars, -1 if no match or null input\n     * @since 2.0\n     */\n    public static int indexOfAnyBut(CharSequence cs, char[] searchChars) {\n        if (isEmpty(cs) || ArrayUtils.isEmpty(searchChars)) {\n            return INDEX_NOT_FOUND;\n        }\n        int csLen = cs.length();\n        int searchLen = searchChars.length;\n        outer:\n        for (int i = 0; i < csLen; i++) {\n            char ch = cs.charAt(i);\n            for (int j = 0; j < searchLen; j++) {\n                if (searchChars[j] == ch) {\n                        continue outer;\n                }\n            }\n            return i;\n        }\n        return INDEX_NOT_FOUND;\n    }", "javadoc_start_line": 1506, "annotations_start_line": 1528, "method_start_line": 1528, "end_line": 1545}, "steps": [{"file_path": "/src/test/java/org/apache/commons/lang3/StringUtilsEqualsIndexOfTest.java", "method_name": "testIndexOfAnyBut_StringStringWithSupplementaryChars", "content": "    public void testIndexOfAnyBut_StringStringWithSupplementaryChars() {\n        assertEquals(2, StringUtils.indexOfAnyBut(CharU20000 + CharU20001, CharU20000));\n        assertEquals(0, StringUtils.indexOfAnyBut(CharU20000 + CharU20001, CharU20001));\n        assertEquals(-1, StringUtils.indexOfAnyBut(CharU20000, CharU20000));\n        assertEquals(0, StringUtils.indexOfAnyBut(CharU20000, CharU20001));        \n    }", "javadoc_start_line": 615, "annotations_start_line": 615, "method_start_line": 615, "end_line": 620}, {"file_path": "/src/main/java/org/apache/commons/lang3/StringUtils.java", "method_name": "indexOfAnyBut", "content": "    /**\n     * <p>Search a String to find the first index of any\n     * character not in the given set of characters.</p>\n     *\n     * <p>A <code>null</code> String will return <code>-1</code>.\n     * A <code>null</code> search string will return <code>-1</code>.</p>\n     *\n     * <pre>\n     * StringUtils.indexOfAnyBut(null, *)            = -1\n     * StringUtils.indexOfAnyBut(\"\", *)              = -1\n     * StringUtils.indexOfAnyBut(*, null)            = -1\n     * StringUtils.indexOfAnyBut(*, \"\")              = -1\n     * StringUtils.indexOfAnyBut(\"zzabyycdxx\", \"za\") = 3\n     * StringUtils.indexOfAnyBut(\"zzabyycdxx\", \"\")   = 0\n     * StringUtils.indexOfAnyBut(\"aba\",\"ab\")         = -1\n     * </pre>\n     *\n     * @param str  the String to check, may be null\n     * @param searchChars  the chars to search for, may be null\n     * @return the index of any of the chars, -1 if no match or null input\n     * @since 2.0\n     */\n    public static int indexOfAnyBut(String str, String searchChars) {\n        if (isEmpty(str) || isEmpty(searchChars)) {\n            return INDEX_NOT_FOUND;\n        }\n        int strLen = str.length();\n        for (int i = 0; i < strLen; i++) {\n            char ch = str.charAt(i);\n            if (searchChars.indexOf(ch) < 0) {\n                    return i;\n            }\n        }\n        return INDEX_NOT_FOUND;\n    }", "javadoc_start_line": 1547, "annotations_start_line": 1569, "method_start_line": 1569, "end_line": 1581}]}, {"failing_test": {"className": " org.apache.commons.lang3.StringUtilsEqualsIndexOfTest", "methodName": "testIndexOfAnyBut_StringStringWithSupplementaryChars", "error": "junit.framework.AssertionFailedError", "message": "expected:<2> but was:<3>"}, "patched_method": {"file_path": "/src/main/java/org/apache/commons/lang3/StringUtils.java", "method_name": "containsAny", "content": "    /**\n     * <p>\n     * Checks if the CharSequence contains any character in the given set of characters.\n     * </p>\n     * \n     * <p>\n     * A <code>null</code> CharSequence will return <code>false</code>. A <code>null</code> search CharSequence will return\n     * <code>false</code>.\n     * </p>\n     * \n     * <pre>\n     * StringUtils.containsAny(null, *)            = false\n     * StringUtils.containsAny(\"\", *)              = false\n     * StringUtils.containsAny(*, null)            = false\n     * StringUtils.containsAny(*, \"\")              = false\n     * StringUtils.containsAny(\"zzabyycdxx\", \"za\") = true\n     * StringUtils.containsAny(\"zzabyycdxx\", \"by\") = true\n     * StringUtils.containsAny(\"aba\",\"z\")          = false\n     * </pre>\n     * \n     * @param cs\n     *            the CharSequence to check, may be null\n     * @param searchChars\n     *            the chars to search for, may be null\n     * @return the <code>true</code> if any of the chars are found, <code>false</code> if no match or null input\n     * @since 2.4\n     */\n    public static boolean containsAny(CharSequence cs, String searchChars) {\n        if (searchChars == null) {\n            return false;\n        }\n        return containsAny(cs, searchChars.toCharArray());\n    }", "javadoc_start_line": 1470, "annotations_start_line": 1497, "method_start_line": 1497, "end_line": 1502}, "steps": [], "generation_failure": {"error": "Failed to generate stacktrace", "error_message": "[Errno 2] No such file or directory: './projects/Lang/30/results/stacktrace-testIndexOfAnyBut_StringStringWithSupplementaryChars-containsAny.csv'"}}, {"failing_test": {"className": " org.apache.commons.lang3.StringUtilsEqualsIndexOfTest", "methodName": "testIndexOfAnyBut_StringStringWithSupplementaryChars", "error": "junit.framework.AssertionFailedError", "message": "expected:<2> but was:<3>"}, "patched_method": {"file_path": "/src/main/java/org/apache/commons/lang3/StringUtils.java", "method_name": "containsAny", "content": "    /**\n     * <p>Checks if the CharSequence contains any character in the given\n     * set of characters.</p>\n     *\n     * <p>A <code>null</code> CharSequence will return <code>false</code>.\n     * A <code>null</code> or zero length search array will return <code>false</code>.</p>\n     *\n     * <pre>\n     * StringUtils.containsAny(null, *)                = false\n     * StringUtils.containsAny(\"\", *)                  = false\n     * StringUtils.containsAny(*, null)                = false\n     * StringUtils.containsAny(*, [])                  = false\n     * StringUtils.containsAny(\"zzabyycdxx\",['z','a']) = true\n     * StringUtils.containsAny(\"zzabyycdxx\",['b','y']) = true\n     * StringUtils.containsAny(\"aba\", ['z'])           = false\n     * </pre>\n     *\n     * @param cs  the CharSequence to check, may be null\n     * @param searchChars  the chars to search for, may be null\n     * @return the <code>true</code> if any of the chars are found,\n     * <code>false</code> if no match or null input\n     * @since 2.4\n     */\n    public static boolean containsAny(CharSequence cs, char[] searchChars) {\n        if (isEmpty(cs) || ArrayUtils.isEmpty(searchChars)) {\n            return false;\n        }\n        int csLength = cs.length();\n        int searchLength = searchChars.length;\n        int csLast = csLength - 1;\n        int searchLast = searchLength - 1;\n        for (int i = 0; i < csLength; i++) {\n            char ch = cs.charAt(i);\n            for (int j = 0; j < searchLength; j++) {\n                if (searchChars[j] == ch) {\n                    if (i < csLast && j < searchLast && ch >= Character.MIN_HIGH_SURROGATE && ch <= Character.MAX_HIGH_SURROGATE) {\n                            // missing low surrogate, fine, like String.indexOf(String)\n                        if (searchChars[j + 1] == cs.charAt(i + 1)) {\n                            return true;\n                        }\n                    } else {\n                        // ch is in the Basic Multilingual Plane\n                        return true;\n                    }\n                }\n            }\n        }\n        return false;\n    }", "javadoc_start_line": 1420, "annotations_start_line": 1443, "method_start_line": 1443, "end_line": 1468}, "steps": [], "generation_failure": {"error": "Failed to generate stacktrace", "error_message": "[Errno 2] No such file or directory: './projects/Lang/30/results/stacktrace-testIndexOfAnyBut_StringStringWithSupplementaryChars-containsAny.csv'"}}, {"failing_test": {"className": " org.apache.commons.lang3.StringUtilsEqualsIndexOfTest", "methodName": "testIndexOfAnyBut_StringStringWithSupplementaryChars", "error": "junit.framework.AssertionFailedError", "message": "expected:<2> but was:<3>"}, "patched_method": {"file_path": "/src/main/java/org/apache/commons/lang3/StringUtils.java", "method_name": "indexOfAny", "content": "    /**\n     * <p>Search a CharSequence to find the first index of any\n     * character in the given set of characters.</p>\n     *\n     * <p>A <code>null</code> String will return <code>-1</code>.\n     * A <code>null</code> or zero length search array will return <code>-1</code>.</p>\n     *\n     * <pre>\n     * StringUtils.indexOfAny(null, *)                = -1\n     * StringUtils.indexOfAny(\"\", *)                  = -1\n     * StringUtils.indexOfAny(*, null)                = -1\n     * StringUtils.indexOfAny(*, [])                  = -1\n     * StringUtils.indexOfAny(\"zzabyycdxx\",['z','a']) = 0\n     * StringUtils.indexOfAny(\"zzabyycdxx\",['b','y']) = 3\n     * StringUtils.indexOfAny(\"aba\", ['z'])           = -1\n     * </pre>\n     *\n     * @param cs  the CharSequence to check, may be null\n     * @param searchChars  the chars to search for, may be null\n     * @return the index of any of the chars, -1 if no match or null input\n     * @since 2.0\n     */\n    public static int indexOfAny(CharSequence cs, char[] searchChars) {\n        if (isEmpty(cs) || ArrayUtils.isEmpty(searchChars)) {\n            return INDEX_NOT_FOUND;\n        }\n        int csLen = cs.length();\n        int searchLen = searchChars.length;\n        for (int i = 0; i < csLen; i++) {\n            char ch = cs.charAt(i);\n            for (int j = 0; j < searchLen; j++) {\n                if (searchChars[j] == ch) {\n                        // ch is a supplementary character\n                        return i;\n                }\n            }\n        }\n        return INDEX_NOT_FOUND;\n    }", "javadoc_start_line": 1349, "annotations_start_line": 1371, "method_start_line": 1371, "end_line": 1387}, "steps": [], "generation_failure": {"error": "Failed to generate stacktrace", "error_message": "[Errno 2] No such file or directory: './projects/Lang/30/results/stacktrace-testIndexOfAnyBut_StringStringWithSupplementaryChars-indexOfAny.csv'"}}, {"failing_test": {"className": " org.apache.commons.lang3.StringUtilsEqualsIndexOfTest", "methodName": "testContainsAny_StringWithBadSupplementaryChars", "error": "junit.framework.AssertionFailedError", "message": "expected:<false> but was:<true>"}, "patched_method": {"file_path": "/src/main/java/org/apache/commons/lang3/StringUtils.java", "method_name": "containsNone", "content": "    /**\n     * <p>Checks that the CharSequence does not contain certain characters.</p>\n     *\n     * <p>A <code>null</code> CharSequence will return <code>true</code>.\n     * A <code>null</code> invalid character array will return <code>true</code>.\n     * An empty CharSequence (length()=0) always returns true.</p>\n     *\n     * <pre>\n     * StringUtils.containsNone(null, *)       = true\n     * StringUtils.containsNone(*, null)       = true\n     * StringUtils.containsNone(\"\", *)         = true\n     * StringUtils.containsNone(\"ab\", '')      = true\n     * StringUtils.containsNone(\"abab\", 'xyz') = true\n     * StringUtils.containsNone(\"ab1\", 'xyz')  = true\n     * StringUtils.containsNone(\"abz\", 'xyz')  = false\n     * </pre>\n     *\n     * @param cs  the CharSequence to check, may be null\n     * @param searchChars  an array of invalid chars, may be null\n     * @return true if it contains none of the invalid chars, or is null\n     * @since 2.0\n     */\n    public static boolean containsNone(CharSequence cs, char[] searchChars) {\n        if (cs == null || searchChars == null) {\n            return true;\n        }\n        int csLen = cs.length();\n        int searchLen = searchChars.length;\n        for (int i = 0; i < csLen; i++) {\n            char ch = cs.charAt(i);\n            for (int j = 0; j < searchLen; j++) {\n                if (searchChars[j] == ch) {\n                            // missing low surrogate, fine, like String.indexOf(String)\n                        // ch is in the Basic Multilingual Plane\n                        return false;\n                }\n            }\n        }\n        return true;\n    }", "javadoc_start_line": 1651, "annotations_start_line": 1673, "method_start_line": 1673, "end_line": 1690}, "steps": [], "generation_failure": {"error": "Failed to generate stacktrace", "error_message": "[Errno 2] No such file or directory: './projects/Lang/30/results/stacktrace-testContainsAny_StringWithBadSupplementaryChars-containsNone.csv'"}}, {"failing_test": {"className": " org.apache.commons.lang3.StringUtilsEqualsIndexOfTest", "methodName": "testContainsAny_StringWithBadSupplementaryChars", "error": "junit.framework.AssertionFailedError", "message": "expected:<false> but was:<true>"}, "patched_method": {"file_path": "/src/main/java/org/apache/commons/lang3/StringUtils.java", "method_name": "indexOfAnyBut", "content": "    /**\n     * <p>Search a String to find the first index of any\n     * character not in the given set of characters.</p>\n     *\n     * <p>A <code>null</code> String will return <code>-1</code>.\n     * A <code>null</code> search string will return <code>-1</code>.</p>\n     *\n     * <pre>\n     * StringUtils.indexOfAnyBut(null, *)            = -1\n     * StringUtils.indexOfAnyBut(\"\", *)              = -1\n     * StringUtils.indexOfAnyBut(*, null)            = -1\n     * StringUtils.indexOfAnyBut(*, \"\")              = -1\n     * StringUtils.indexOfAnyBut(\"zzabyycdxx\", \"za\") = 3\n     * StringUtils.indexOfAnyBut(\"zzabyycdxx\", \"\")   = 0\n     * StringUtils.indexOfAnyBut(\"aba\",\"ab\")         = -1\n     * </pre>\n     *\n     * @param str  the String to check, may be null\n     * @param searchChars  the chars to search for, may be null\n     * @return the index of any of the chars, -1 if no match or null input\n     * @since 2.0\n     */\n    public static int indexOfAnyBut(String str, String searchChars) {\n        if (isEmpty(str) || isEmpty(searchChars)) {\n            return INDEX_NOT_FOUND;\n        }\n        int strLen = str.length();\n        for (int i = 0; i < strLen; i++) {\n            char ch = str.charAt(i);\n            if (searchChars.indexOf(ch) < 0) {\n                    return i;\n            }\n        }\n        return INDEX_NOT_FOUND;\n    }", "javadoc_start_line": 1547, "annotations_start_line": 1569, "method_start_line": 1569, "end_line": 1581}, "steps": [], "generation_failure": {"error": "Failed to generate stacktrace", "error_message": "[Errno 2] No such file or directory: './projects/Lang/30/results/stacktrace-testContainsAny_StringWithBadSupplementaryChars-indexOfAnyBut.csv'"}}, {"failing_test": {"className": " org.apache.commons.lang3.StringUtilsEqualsIndexOfTest", "methodName": "testContainsAny_StringWithBadSupplementaryChars", "error": "junit.framework.AssertionFailedError", "message": "expected:<false> but was:<true>"}, "patched_method": {"file_path": "/src/main/java/org/apache/commons/lang3/StringUtils.java", "method_name": "indexOfAnyBut", "content": "    /**\n     * <p>Searches a CharSequence to find the first index of any\n     * character not in the given set of characters.</p>\n     *\n     * <p>A <code>null</code> CharSequence will return <code>-1</code>.\n     * A <code>null</code> or zero length search array will return <code>-1</code>.</p>\n     *\n     * <pre>\n     * StringUtils.indexOfAnyBut(null, *)           = -1\n     * StringUtils.indexOfAnyBut(\"\", *)             = -1\n     * StringUtils.indexOfAnyBut(*, null)           = -1\n     * StringUtils.indexOfAnyBut(*, [])             = -1\n     * StringUtils.indexOfAnyBut(\"zzabyycdxx\",'za') = 3\n     * StringUtils.indexOfAnyBut(\"zzabyycdxx\", '')  = 0\n     * StringUtils.indexOfAnyBut(\"aba\", 'ab')       = -1\n     * </pre>\n     *\n     * @param cs  the CharSequence to check, may be null\n     * @param searchChars  the chars to search for, may be null\n     * @return the index of any of the chars, -1 if no match or null input\n     * @since 2.0\n     */\n    public static int indexOfAnyBut(CharSequence cs, char[] searchChars) {\n        if (isEmpty(cs) || ArrayUtils.isEmpty(searchChars)) {\n            return INDEX_NOT_FOUND;\n        }\n        int csLen = cs.length();\n        int searchLen = searchChars.length;\n        outer:\n        for (int i = 0; i < csLen; i++) {\n            char ch = cs.charAt(i);\n            for (int j = 0; j < searchLen; j++) {\n                if (searchChars[j] == ch) {\n                        continue outer;\n                }\n            }\n            return i;\n        }\n        return INDEX_NOT_FOUND;\n    }", "javadoc_start_line": 1506, "annotations_start_line": 1528, "method_start_line": 1528, "end_line": 1545}, "steps": [], "generation_failure": {"error": "Failed to generate stacktrace", "error_message": "[Errno 2] No such file or directory: './projects/Lang/30/results/stacktrace-testContainsAny_StringWithBadSupplementaryChars-indexOfAnyBut.csv'"}}, {"failing_test": {"className": " org.apache.commons.lang3.StringUtilsEqualsIndexOfTest", "methodName": "testContainsAny_StringWithBadSupplementaryChars", "error": "junit.framework.AssertionFailedError", "message": "expected:<false> but was:<true>"}, "patched_method": {"file_path": "/src/main/java/org/apache/commons/lang3/StringUtils.java", "method_name": "containsAny", "content": "    /**\n     * <p>\n     * Checks if the CharSequence contains any character in the given set of characters.\n     * </p>\n     * \n     * <p>\n     * A <code>null</code> CharSequence will return <code>false</code>. A <code>null</code> search CharSequence will return\n     * <code>false</code>.\n     * </p>\n     * \n     * <pre>\n     * StringUtils.containsAny(null, *)            = false\n     * StringUtils.containsAny(\"\", *)              = false\n     * StringUtils.containsAny(*, null)            = false\n     * StringUtils.containsAny(*, \"\")              = false\n     * StringUtils.containsAny(\"zzabyycdxx\", \"za\") = true\n     * StringUtils.containsAny(\"zzabyycdxx\", \"by\") = true\n     * StringUtils.containsAny(\"aba\",\"z\")          = false\n     * </pre>\n     * \n     * @param cs\n     *            the CharSequence to check, may be null\n     * @param searchChars\n     *            the chars to search for, may be null\n     * @return the <code>true</code> if any of the chars are found, <code>false</code> if no match or null input\n     * @since 2.4\n     */\n    public static boolean containsAny(CharSequence cs, String searchChars) {\n        if (searchChars == null) {\n            return false;\n        }\n        return containsAny(cs, searchChars.toCharArray());\n    }", "javadoc_start_line": 1470, "annotations_start_line": 1497, "method_start_line": 1497, "end_line": 1502}, "steps": [{"file_path": "/src/test/java/org/apache/commons/lang3/StringUtilsEqualsIndexOfTest.java", "method_name": "testContainsAny_StringWithBadSupplementaryChars", "content": "    /**\n     * See http://java.sun.com/developer/technicalArticles/Intl/Supplementary/\n     */\n    public void testContainsAny_StringWithBadSupplementaryChars() {\n        // Test edge case: 1/2 of a (broken) supplementary char\n        assertEquals(false, StringUtils.containsAny(CharUSuppCharHigh, CharU20001));\n        assertEquals(-1, CharUSuppCharLow.indexOf(CharU20001));\n        assertEquals(false, StringUtils.containsAny(CharUSuppCharLow, CharU20001));\n        assertEquals(false, StringUtils.containsAny(CharU20001, CharUSuppCharHigh));\n        assertEquals(0, CharU20001.indexOf(CharUSuppCharLow));\n        assertEquals(true, StringUtils.containsAny(CharU20001, CharUSuppCharLow));\n    }", "javadoc_start_line": 179, "annotations_start_line": 182, "method_start_line": 182, "end_line": 190}, {"file_path": "/src/main/java/org/apache/commons/lang3/StringUtils.java", "method_name": "containsAny", "content": "    /**\n     * <p>\n     * Checks if the CharSequence contains any character in the given set of characters.\n     * </p>\n     * \n     * <p>\n     * A <code>null</code> CharSequence will return <code>false</code>. A <code>null</code> search CharSequence will return\n     * <code>false</code>.\n     * </p>\n     * \n     * <pre>\n     * StringUtils.containsAny(null, *)            = false\n     * StringUtils.containsAny(\"\", *)              = false\n     * StringUtils.containsAny(*, null)            = false\n     * StringUtils.containsAny(*, \"\")              = false\n     * StringUtils.containsAny(\"zzabyycdxx\", \"za\") = true\n     * StringUtils.containsAny(\"zzabyycdxx\", \"by\") = true\n     * StringUtils.containsAny(\"aba\",\"z\")          = false\n     * </pre>\n     * \n     * @param cs\n     *            the CharSequence to check, may be null\n     * @param searchChars\n     *            the chars to search for, may be null\n     * @return the <code>true</code> if any of the chars are found, <code>false</code> if no match or null input\n     * @since 2.4\n     */\n    public static boolean containsAny(CharSequence cs, String searchChars) {\n        if (searchChars == null) {\n            return false;\n        }\n        return containsAny(cs, searchChars.toCharArray());\n    }", "javadoc_start_line": 1470, "annotations_start_line": 1497, "method_start_line": 1497, "end_line": 1502}]}, {"failing_test": {"className": " org.apache.commons.lang3.StringUtilsEqualsIndexOfTest", "methodName": "testContainsAny_StringWithBadSupplementaryChars", "error": "junit.framework.AssertionFailedError", "message": "expected:<false> but was:<true>"}, "patched_method": {"file_path": "/src/main/java/org/apache/commons/lang3/StringUtils.java", "method_name": "containsAny", "content": "    /**\n     * <p>Checks if the CharSequence contains any character in the given\n     * set of characters.</p>\n     *\n     * <p>A <code>null</code> CharSequence will return <code>false</code>.\n     * A <code>null</code> or zero length search array will return <code>false</code>.</p>\n     *\n     * <pre>\n     * StringUtils.containsAny(null, *)                = false\n     * StringUtils.containsAny(\"\", *)                  = false\n     * StringUtils.containsAny(*, null)                = false\n     * StringUtils.containsAny(*, [])                  = false\n     * StringUtils.containsAny(\"zzabyycdxx\",['z','a']) = true\n     * StringUtils.containsAny(\"zzabyycdxx\",['b','y']) = true\n     * StringUtils.containsAny(\"aba\", ['z'])           = false\n     * </pre>\n     *\n     * @param cs  the CharSequence to check, may be null\n     * @param searchChars  the chars to search for, may be null\n     * @return the <code>true</code> if any of the chars are found,\n     * <code>false</code> if no match or null input\n     * @since 2.4\n     */\n    public static boolean containsAny(CharSequence cs, char[] searchChars) {\n        if (isEmpty(cs) || ArrayUtils.isEmpty(searchChars)) {\n            return false;\n        }\n        int csLength = cs.length();\n        int searchLength = searchChars.length;\n        int csLast = csLength - 1;\n        int searchLast = searchLength - 1;\n        for (int i = 0; i < csLength; i++) {\n            char ch = cs.charAt(i);\n            for (int j = 0; j < searchLength; j++) {\n                if (searchChars[j] == ch) {\n                    if (i < csLast && j < searchLast && ch >= Character.MIN_HIGH_SURROGATE && ch <= Character.MAX_HIGH_SURROGATE) {\n                            // missing low surrogate, fine, like String.indexOf(String)\n                        if (searchChars[j + 1] == cs.charAt(i + 1)) {\n                            return true;\n                        }\n                    } else {\n                        // ch is in the Basic Multilingual Plane\n                        return true;\n                    }\n                }\n            }\n        }\n        return false;\n    }", "javadoc_start_line": 1420, "annotations_start_line": 1443, "method_start_line": 1443, "end_line": 1468}, "steps": [{"file_path": "/src/test/java/org/apache/commons/lang3/StringUtilsEqualsIndexOfTest.java", "method_name": "testContainsAny_StringWithBadSupplementaryChars", "content": "    /**\n     * See http://java.sun.com/developer/technicalArticles/Intl/Supplementary/\n     */\n    public void testContainsAny_StringWithBadSupplementaryChars() {\n        // Test edge case: 1/2 of a (broken) supplementary char\n        assertEquals(false, StringUtils.containsAny(CharUSuppCharHigh, CharU20001));\n        assertEquals(-1, CharUSuppCharLow.indexOf(CharU20001));\n        assertEquals(false, StringUtils.containsAny(CharUSuppCharLow, CharU20001));\n        assertEquals(false, StringUtils.containsAny(CharU20001, CharUSuppCharHigh));\n        assertEquals(0, CharU20001.indexOf(CharUSuppCharLow));\n        assertEquals(true, StringUtils.containsAny(CharU20001, CharUSuppCharLow));\n    }", "javadoc_start_line": 179, "annotations_start_line": 182, "method_start_line": 182, "end_line": 190}, {"file_path": "/src/main/java/org/apache/commons/lang3/StringUtils.java", "method_name": "containsAny", "content": "    /**\n     * <p>\n     * Checks if the CharSequence contains any character in the given set of characters.\n     * </p>\n     * \n     * <p>\n     * A <code>null</code> CharSequence will return <code>false</code>. A <code>null</code> search CharSequence will return\n     * <code>false</code>.\n     * </p>\n     * \n     * <pre>\n     * StringUtils.containsAny(null, *)            = false\n     * StringUtils.containsAny(\"\", *)              = false\n     * StringUtils.containsAny(*, null)            = false\n     * StringUtils.containsAny(*, \"\")              = false\n     * StringUtils.containsAny(\"zzabyycdxx\", \"za\") = true\n     * StringUtils.containsAny(\"zzabyycdxx\", \"by\") = true\n     * StringUtils.containsAny(\"aba\",\"z\")          = false\n     * </pre>\n     * \n     * @param cs\n     *            the CharSequence to check, may be null\n     * @param searchChars\n     *            the chars to search for, may be null\n     * @return the <code>true</code> if any of the chars are found, <code>false</code> if no match or null input\n     * @since 2.4\n     */\n    public static boolean containsAny(CharSequence cs, String searchChars) {\n        if (searchChars == null) {\n            return false;\n        }\n        return containsAny(cs, searchChars.toCharArray());\n    }", "javadoc_start_line": 1470, "annotations_start_line": 1497, "method_start_line": 1497, "end_line": 1502}]}, {"failing_test": {"className": " org.apache.commons.lang3.StringUtilsEqualsIndexOfTest", "methodName": "testContainsAny_StringWithBadSupplementaryChars", "error": "junit.framework.AssertionFailedError", "message": "expected:<false> but was:<true>"}, "patched_method": {"file_path": "/src/main/java/org/apache/commons/lang3/StringUtils.java", "method_name": "indexOfAny", "content": "    /**\n     * <p>Search a CharSequence to find the first index of any\n     * character in the given set of characters.</p>\n     *\n     * <p>A <code>null</code> String will return <code>-1</code>.\n     * A <code>null</code> or zero length search array will return <code>-1</code>.</p>\n     *\n     * <pre>\n     * StringUtils.indexOfAny(null, *)                = -1\n     * StringUtils.indexOfAny(\"\", *)                  = -1\n     * StringUtils.indexOfAny(*, null)                = -1\n     * StringUtils.indexOfAny(*, [])                  = -1\n     * StringUtils.indexOfAny(\"zzabyycdxx\",['z','a']) = 0\n     * StringUtils.indexOfAny(\"zzabyycdxx\",['b','y']) = 3\n     * StringUtils.indexOfAny(\"aba\", ['z'])           = -1\n     * </pre>\n     *\n     * @param cs  the CharSequence to check, may be null\n     * @param searchChars  the chars to search for, may be null\n     * @return the index of any of the chars, -1 if no match or null input\n     * @since 2.0\n     */\n    public static int indexOfAny(CharSequence cs, char[] searchChars) {\n        if (isEmpty(cs) || ArrayUtils.isEmpty(searchChars)) {\n            return INDEX_NOT_FOUND;\n        }\n        int csLen = cs.length();\n        int searchLen = searchChars.length;\n        for (int i = 0; i < csLen; i++) {\n            char ch = cs.charAt(i);\n            for (int j = 0; j < searchLen; j++) {\n                if (searchChars[j] == ch) {\n                        // ch is a supplementary character\n                        return i;\n                }\n            }\n        }\n        return INDEX_NOT_FOUND;\n    }", "javadoc_start_line": 1349, "annotations_start_line": 1371, "method_start_line": 1371, "end_line": 1387}, "steps": [], "generation_failure": {"error": "Failed to generate stacktrace", "error_message": "[Errno 2] No such file or directory: './projects/Lang/30/results/stacktrace-testContainsAny_StringWithBadSupplementaryChars-indexOfAny.csv'"}}, {"failing_test": {"className": " org.apache.commons.lang3.StringUtilsEqualsIndexOfTest", "methodName": "testIndexOfAny_StringCharArrayWithSupplementaryChars", "error": "junit.framework.AssertionFailedError", "message": "expected:<2> but was:<0>"}, "patched_method": {"file_path": "/src/main/java/org/apache/commons/lang3/StringUtils.java", "method_name": "containsNone", "content": "    /**\n     * <p>Checks that the CharSequence does not contain certain characters.</p>\n     *\n     * <p>A <code>null</code> CharSequence will return <code>true</code>.\n     * A <code>null</code> invalid character array will return <code>true</code>.\n     * An empty CharSequence (length()=0) always returns true.</p>\n     *\n     * <pre>\n     * StringUtils.containsNone(null, *)       = true\n     * StringUtils.containsNone(*, null)       = true\n     * StringUtils.containsNone(\"\", *)         = true\n     * StringUtils.containsNone(\"ab\", '')      = true\n     * StringUtils.containsNone(\"abab\", 'xyz') = true\n     * StringUtils.containsNone(\"ab1\", 'xyz')  = true\n     * StringUtils.containsNone(\"abz\", 'xyz')  = false\n     * </pre>\n     *\n     * @param cs  the CharSequence to check, may be null\n     * @param searchChars  an array of invalid chars, may be null\n     * @return true if it contains none of the invalid chars, or is null\n     * @since 2.0\n     */\n    public static boolean containsNone(CharSequence cs, char[] searchChars) {\n        if (cs == null || searchChars == null) {\n            return true;\n        }\n        int csLen = cs.length();\n        int searchLen = searchChars.length;\n        for (int i = 0; i < csLen; i++) {\n            char ch = cs.charAt(i);\n            for (int j = 0; j < searchLen; j++) {\n                if (searchChars[j] == ch) {\n                            // missing low surrogate, fine, like String.indexOf(String)\n                        // ch is in the Basic Multilingual Plane\n                        return false;\n                }\n            }\n        }\n        return true;\n    }", "javadoc_start_line": 1651, "annotations_start_line": 1673, "method_start_line": 1673, "end_line": 1690}, "steps": [], "generation_failure": {"error": "Failed to generate stacktrace", "error_message": "[Errno 2] No such file or directory: './projects/Lang/30/results/stacktrace-testIndexOfAny_StringCharArrayWithSupplementaryChars-containsNone.csv'"}}, {"failing_test": {"className": " org.apache.commons.lang3.StringUtilsEqualsIndexOfTest", "methodName": "testIndexOfAny_StringCharArrayWithSupplementaryChars", "error": "junit.framework.AssertionFailedError", "message": "expected:<2> but was:<0>"}, "patched_method": {"file_path": "/src/main/java/org/apache/commons/lang3/StringUtils.java", "method_name": "indexOfAnyBut", "content": "    /**\n     * <p>Search a String to find the first index of any\n     * character not in the given set of characters.</p>\n     *\n     * <p>A <code>null</code> String will return <code>-1</code>.\n     * A <code>null</code> search string will return <code>-1</code>.</p>\n     *\n     * <pre>\n     * StringUtils.indexOfAnyBut(null, *)            = -1\n     * StringUtils.indexOfAnyBut(\"\", *)              = -1\n     * StringUtils.indexOfAnyBut(*, null)            = -1\n     * StringUtils.indexOfAnyBut(*, \"\")              = -1\n     * StringUtils.indexOfAnyBut(\"zzabyycdxx\", \"za\") = 3\n     * StringUtils.indexOfAnyBut(\"zzabyycdxx\", \"\")   = 0\n     * StringUtils.indexOfAnyBut(\"aba\",\"ab\")         = -1\n     * </pre>\n     *\n     * @param str  the String to check, may be null\n     * @param searchChars  the chars to search for, may be null\n     * @return the index of any of the chars, -1 if no match or null input\n     * @since 2.0\n     */\n    public static int indexOfAnyBut(String str, String searchChars) {\n        if (isEmpty(str) || isEmpty(searchChars)) {\n            return INDEX_NOT_FOUND;\n        }\n        int strLen = str.length();\n        for (int i = 0; i < strLen; i++) {\n            char ch = str.charAt(i);\n            if (searchChars.indexOf(ch) < 0) {\n                    return i;\n            }\n        }\n        return INDEX_NOT_FOUND;\n    }", "javadoc_start_line": 1547, "annotations_start_line": 1569, "method_start_line": 1569, "end_line": 1581}, "steps": [], "generation_failure": {"error": "Failed to generate stacktrace", "error_message": "[Errno 2] No such file or directory: './projects/Lang/30/results/stacktrace-testIndexOfAny_StringCharArrayWithSupplementaryChars-indexOfAnyBut.csv'"}}, {"failing_test": {"className": " org.apache.commons.lang3.StringUtilsEqualsIndexOfTest", "methodName": "testIndexOfAny_StringCharArrayWithSupplementaryChars", "error": "junit.framework.AssertionFailedError", "message": "expected:<2> but was:<0>"}, "patched_method": {"file_path": "/src/main/java/org/apache/commons/lang3/StringUtils.java", "method_name": "indexOfAnyBut", "content": "    /**\n     * <p>Searches a CharSequence to find the first index of any\n     * character not in the given set of characters.</p>\n     *\n     * <p>A <code>null</code> CharSequence will return <code>-1</code>.\n     * A <code>null</code> or zero length search array will return <code>-1</code>.</p>\n     *\n     * <pre>\n     * StringUtils.indexOfAnyBut(null, *)           = -1\n     * StringUtils.indexOfAnyBut(\"\", *)             = -1\n     * StringUtils.indexOfAnyBut(*, null)           = -1\n     * StringUtils.indexOfAnyBut(*, [])             = -1\n     * StringUtils.indexOfAnyBut(\"zzabyycdxx\",'za') = 3\n     * StringUtils.indexOfAnyBut(\"zzabyycdxx\", '')  = 0\n     * StringUtils.indexOfAnyBut(\"aba\", 'ab')       = -1\n     * </pre>\n     *\n     * @param cs  the CharSequence to check, may be null\n     * @param searchChars  the chars to search for, may be null\n     * @return the index of any of the chars, -1 if no match or null input\n     * @since 2.0\n     */\n    public static int indexOfAnyBut(CharSequence cs, char[] searchChars) {\n        if (isEmpty(cs) || ArrayUtils.isEmpty(searchChars)) {\n            return INDEX_NOT_FOUND;\n        }\n        int csLen = cs.length();\n        int searchLen = searchChars.length;\n        outer:\n        for (int i = 0; i < csLen; i++) {\n            char ch = cs.charAt(i);\n            for (int j = 0; j < searchLen; j++) {\n                if (searchChars[j] == ch) {\n                        continue outer;\n                }\n            }\n            return i;\n        }\n        return INDEX_NOT_FOUND;\n    }", "javadoc_start_line": 1506, "annotations_start_line": 1528, "method_start_line": 1528, "end_line": 1545}, "steps": [], "generation_failure": {"error": "Failed to generate stacktrace", "error_message": "[Errno 2] No such file or directory: './projects/Lang/30/results/stacktrace-testIndexOfAny_StringCharArrayWithSupplementaryChars-indexOfAnyBut.csv'"}}, {"failing_test": {"className": " org.apache.commons.lang3.StringUtilsEqualsIndexOfTest", "methodName": "testIndexOfAny_StringCharArrayWithSupplementaryChars", "error": "junit.framework.AssertionFailedError", "message": "expected:<2> but was:<0>"}, "patched_method": {"file_path": "/src/main/java/org/apache/commons/lang3/StringUtils.java", "method_name": "containsAny", "content": "    /**\n     * <p>\n     * Checks if the CharSequence contains any character in the given set of characters.\n     * </p>\n     * \n     * <p>\n     * A <code>null</code> CharSequence will return <code>false</code>. A <code>null</code> search CharSequence will return\n     * <code>false</code>.\n     * </p>\n     * \n     * <pre>\n     * StringUtils.containsAny(null, *)            = false\n     * StringUtils.containsAny(\"\", *)              = false\n     * StringUtils.containsAny(*, null)            = false\n     * StringUtils.containsAny(*, \"\")              = false\n     * StringUtils.containsAny(\"zzabyycdxx\", \"za\") = true\n     * StringUtils.containsAny(\"zzabyycdxx\", \"by\") = true\n     * StringUtils.containsAny(\"aba\",\"z\")          = false\n     * </pre>\n     * \n     * @param cs\n     *            the CharSequence to check, may be null\n     * @param searchChars\n     *            the chars to search for, may be null\n     * @return the <code>true</code> if any of the chars are found, <code>false</code> if no match or null input\n     * @since 2.4\n     */\n    public static boolean containsAny(CharSequence cs, String searchChars) {\n        if (searchChars == null) {\n            return false;\n        }\n        return containsAny(cs, searchChars.toCharArray());\n    }", "javadoc_start_line": 1470, "annotations_start_line": 1497, "method_start_line": 1497, "end_line": 1502}, "steps": [], "generation_failure": {"error": "Failed to generate stacktrace", "error_message": "[Errno 2] No such file or directory: './projects/Lang/30/results/stacktrace-testIndexOfAny_StringCharArrayWithSupplementaryChars-containsAny.csv'"}}, {"failing_test": {"className": " org.apache.commons.lang3.StringUtilsEqualsIndexOfTest", "methodName": "testIndexOfAny_StringCharArrayWithSupplementaryChars", "error": "junit.framework.AssertionFailedError", "message": "expected:<2> but was:<0>"}, "patched_method": {"file_path": "/src/main/java/org/apache/commons/lang3/StringUtils.java", "method_name": "containsAny", "content": "    /**\n     * <p>Checks if the CharSequence contains any character in the given\n     * set of characters.</p>\n     *\n     * <p>A <code>null</code> CharSequence will return <code>false</code>.\n     * A <code>null</code> or zero length search array will return <code>false</code>.</p>\n     *\n     * <pre>\n     * StringUtils.containsAny(null, *)                = false\n     * StringUtils.containsAny(\"\", *)                  = false\n     * StringUtils.containsAny(*, null)                = false\n     * StringUtils.containsAny(*, [])                  = false\n     * StringUtils.containsAny(\"zzabyycdxx\",['z','a']) = true\n     * StringUtils.containsAny(\"zzabyycdxx\",['b','y']) = true\n     * StringUtils.containsAny(\"aba\", ['z'])           = false\n     * </pre>\n     *\n     * @param cs  the CharSequence to check, may be null\n     * @param searchChars  the chars to search for, may be null\n     * @return the <code>true</code> if any of the chars are found,\n     * <code>false</code> if no match or null input\n     * @since 2.4\n     */\n    public static boolean containsAny(CharSequence cs, char[] searchChars) {\n        if (isEmpty(cs) || ArrayUtils.isEmpty(searchChars)) {\n            return false;\n        }\n        int csLength = cs.length();\n        int searchLength = searchChars.length;\n        int csLast = csLength - 1;\n        int searchLast = searchLength - 1;\n        for (int i = 0; i < csLength; i++) {\n            char ch = cs.charAt(i);\n            for (int j = 0; j < searchLength; j++) {\n                if (searchChars[j] == ch) {\n                    if (i < csLast && j < searchLast && ch >= Character.MIN_HIGH_SURROGATE && ch <= Character.MAX_HIGH_SURROGATE) {\n                            // missing low surrogate, fine, like String.indexOf(String)\n                        if (searchChars[j + 1] == cs.charAt(i + 1)) {\n                            return true;\n                        }\n                    } else {\n                        // ch is in the Basic Multilingual Plane\n                        return true;\n                    }\n                }\n            }\n        }\n        return false;\n    }", "javadoc_start_line": 1420, "annotations_start_line": 1443, "method_start_line": 1443, "end_line": 1468}, "steps": [], "generation_failure": {"error": "Failed to generate stacktrace", "error_message": "[Errno 2] No such file or directory: './projects/Lang/30/results/stacktrace-testIndexOfAny_StringCharArrayWithSupplementaryChars-containsAny.csv'"}}, {"failing_test": {"className": " org.apache.commons.lang3.StringUtilsEqualsIndexOfTest", "methodName": "testIndexOfAny_StringCharArrayWithSupplementaryChars", "error": "junit.framework.AssertionFailedError", "message": "expected:<2> but was:<0>"}, "patched_method": {"file_path": "/src/main/java/org/apache/commons/lang3/StringUtils.java", "method_name": "indexOfAny", "content": "    /**\n     * <p>Search a CharSequence to find the first index of any\n     * character in the given set of characters.</p>\n     *\n     * <p>A <code>null</code> String will return <code>-1</code>.\n     * A <code>null</code> or zero length search array will return <code>-1</code>.</p>\n     *\n     * <pre>\n     * StringUtils.indexOfAny(null, *)                = -1\n     * StringUtils.indexOfAny(\"\", *)                  = -1\n     * StringUtils.indexOfAny(*, null)                = -1\n     * StringUtils.indexOfAny(*, [])                  = -1\n     * StringUtils.indexOfAny(\"zzabyycdxx\",['z','a']) = 0\n     * StringUtils.indexOfAny(\"zzabyycdxx\",['b','y']) = 3\n     * StringUtils.indexOfAny(\"aba\", ['z'])           = -1\n     * </pre>\n     *\n     * @param cs  the CharSequence to check, may be null\n     * @param searchChars  the chars to search for, may be null\n     * @return the index of any of the chars, -1 if no match or null input\n     * @since 2.0\n     */\n    public static int indexOfAny(CharSequence cs, char[] searchChars) {\n        if (isEmpty(cs) || ArrayUtils.isEmpty(searchChars)) {\n            return INDEX_NOT_FOUND;\n        }\n        int csLen = cs.length();\n        int searchLen = searchChars.length;\n        for (int i = 0; i < csLen; i++) {\n            char ch = cs.charAt(i);\n            for (int j = 0; j < searchLen; j++) {\n                if (searchChars[j] == ch) {\n                        // ch is a supplementary character\n                        return i;\n                }\n            }\n        }\n        return INDEX_NOT_FOUND;\n    }", "javadoc_start_line": 1349, "annotations_start_line": 1371, "method_start_line": 1371, "end_line": 1387}, "steps": [{"file_path": "/src/test/java/org/apache/commons/lang3/StringUtilsEqualsIndexOfTest.java", "method_name": "testIndexOfAny_StringCharArrayWithSupplementaryChars", "content": "    /**\n     * See http://java.sun.com/developer/technicalArticles/Intl/Supplementary/\n     */\n    public void testIndexOfAny_StringCharArrayWithSupplementaryChars() {\n        assertEquals(0, StringUtils.indexOfAny(CharU20000 + CharU20001, CharU20000.toCharArray()));\n        assertEquals(2, StringUtils.indexOfAny(CharU20000 + CharU20001, CharU20001.toCharArray()));\n        assertEquals(0, StringUtils.indexOfAny(CharU20000, CharU20000.toCharArray()));\n        assertEquals(-1, StringUtils.indexOfAny(CharU20000, CharU20001.toCharArray()));    \n    }", "javadoc_start_line": 523, "annotations_start_line": 526, "method_start_line": 526, "end_line": 531}, {"file_path": "/src/main/java/org/apache/commons/lang3/StringUtils.java", "method_name": "indexOfAny", "content": "    /**\n     * <p>Search a CharSequence to find the first index of any\n     * character in the given set of characters.</p>\n     *\n     * <p>A <code>null</code> String will return <code>-1</code>.\n     * A <code>null</code> or zero length search array will return <code>-1</code>.</p>\n     *\n     * <pre>\n     * StringUtils.indexOfAny(null, *)                = -1\n     * StringUtils.indexOfAny(\"\", *)                  = -1\n     * StringUtils.indexOfAny(*, null)                = -1\n     * StringUtils.indexOfAny(*, [])                  = -1\n     * StringUtils.indexOfAny(\"zzabyycdxx\",['z','a']) = 0\n     * StringUtils.indexOfAny(\"zzabyycdxx\",['b','y']) = 3\n     * StringUtils.indexOfAny(\"aba\", ['z'])           = -1\n     * </pre>\n     *\n     * @param cs  the CharSequence to check, may be null\n     * @param searchChars  the chars to search for, may be null\n     * @return the index of any of the chars, -1 if no match or null input\n     * @since 2.0\n     */\n    public static int indexOfAny(CharSequence cs, char[] searchChars) {\n        if (isEmpty(cs) || ArrayUtils.isEmpty(searchChars)) {\n            return INDEX_NOT_FOUND;\n        }\n        int csLen = cs.length();\n        int searchLen = searchChars.length;\n        for (int i = 0; i < csLen; i++) {\n            char ch = cs.charAt(i);\n            for (int j = 0; j < searchLen; j++) {\n                if (searchChars[j] == ch) {\n                        // ch is a supplementary character\n                        return i;\n                }\n            }\n        }\n        return INDEX_NOT_FOUND;\n    }", "javadoc_start_line": 1349, "annotations_start_line": 1371, "method_start_line": 1371, "end_line": 1387}]}, {"failing_test": {"className": " org.apache.commons.lang3.StringUtilsEqualsIndexOfTest", "methodName": "testIndexOfAnyBut_StringCharArrayWithSupplementaryChars", "error": "junit.framework.AssertionFailedError", "message": "expected:<2> but was:<3>"}, "patched_method": {"file_path": "/src/main/java/org/apache/commons/lang3/StringUtils.java", "method_name": "containsNone", "content": "    /**\n     * <p>Checks that the CharSequence does not contain certain characters.</p>\n     *\n     * <p>A <code>null</code> CharSequence will return <code>true</code>.\n     * A <code>null</code> invalid character array will return <code>true</code>.\n     * An empty CharSequence (length()=0) always returns true.</p>\n     *\n     * <pre>\n     * StringUtils.containsNone(null, *)       = true\n     * StringUtils.containsNone(*, null)       = true\n     * StringUtils.containsNone(\"\", *)         = true\n     * StringUtils.containsNone(\"ab\", '')      = true\n     * StringUtils.containsNone(\"abab\", 'xyz') = true\n     * StringUtils.containsNone(\"ab1\", 'xyz')  = true\n     * StringUtils.containsNone(\"abz\", 'xyz')  = false\n     * </pre>\n     *\n     * @param cs  the CharSequence to check, may be null\n     * @param searchChars  an array of invalid chars, may be null\n     * @return true if it contains none of the invalid chars, or is null\n     * @since 2.0\n     */\n    public static boolean containsNone(CharSequence cs, char[] searchChars) {\n        if (cs == null || searchChars == null) {\n            return true;\n        }\n        int csLen = cs.length();\n        int searchLen = searchChars.length;\n        for (int i = 0; i < csLen; i++) {\n            char ch = cs.charAt(i);\n            for (int j = 0; j < searchLen; j++) {\n                if (searchChars[j] == ch) {\n                            // missing low surrogate, fine, like String.indexOf(String)\n                        // ch is in the Basic Multilingual Plane\n                        return false;\n                }\n            }\n        }\n        return true;\n    }", "javadoc_start_line": 1651, "annotations_start_line": 1673, "method_start_line": 1673, "end_line": 1690}, "steps": [], "generation_failure": {"error": "Failed to generate stacktrace", "error_message": "[Errno 2] No such file or directory: './projects/Lang/30/results/stacktrace-testIndexOfAnyBut_StringCharArrayWithSupplementaryChars-containsNone.csv'"}}, {"failing_test": {"className": " org.apache.commons.lang3.StringUtilsEqualsIndexOfTest", "methodName": "testIndexOfAnyBut_StringCharArrayWithSupplementaryChars", "error": "junit.framework.AssertionFailedError", "message": "expected:<2> but was:<3>"}, "patched_method": {"file_path": "/src/main/java/org/apache/commons/lang3/StringUtils.java", "method_name": "indexOfAnyBut", "content": "    /**\n     * <p>Search a String to find the first index of any\n     * character not in the given set of characters.</p>\n     *\n     * <p>A <code>null</code> String will return <code>-1</code>.\n     * A <code>null</code> search string will return <code>-1</code>.</p>\n     *\n     * <pre>\n     * StringUtils.indexOfAnyBut(null, *)            = -1\n     * StringUtils.indexOfAnyBut(\"\", *)              = -1\n     * StringUtils.indexOfAnyBut(*, null)            = -1\n     * StringUtils.indexOfAnyBut(*, \"\")              = -1\n     * StringUtils.indexOfAnyBut(\"zzabyycdxx\", \"za\") = 3\n     * StringUtils.indexOfAnyBut(\"zzabyycdxx\", \"\")   = 0\n     * StringUtils.indexOfAnyBut(\"aba\",\"ab\")         = -1\n     * </pre>\n     *\n     * @param str  the String to check, may be null\n     * @param searchChars  the chars to search for, may be null\n     * @return the index of any of the chars, -1 if no match or null input\n     * @since 2.0\n     */\n    public static int indexOfAnyBut(String str, String searchChars) {\n        if (isEmpty(str) || isEmpty(searchChars)) {\n            return INDEX_NOT_FOUND;\n        }\n        int strLen = str.length();\n        for (int i = 0; i < strLen; i++) {\n            char ch = str.charAt(i);\n            if (searchChars.indexOf(ch) < 0) {\n                    return i;\n            }\n        }\n        return INDEX_NOT_FOUND;\n    }", "javadoc_start_line": 1547, "annotations_start_line": 1569, "method_start_line": 1569, "end_line": 1581}, "steps": [], "generation_failure": {"error": "Failed to generate stacktrace", "error_message": "[Errno 2] No such file or directory: './projects/Lang/30/results/stacktrace-testIndexOfAnyBut_StringCharArrayWithSupplementaryChars-indexOfAnyBut.csv'"}}, {"failing_test": {"className": " org.apache.commons.lang3.StringUtilsEqualsIndexOfTest", "methodName": "testIndexOfAnyBut_StringCharArrayWithSupplementaryChars", "error": "junit.framework.AssertionFailedError", "message": "expected:<2> but was:<3>"}, "patched_method": {"file_path": "/src/main/java/org/apache/commons/lang3/StringUtils.java", "method_name": "indexOfAnyBut", "content": "    /**\n     * <p>Searches a CharSequence to find the first index of any\n     * character not in the given set of characters.</p>\n     *\n     * <p>A <code>null</code> CharSequence will return <code>-1</code>.\n     * A <code>null</code> or zero length search array will return <code>-1</code>.</p>\n     *\n     * <pre>\n     * StringUtils.indexOfAnyBut(null, *)           = -1\n     * StringUtils.indexOfAnyBut(\"\", *)             = -1\n     * StringUtils.indexOfAnyBut(*, null)           = -1\n     * StringUtils.indexOfAnyBut(*, [])             = -1\n     * StringUtils.indexOfAnyBut(\"zzabyycdxx\",'za') = 3\n     * StringUtils.indexOfAnyBut(\"zzabyycdxx\", '')  = 0\n     * StringUtils.indexOfAnyBut(\"aba\", 'ab')       = -1\n     * </pre>\n     *\n     * @param cs  the CharSequence to check, may be null\n     * @param searchChars  the chars to search for, may be null\n     * @return the index of any of the chars, -1 if no match or null input\n     * @since 2.0\n     */\n    public static int indexOfAnyBut(CharSequence cs, char[] searchChars) {\n        if (isEmpty(cs) || ArrayUtils.isEmpty(searchChars)) {\n            return INDEX_NOT_FOUND;\n        }\n        int csLen = cs.length();\n        int searchLen = searchChars.length;\n        outer:\n        for (int i = 0; i < csLen; i++) {\n            char ch = cs.charAt(i);\n            for (int j = 0; j < searchLen; j++) {\n                if (searchChars[j] == ch) {\n                        continue outer;\n                }\n            }\n            return i;\n        }\n        return INDEX_NOT_FOUND;\n    }", "javadoc_start_line": 1506, "annotations_start_line": 1528, "method_start_line": 1528, "end_line": 1545}, "steps": [{"file_path": "/src/test/java/org/apache/commons/lang3/StringUtilsEqualsIndexOfTest.java", "method_name": "testIndexOfAnyBut_StringCharArrayWithSupplementaryChars", "content": "    public void testIndexOfAnyBut_StringCharArrayWithSupplementaryChars() {\n        assertEquals(2, StringUtils.indexOfAnyBut(CharU20000 + CharU20001, CharU20000.toCharArray()));\n        assertEquals(0, StringUtils.indexOfAnyBut(CharU20000 + CharU20001, CharU20001.toCharArray()));\n        assertEquals(-1, StringUtils.indexOfAnyBut(CharU20000, CharU20000.toCharArray()));\n        assertEquals(0, StringUtils.indexOfAnyBut(CharU20000, CharU20001.toCharArray()));        \n    }", "javadoc_start_line": 592, "annotations_start_line": 592, "method_start_line": 592, "end_line": 597}, {"file_path": "/src/main/java/org/apache/commons/lang3/StringUtils.java", "method_name": "indexOfAnyBut", "content": "    /**\n     * <p>Searches a CharSequence to find the first index of any\n     * character not in the given set of characters.</p>\n     *\n     * <p>A <code>null</code> CharSequence will return <code>-1</code>.\n     * A <code>null</code> or zero length search array will return <code>-1</code>.</p>\n     *\n     * <pre>\n     * StringUtils.indexOfAnyBut(null, *)           = -1\n     * StringUtils.indexOfAnyBut(\"\", *)             = -1\n     * StringUtils.indexOfAnyBut(*, null)           = -1\n     * StringUtils.indexOfAnyBut(*, [])             = -1\n     * StringUtils.indexOfAnyBut(\"zzabyycdxx\",'za') = 3\n     * StringUtils.indexOfAnyBut(\"zzabyycdxx\", '')  = 0\n     * StringUtils.indexOfAnyBut(\"aba\", 'ab')       = -1\n     * </pre>\n     *\n     * @param cs  the CharSequence to check, may be null\n     * @param searchChars  the chars to search for, may be null\n     * @return the index of any of the chars, -1 if no match or null input\n     * @since 2.0\n     */\n    public static int indexOfAnyBut(CharSequence cs, char[] searchChars) {\n        if (isEmpty(cs) || ArrayUtils.isEmpty(searchChars)) {\n            return INDEX_NOT_FOUND;\n        }\n        int csLen = cs.length();\n        int searchLen = searchChars.length;\n        outer:\n        for (int i = 0; i < csLen; i++) {\n            char ch = cs.charAt(i);\n            for (int j = 0; j < searchLen; j++) {\n                if (searchChars[j] == ch) {\n                        continue outer;\n                }\n            }\n            return i;\n        }\n        return INDEX_NOT_FOUND;\n    }", "javadoc_start_line": 1506, "annotations_start_line": 1528, "method_start_line": 1528, "end_line": 1545}]}, {"failing_test": {"className": " org.apache.commons.lang3.StringUtilsEqualsIndexOfTest", "methodName": "testIndexOfAnyBut_StringCharArrayWithSupplementaryChars", "error": "junit.framework.AssertionFailedError", "message": "expected:<2> but was:<3>"}, "patched_method": {"file_path": "/src/main/java/org/apache/commons/lang3/StringUtils.java", "method_name": "containsAny", "content": "    /**\n     * <p>\n     * Checks if the CharSequence contains any character in the given set of characters.\n     * </p>\n     * \n     * <p>\n     * A <code>null</code> CharSequence will return <code>false</code>. A <code>null</code> search CharSequence will return\n     * <code>false</code>.\n     * </p>\n     * \n     * <pre>\n     * StringUtils.containsAny(null, *)            = false\n     * StringUtils.containsAny(\"\", *)              = false\n     * StringUtils.containsAny(*, null)            = false\n     * StringUtils.containsAny(*, \"\")              = false\n     * StringUtils.containsAny(\"zzabyycdxx\", \"za\") = true\n     * StringUtils.containsAny(\"zzabyycdxx\", \"by\") = true\n     * StringUtils.containsAny(\"aba\",\"z\")          = false\n     * </pre>\n     * \n     * @param cs\n     *            the CharSequence to check, may be null\n     * @param searchChars\n     *            the chars to search for, may be null\n     * @return the <code>true</code> if any of the chars are found, <code>false</code> if no match or null input\n     * @since 2.4\n     */\n    public static boolean containsAny(CharSequence cs, String searchChars) {\n        if (searchChars == null) {\n            return false;\n        }\n        return containsAny(cs, searchChars.toCharArray());\n    }", "javadoc_start_line": 1470, "annotations_start_line": 1497, "method_start_line": 1497, "end_line": 1502}, "steps": [], "generation_failure": {"error": "Failed to generate stacktrace", "error_message": "[Errno 2] No such file or directory: './projects/Lang/30/results/stacktrace-testIndexOfAnyBut_StringCharArrayWithSupplementaryChars-containsAny.csv'"}}, {"failing_test": {"className": " org.apache.commons.lang3.StringUtilsEqualsIndexOfTest", "methodName": "testIndexOfAnyBut_StringCharArrayWithSupplementaryChars", "error": "junit.framework.AssertionFailedError", "message": "expected:<2> but was:<3>"}, "patched_method": {"file_path": "/src/main/java/org/apache/commons/lang3/StringUtils.java", "method_name": "containsAny", "content": "    /**\n     * <p>Checks if the CharSequence contains any character in the given\n     * set of characters.</p>\n     *\n     * <p>A <code>null</code> CharSequence will return <code>false</code>.\n     * A <code>null</code> or zero length search array will return <code>false</code>.</p>\n     *\n     * <pre>\n     * StringUtils.containsAny(null, *)                = false\n     * StringUtils.containsAny(\"\", *)                  = false\n     * StringUtils.containsAny(*, null)                = false\n     * StringUtils.containsAny(*, [])                  = false\n     * StringUtils.containsAny(\"zzabyycdxx\",['z','a']) = true\n     * StringUtils.containsAny(\"zzabyycdxx\",['b','y']) = true\n     * StringUtils.containsAny(\"aba\", ['z'])           = false\n     * </pre>\n     *\n     * @param cs  the CharSequence to check, may be null\n     * @param searchChars  the chars to search for, may be null\n     * @return the <code>true</code> if any of the chars are found,\n     * <code>false</code> if no match or null input\n     * @since 2.4\n     */\n    public static boolean containsAny(CharSequence cs, char[] searchChars) {\n        if (isEmpty(cs) || ArrayUtils.isEmpty(searchChars)) {\n            return false;\n        }\n        int csLength = cs.length();\n        int searchLength = searchChars.length;\n        int csLast = csLength - 1;\n        int searchLast = searchLength - 1;\n        for (int i = 0; i < csLength; i++) {\n            char ch = cs.charAt(i);\n            for (int j = 0; j < searchLength; j++) {\n                if (searchChars[j] == ch) {\n                    if (i < csLast && j < searchLast && ch >= Character.MIN_HIGH_SURROGATE && ch <= Character.MAX_HIGH_SURROGATE) {\n                            // missing low surrogate, fine, like String.indexOf(String)\n                        if (searchChars[j + 1] == cs.charAt(i + 1)) {\n                            return true;\n                        }\n                    } else {\n                        // ch is in the Basic Multilingual Plane\n                        return true;\n                    }\n                }\n            }\n        }\n        return false;\n    }", "javadoc_start_line": 1420, "annotations_start_line": 1443, "method_start_line": 1443, "end_line": 1468}, "steps": [], "generation_failure": {"error": "Failed to generate stacktrace", "error_message": "[Errno 2] No such file or directory: './projects/Lang/30/results/stacktrace-testIndexOfAnyBut_StringCharArrayWithSupplementaryChars-containsAny.csv'"}}, {"failing_test": {"className": " org.apache.commons.lang3.StringUtilsEqualsIndexOfTest", "methodName": "testIndexOfAnyBut_StringCharArrayWithSupplementaryChars", "error": "junit.framework.AssertionFailedError", "message": "expected:<2> but was:<3>"}, "patched_method": {"file_path": "/src/main/java/org/apache/commons/lang3/StringUtils.java", "method_name": "indexOfAny", "content": "    /**\n     * <p>Search a CharSequence to find the first index of any\n     * character in the given set of characters.</p>\n     *\n     * <p>A <code>null</code> String will return <code>-1</code>.\n     * A <code>null</code> or zero length search array will return <code>-1</code>.</p>\n     *\n     * <pre>\n     * StringUtils.indexOfAny(null, *)                = -1\n     * StringUtils.indexOfAny(\"\", *)                  = -1\n     * StringUtils.indexOfAny(*, null)                = -1\n     * StringUtils.indexOfAny(*, [])                  = -1\n     * StringUtils.indexOfAny(\"zzabyycdxx\",['z','a']) = 0\n     * StringUtils.indexOfAny(\"zzabyycdxx\",['b','y']) = 3\n     * StringUtils.indexOfAny(\"aba\", ['z'])           = -1\n     * </pre>\n     *\n     * @param cs  the CharSequence to check, may be null\n     * @param searchChars  the chars to search for, may be null\n     * @return the index of any of the chars, -1 if no match or null input\n     * @since 2.0\n     */\n    public static int indexOfAny(CharSequence cs, char[] searchChars) {\n        if (isEmpty(cs) || ArrayUtils.isEmpty(searchChars)) {\n            return INDEX_NOT_FOUND;\n        }\n        int csLen = cs.length();\n        int searchLen = searchChars.length;\n        for (int i = 0; i < csLen; i++) {\n            char ch = cs.charAt(i);\n            for (int j = 0; j < searchLen; j++) {\n                if (searchChars[j] == ch) {\n                        // ch is a supplementary character\n                        return i;\n                }\n            }\n        }\n        return INDEX_NOT_FOUND;\n    }", "javadoc_start_line": 1349, "annotations_start_line": 1371, "method_start_line": 1371, "end_line": 1387}, "steps": [], "generation_failure": {"error": "Failed to generate stacktrace", "error_message": "[Errno 2] No such file or directory: './projects/Lang/30/results/stacktrace-testIndexOfAnyBut_StringCharArrayWithSupplementaryChars-indexOfAny.csv'"}}, {"failing_test": {"className": " org.apache.commons.lang3.StringUtilsEqualsIndexOfTest", "methodName": "testContainsNone_StringWithBadSupplementaryChars", "error": "junit.framework.AssertionFailedError", "message": "expected:<true> but was:<false>"}, "patched_method": {"file_path": "/src/main/java/org/apache/commons/lang3/StringUtils.java", "method_name": "containsNone", "content": "    /**\n     * <p>Checks that the CharSequence does not contain certain characters.</p>\n     *\n     * <p>A <code>null</code> CharSequence will return <code>true</code>.\n     * A <code>null</code> invalid character array will return <code>true</code>.\n     * An empty CharSequence (length()=0) always returns true.</p>\n     *\n     * <pre>\n     * StringUtils.containsNone(null, *)       = true\n     * StringUtils.containsNone(*, null)       = true\n     * StringUtils.containsNone(\"\", *)         = true\n     * StringUtils.containsNone(\"ab\", '')      = true\n     * StringUtils.containsNone(\"abab\", 'xyz') = true\n     * StringUtils.containsNone(\"ab1\", 'xyz')  = true\n     * StringUtils.containsNone(\"abz\", 'xyz')  = false\n     * </pre>\n     *\n     * @param cs  the CharSequence to check, may be null\n     * @param searchChars  an array of invalid chars, may be null\n     * @return true if it contains none of the invalid chars, or is null\n     * @since 2.0\n     */\n    public static boolean containsNone(CharSequence cs, char[] searchChars) {\n        if (cs == null || searchChars == null) {\n            return true;\n        }\n        int csLen = cs.length();\n        int searchLen = searchChars.length;\n        for (int i = 0; i < csLen; i++) {\n            char ch = cs.charAt(i);\n            for (int j = 0; j < searchLen; j++) {\n                if (searchChars[j] == ch) {\n                            // missing low surrogate, fine, like String.indexOf(String)\n                        // ch is in the Basic Multilingual Plane\n                        return false;\n                }\n            }\n        }\n        return true;\n    }", "javadoc_start_line": 1651, "annotations_start_line": 1673, "method_start_line": 1673, "end_line": 1690}, "steps": [{"file_path": "/src/test/java/org/apache/commons/lang3/StringUtilsEqualsIndexOfTest.java", "method_name": "testContainsNone_StringWithBadSupplementaryChars", "content": "    /**\n     * See http://java.sun.com/developer/technicalArticles/Intl/Supplementary/\n     */\n    public void testContainsNone_StringWithBadSupplementaryChars() {\n        // Test edge case: 1/2 of a (broken) supplementary char\n        assertEquals(true, StringUtils.containsNone(CharUSuppCharHigh, CharU20001));\n        assertEquals(-1, CharUSuppCharLow.indexOf(CharU20001));\n        assertEquals(true, StringUtils.containsNone(CharUSuppCharLow, CharU20001));\n        assertEquals(-1, CharU20001.indexOf(CharUSuppCharHigh));\n        assertEquals(true, StringUtils.containsNone(CharU20001, CharUSuppCharHigh));\n        assertEquals(0, CharU20001.indexOf(CharUSuppCharLow));\n        assertEquals(false, StringUtils.containsNone(CharU20001, CharUSuppCharLow));        \n    }", "javadoc_start_line": 355, "annotations_start_line": 358, "method_start_line": 358, "end_line": 367}]}, {"failing_test": {"className": " org.apache.commons.lang3.StringUtilsEqualsIndexOfTest", "methodName": "testContainsNone_StringWithBadSupplementaryChars", "error": "junit.framework.AssertionFailedError", "message": "expected:<true> but was:<false>"}, "patched_method": {"file_path": "/src/main/java/org/apache/commons/lang3/StringUtils.java", "method_name": "indexOfAnyBut", "content": "    /**\n     * <p>Search a String to find the first index of any\n     * character not in the given set of characters.</p>\n     *\n     * <p>A <code>null</code> String will return <code>-1</code>.\n     * A <code>null</code> search string will return <code>-1</code>.</p>\n     *\n     * <pre>\n     * StringUtils.indexOfAnyBut(null, *)            = -1\n     * StringUtils.indexOfAnyBut(\"\", *)              = -1\n     * StringUtils.indexOfAnyBut(*, null)            = -1\n     * StringUtils.indexOfAnyBut(*, \"\")              = -1\n     * StringUtils.indexOfAnyBut(\"zzabyycdxx\", \"za\") = 3\n     * StringUtils.indexOfAnyBut(\"zzabyycdxx\", \"\")   = 0\n     * StringUtils.indexOfAnyBut(\"aba\",\"ab\")         = -1\n     * </pre>\n     *\n     * @param str  the String to check, may be null\n     * @param searchChars  the chars to search for, may be null\n     * @return the index of any of the chars, -1 if no match or null input\n     * @since 2.0\n     */\n    public static int indexOfAnyBut(String str, String searchChars) {\n        if (isEmpty(str) || isEmpty(searchChars)) {\n            return INDEX_NOT_FOUND;\n        }\n        int strLen = str.length();\n        for (int i = 0; i < strLen; i++) {\n            char ch = str.charAt(i);\n            if (searchChars.indexOf(ch) < 0) {\n                    return i;\n            }\n        }\n        return INDEX_NOT_FOUND;\n    }", "javadoc_start_line": 1547, "annotations_start_line": 1569, "method_start_line": 1569, "end_line": 1581}, "steps": [], "generation_failure": {"error": "Failed to generate stacktrace", "error_message": "[Errno 2] No such file or directory: './projects/Lang/30/results/stacktrace-testContainsNone_StringWithBadSupplementaryChars-indexOfAnyBut.csv'"}}, {"failing_test": {"className": " org.apache.commons.lang3.StringUtilsEqualsIndexOfTest", "methodName": "testContainsNone_StringWithBadSupplementaryChars", "error": "junit.framework.AssertionFailedError", "message": "expected:<true> but was:<false>"}, "patched_method": {"file_path": "/src/main/java/org/apache/commons/lang3/StringUtils.java", "method_name": "indexOfAnyBut", "content": "    /**\n     * <p>Searches a CharSequence to find the first index of any\n     * character not in the given set of characters.</p>\n     *\n     * <p>A <code>null</code> CharSequence will return <code>-1</code>.\n     * A <code>null</code> or zero length search array will return <code>-1</code>.</p>\n     *\n     * <pre>\n     * StringUtils.indexOfAnyBut(null, *)           = -1\n     * StringUtils.indexOfAnyBut(\"\", *)             = -1\n     * StringUtils.indexOfAnyBut(*, null)           = -1\n     * StringUtils.indexOfAnyBut(*, [])             = -1\n     * StringUtils.indexOfAnyBut(\"zzabyycdxx\",'za') = 3\n     * StringUtils.indexOfAnyBut(\"zzabyycdxx\", '')  = 0\n     * StringUtils.indexOfAnyBut(\"aba\", 'ab')       = -1\n     * </pre>\n     *\n     * @param cs  the CharSequence to check, may be null\n     * @param searchChars  the chars to search for, may be null\n     * @return the index of any of the chars, -1 if no match or null input\n     * @since 2.0\n     */\n    public static int indexOfAnyBut(CharSequence cs, char[] searchChars) {\n        if (isEmpty(cs) || ArrayUtils.isEmpty(searchChars)) {\n            return INDEX_NOT_FOUND;\n        }\n        int csLen = cs.length();\n        int searchLen = searchChars.length;\n        outer:\n        for (int i = 0; i < csLen; i++) {\n            char ch = cs.charAt(i);\n            for (int j = 0; j < searchLen; j++) {\n                if (searchChars[j] == ch) {\n                        continue outer;\n                }\n            }\n            return i;\n        }\n        return INDEX_NOT_FOUND;\n    }", "javadoc_start_line": 1506, "annotations_start_line": 1528, "method_start_line": 1528, "end_line": 1545}, "steps": [], "generation_failure": {"error": "Failed to generate stacktrace", "error_message": "[Errno 2] No such file or directory: './projects/Lang/30/results/stacktrace-testContainsNone_StringWithBadSupplementaryChars-indexOfAnyBut.csv'"}}, {"failing_test": {"className": " org.apache.commons.lang3.StringUtilsEqualsIndexOfTest", "methodName": "testContainsNone_StringWithBadSupplementaryChars", "error": "junit.framework.AssertionFailedError", "message": "expected:<true> but was:<false>"}, "patched_method": {"file_path": "/src/main/java/org/apache/commons/lang3/StringUtils.java", "method_name": "containsAny", "content": "    /**\n     * <p>\n     * Checks if the CharSequence contains any character in the given set of characters.\n     * </p>\n     * \n     * <p>\n     * A <code>null</code> CharSequence will return <code>false</code>. A <code>null</code> search CharSequence will return\n     * <code>false</code>.\n     * </p>\n     * \n     * <pre>\n     * StringUtils.containsAny(null, *)            = false\n     * StringUtils.containsAny(\"\", *)              = false\n     * StringUtils.containsAny(*, null)            = false\n     * StringUtils.containsAny(*, \"\")              = false\n     * StringUtils.containsAny(\"zzabyycdxx\", \"za\") = true\n     * StringUtils.containsAny(\"zzabyycdxx\", \"by\") = true\n     * StringUtils.containsAny(\"aba\",\"z\")          = false\n     * </pre>\n     * \n     * @param cs\n     *            the CharSequence to check, may be null\n     * @param searchChars\n     *            the chars to search for, may be null\n     * @return the <code>true</code> if any of the chars are found, <code>false</code> if no match or null input\n     * @since 2.4\n     */\n    public static boolean containsAny(CharSequence cs, String searchChars) {\n        if (searchChars == null) {\n            return false;\n        }\n        return containsAny(cs, searchChars.toCharArray());\n    }", "javadoc_start_line": 1470, "annotations_start_line": 1497, "method_start_line": 1497, "end_line": 1502}, "steps": [], "generation_failure": {"error": "Failed to generate stacktrace", "error_message": "[Errno 2] No such file or directory: './projects/Lang/30/results/stacktrace-testContainsNone_StringWithBadSupplementaryChars-containsAny.csv'"}}, {"failing_test": {"className": " org.apache.commons.lang3.StringUtilsEqualsIndexOfTest", "methodName": "testContainsNone_StringWithBadSupplementaryChars", "error": "junit.framework.AssertionFailedError", "message": "expected:<true> but was:<false>"}, "patched_method": {"file_path": "/src/main/java/org/apache/commons/lang3/StringUtils.java", "method_name": "containsAny", "content": "    /**\n     * <p>Checks if the CharSequence contains any character in the given\n     * set of characters.</p>\n     *\n     * <p>A <code>null</code> CharSequence will return <code>false</code>.\n     * A <code>null</code> or zero length search array will return <code>false</code>.</p>\n     *\n     * <pre>\n     * StringUtils.containsAny(null, *)                = false\n     * StringUtils.containsAny(\"\", *)                  = false\n     * StringUtils.containsAny(*, null)                = false\n     * StringUtils.containsAny(*, [])                  = false\n     * StringUtils.containsAny(\"zzabyycdxx\",['z','a']) = true\n     * StringUtils.containsAny(\"zzabyycdxx\",['b','y']) = true\n     * StringUtils.containsAny(\"aba\", ['z'])           = false\n     * </pre>\n     *\n     * @param cs  the CharSequence to check, may be null\n     * @param searchChars  the chars to search for, may be null\n     * @return the <code>true</code> if any of the chars are found,\n     * <code>false</code> if no match or null input\n     * @since 2.4\n     */\n    public static boolean containsAny(CharSequence cs, char[] searchChars) {\n        if (isEmpty(cs) || ArrayUtils.isEmpty(searchChars)) {\n            return false;\n        }\n        int csLength = cs.length();\n        int searchLength = searchChars.length;\n        int csLast = csLength - 1;\n        int searchLast = searchLength - 1;\n        for (int i = 0; i < csLength; i++) {\n            char ch = cs.charAt(i);\n            for (int j = 0; j < searchLength; j++) {\n                if (searchChars[j] == ch) {\n                    if (i < csLast && j < searchLast && ch >= Character.MIN_HIGH_SURROGATE && ch <= Character.MAX_HIGH_SURROGATE) {\n                            // missing low surrogate, fine, like String.indexOf(String)\n                        if (searchChars[j + 1] == cs.charAt(i + 1)) {\n                            return true;\n                        }\n                    } else {\n                        // ch is in the Basic Multilingual Plane\n                        return true;\n                    }\n                }\n            }\n        }\n        return false;\n    }", "javadoc_start_line": 1420, "annotations_start_line": 1443, "method_start_line": 1443, "end_line": 1468}, "steps": [], "generation_failure": {"error": "Failed to generate stacktrace", "error_message": "[Errno 2] No such file or directory: './projects/Lang/30/results/stacktrace-testContainsNone_StringWithBadSupplementaryChars-containsAny.csv'"}}, {"failing_test": {"className": " org.apache.commons.lang3.StringUtilsEqualsIndexOfTest", "methodName": "testContainsNone_StringWithBadSupplementaryChars", "error": "junit.framework.AssertionFailedError", "message": "expected:<true> but was:<false>"}, "patched_method": {"file_path": "/src/main/java/org/apache/commons/lang3/StringUtils.java", "method_name": "indexOfAny", "content": "    /**\n     * <p>Search a CharSequence to find the first index of any\n     * character in the given set of characters.</p>\n     *\n     * <p>A <code>null</code> String will return <code>-1</code>.\n     * A <code>null</code> or zero length search array will return <code>-1</code>.</p>\n     *\n     * <pre>\n     * StringUtils.indexOfAny(null, *)                = -1\n     * StringUtils.indexOfAny(\"\", *)                  = -1\n     * StringUtils.indexOfAny(*, null)                = -1\n     * StringUtils.indexOfAny(*, [])                  = -1\n     * StringUtils.indexOfAny(\"zzabyycdxx\",['z','a']) = 0\n     * StringUtils.indexOfAny(\"zzabyycdxx\",['b','y']) = 3\n     * StringUtils.indexOfAny(\"aba\", ['z'])           = -1\n     * </pre>\n     *\n     * @param cs  the CharSequence to check, may be null\n     * @param searchChars  the chars to search for, may be null\n     * @return the index of any of the chars, -1 if no match or null input\n     * @since 2.0\n     */\n    public static int indexOfAny(CharSequence cs, char[] searchChars) {\n        if (isEmpty(cs) || ArrayUtils.isEmpty(searchChars)) {\n            return INDEX_NOT_FOUND;\n        }\n        int csLen = cs.length();\n        int searchLen = searchChars.length;\n        for (int i = 0; i < csLen; i++) {\n            char ch = cs.charAt(i);\n            for (int j = 0; j < searchLen; j++) {\n                if (searchChars[j] == ch) {\n                        // ch is a supplementary character\n                        return i;\n                }\n            }\n        }\n        return INDEX_NOT_FOUND;\n    }", "javadoc_start_line": 1349, "annotations_start_line": 1371, "method_start_line": 1371, "end_line": 1387}, "steps": [], "generation_failure": {"error": "Failed to generate stacktrace", "error_message": "[Errno 2] No such file or directory: './projects/Lang/30/results/stacktrace-testContainsNone_StringWithBadSupplementaryChars-indexOfAny.csv'"}}, {"failing_test": {"className": " org.apache.commons.lang3.StringUtilsEqualsIndexOfTest", "methodName": "testIndexOfAny_StringStringWithSupplementaryChars", "error": "junit.framework.AssertionFailedError", "message": "expected:<2> but was:<0>"}, "patched_method": {"file_path": "/src/main/java/org/apache/commons/lang3/StringUtils.java", "method_name": "containsNone", "content": "    /**\n     * <p>Checks that the CharSequence does not contain certain characters.</p>\n     *\n     * <p>A <code>null</code> CharSequence will return <code>true</code>.\n     * A <code>null</code> invalid character array will return <code>true</code>.\n     * An empty CharSequence (length()=0) always returns true.</p>\n     *\n     * <pre>\n     * StringUtils.containsNone(null, *)       = true\n     * StringUtils.containsNone(*, null)       = true\n     * StringUtils.containsNone(\"\", *)         = true\n     * StringUtils.containsNone(\"ab\", '')      = true\n     * StringUtils.containsNone(\"abab\", 'xyz') = true\n     * StringUtils.containsNone(\"ab1\", 'xyz')  = true\n     * StringUtils.containsNone(\"abz\", 'xyz')  = false\n     * </pre>\n     *\n     * @param cs  the CharSequence to check, may be null\n     * @param searchChars  an array of invalid chars, may be null\n     * @return true if it contains none of the invalid chars, or is null\n     * @since 2.0\n     */\n    public static boolean containsNone(CharSequence cs, char[] searchChars) {\n        if (cs == null || searchChars == null) {\n            return true;\n        }\n        int csLen = cs.length();\n        int searchLen = searchChars.length;\n        for (int i = 0; i < csLen; i++) {\n            char ch = cs.charAt(i);\n            for (int j = 0; j < searchLen; j++) {\n                if (searchChars[j] == ch) {\n                            // missing low surrogate, fine, like String.indexOf(String)\n                        // ch is in the Basic Multilingual Plane\n                        return false;\n                }\n            }\n        }\n        return true;\n    }", "javadoc_start_line": 1651, "annotations_start_line": 1673, "method_start_line": 1673, "end_line": 1690}, "steps": [], "generation_failure": {"error": "Failed to generate stacktrace", "error_message": "[Errno 2] No such file or directory: './projects/Lang/30/results/stacktrace-testIndexOfAny_StringStringWithSupplementaryChars-containsNone.csv'"}}, {"failing_test": {"className": " org.apache.commons.lang3.StringUtilsEqualsIndexOfTest", "methodName": "testIndexOfAny_StringStringWithSupplementaryChars", "error": "junit.framework.AssertionFailedError", "message": "expected:<2> but was:<0>"}, "patched_method": {"file_path": "/src/main/java/org/apache/commons/lang3/StringUtils.java", "method_name": "indexOfAnyBut", "content": "    /**\n     * <p>Search a String to find the first index of any\n     * character not in the given set of characters.</p>\n     *\n     * <p>A <code>null</code> String will return <code>-1</code>.\n     * A <code>null</code> search string will return <code>-1</code>.</p>\n     *\n     * <pre>\n     * StringUtils.indexOfAnyBut(null, *)            = -1\n     * StringUtils.indexOfAnyBut(\"\", *)              = -1\n     * StringUtils.indexOfAnyBut(*, null)            = -1\n     * StringUtils.indexOfAnyBut(*, \"\")              = -1\n     * StringUtils.indexOfAnyBut(\"zzabyycdxx\", \"za\") = 3\n     * StringUtils.indexOfAnyBut(\"zzabyycdxx\", \"\")   = 0\n     * StringUtils.indexOfAnyBut(\"aba\",\"ab\")         = -1\n     * </pre>\n     *\n     * @param str  the String to check, may be null\n     * @param searchChars  the chars to search for, may be null\n     * @return the index of any of the chars, -1 if no match or null input\n     * @since 2.0\n     */\n    public static int indexOfAnyBut(String str, String searchChars) {\n        if (isEmpty(str) || isEmpty(searchChars)) {\n            return INDEX_NOT_FOUND;\n        }\n        int strLen = str.length();\n        for (int i = 0; i < strLen; i++) {\n            char ch = str.charAt(i);\n            if (searchChars.indexOf(ch) < 0) {\n                    return i;\n            }\n        }\n        return INDEX_NOT_FOUND;\n    }", "javadoc_start_line": 1547, "annotations_start_line": 1569, "method_start_line": 1569, "end_line": 1581}, "steps": [], "generation_failure": {"error": "Failed to generate stacktrace", "error_message": "[Errno 2] No such file or directory: './projects/Lang/30/results/stacktrace-testIndexOfAny_StringStringWithSupplementaryChars-indexOfAnyBut.csv'"}}, {"failing_test": {"className": " org.apache.commons.lang3.StringUtilsEqualsIndexOfTest", "methodName": "testIndexOfAny_StringStringWithSupplementaryChars", "error": "junit.framework.AssertionFailedError", "message": "expected:<2> but was:<0>"}, "patched_method": {"file_path": "/src/main/java/org/apache/commons/lang3/StringUtils.java", "method_name": "indexOfAnyBut", "content": "    /**\n     * <p>Searches a CharSequence to find the first index of any\n     * character not in the given set of characters.</p>\n     *\n     * <p>A <code>null</code> CharSequence will return <code>-1</code>.\n     * A <code>null</code> or zero length search array will return <code>-1</code>.</p>\n     *\n     * <pre>\n     * StringUtils.indexOfAnyBut(null, *)           = -1\n     * StringUtils.indexOfAnyBut(\"\", *)             = -1\n     * StringUtils.indexOfAnyBut(*, null)           = -1\n     * StringUtils.indexOfAnyBut(*, [])             = -1\n     * StringUtils.indexOfAnyBut(\"zzabyycdxx\",'za') = 3\n     * StringUtils.indexOfAnyBut(\"zzabyycdxx\", '')  = 0\n     * StringUtils.indexOfAnyBut(\"aba\", 'ab')       = -1\n     * </pre>\n     *\n     * @param cs  the CharSequence to check, may be null\n     * @param searchChars  the chars to search for, may be null\n     * @return the index of any of the chars, -1 if no match or null input\n     * @since 2.0\n     */\n    public static int indexOfAnyBut(CharSequence cs, char[] searchChars) {\n        if (isEmpty(cs) || ArrayUtils.isEmpty(searchChars)) {\n            return INDEX_NOT_FOUND;\n        }\n        int csLen = cs.length();\n        int searchLen = searchChars.length;\n        outer:\n        for (int i = 0; i < csLen; i++) {\n            char ch = cs.charAt(i);\n            for (int j = 0; j < searchLen; j++) {\n                if (searchChars[j] == ch) {\n                        continue outer;\n                }\n            }\n            return i;\n        }\n        return INDEX_NOT_FOUND;\n    }", "javadoc_start_line": 1506, "annotations_start_line": 1528, "method_start_line": 1528, "end_line": 1545}, "steps": [], "generation_failure": {"error": "Failed to generate stacktrace", "error_message": "[Errno 2] No such file or directory: './projects/Lang/30/results/stacktrace-testIndexOfAny_StringStringWithSupplementaryChars-indexOfAnyBut.csv'"}}, {"failing_test": {"className": " org.apache.commons.lang3.StringUtilsEqualsIndexOfTest", "methodName": "testIndexOfAny_StringStringWithSupplementaryChars", "error": "junit.framework.AssertionFailedError", "message": "expected:<2> but was:<0>"}, "patched_method": {"file_path": "/src/main/java/org/apache/commons/lang3/StringUtils.java", "method_name": "containsAny", "content": "    /**\n     * <p>\n     * Checks if the CharSequence contains any character in the given set of characters.\n     * </p>\n     * \n     * <p>\n     * A <code>null</code> CharSequence will return <code>false</code>. A <code>null</code> search CharSequence will return\n     * <code>false</code>.\n     * </p>\n     * \n     * <pre>\n     * StringUtils.containsAny(null, *)            = false\n     * StringUtils.containsAny(\"\", *)              = false\n     * StringUtils.containsAny(*, null)            = false\n     * StringUtils.containsAny(*, \"\")              = false\n     * StringUtils.containsAny(\"zzabyycdxx\", \"za\") = true\n     * StringUtils.containsAny(\"zzabyycdxx\", \"by\") = true\n     * StringUtils.containsAny(\"aba\",\"z\")          = false\n     * </pre>\n     * \n     * @param cs\n     *            the CharSequence to check, may be null\n     * @param searchChars\n     *            the chars to search for, may be null\n     * @return the <code>true</code> if any of the chars are found, <code>false</code> if no match or null input\n     * @since 2.4\n     */\n    public static boolean containsAny(CharSequence cs, String searchChars) {\n        if (searchChars == null) {\n            return false;\n        }\n        return containsAny(cs, searchChars.toCharArray());\n    }", "javadoc_start_line": 1470, "annotations_start_line": 1497, "method_start_line": 1497, "end_line": 1502}, "steps": [], "generation_failure": {"error": "Failed to generate stacktrace", "error_message": "[Errno 2] No such file or directory: './projects/Lang/30/results/stacktrace-testIndexOfAny_StringStringWithSupplementaryChars-containsAny.csv'"}}, {"failing_test": {"className": " org.apache.commons.lang3.StringUtilsEqualsIndexOfTest", "methodName": "testIndexOfAny_StringStringWithSupplementaryChars", "error": "junit.framework.AssertionFailedError", "message": "expected:<2> but was:<0>"}, "patched_method": {"file_path": "/src/main/java/org/apache/commons/lang3/StringUtils.java", "method_name": "containsAny", "content": "    /**\n     * <p>Checks if the CharSequence contains any character in the given\n     * set of characters.</p>\n     *\n     * <p>A <code>null</code> CharSequence will return <code>false</code>.\n     * A <code>null</code> or zero length search array will return <code>false</code>.</p>\n     *\n     * <pre>\n     * StringUtils.containsAny(null, *)                = false\n     * StringUtils.containsAny(\"\", *)                  = false\n     * StringUtils.containsAny(*, null)                = false\n     * StringUtils.containsAny(*, [])                  = false\n     * StringUtils.containsAny(\"zzabyycdxx\",['z','a']) = true\n     * StringUtils.containsAny(\"zzabyycdxx\",['b','y']) = true\n     * StringUtils.containsAny(\"aba\", ['z'])           = false\n     * </pre>\n     *\n     * @param cs  the CharSequence to check, may be null\n     * @param searchChars  the chars to search for, may be null\n     * @return the <code>true</code> if any of the chars are found,\n     * <code>false</code> if no match or null input\n     * @since 2.4\n     */\n    public static boolean containsAny(CharSequence cs, char[] searchChars) {\n        if (isEmpty(cs) || ArrayUtils.isEmpty(searchChars)) {\n            return false;\n        }\n        int csLength = cs.length();\n        int searchLength = searchChars.length;\n        int csLast = csLength - 1;\n        int searchLast = searchLength - 1;\n        for (int i = 0; i < csLength; i++) {\n            char ch = cs.charAt(i);\n            for (int j = 0; j < searchLength; j++) {\n                if (searchChars[j] == ch) {\n                    if (i < csLast && j < searchLast && ch >= Character.MIN_HIGH_SURROGATE && ch <= Character.MAX_HIGH_SURROGATE) {\n                            // missing low surrogate, fine, like String.indexOf(String)\n                        if (searchChars[j + 1] == cs.charAt(i + 1)) {\n                            return true;\n                        }\n                    } else {\n                        // ch is in the Basic Multilingual Plane\n                        return true;\n                    }\n                }\n            }\n        }\n        return false;\n    }", "javadoc_start_line": 1420, "annotations_start_line": 1443, "method_start_line": 1443, "end_line": 1468}, "steps": [], "generation_failure": {"error": "Failed to generate stacktrace", "error_message": "[Errno 2] No such file or directory: './projects/Lang/30/results/stacktrace-testIndexOfAny_StringStringWithSupplementaryChars-containsAny.csv'"}}, {"failing_test": {"className": " org.apache.commons.lang3.StringUtilsEqualsIndexOfTest", "methodName": "testIndexOfAny_StringStringWithSupplementaryChars", "error": "junit.framework.AssertionFailedError", "message": "expected:<2> but was:<0>"}, "patched_method": {"file_path": "/src/main/java/org/apache/commons/lang3/StringUtils.java", "method_name": "indexOfAny", "content": "    /**\n     * <p>Search a CharSequence to find the first index of any\n     * character in the given set of characters.</p>\n     *\n     * <p>A <code>null</code> String will return <code>-1</code>.\n     * A <code>null</code> or zero length search array will return <code>-1</code>.</p>\n     *\n     * <pre>\n     * StringUtils.indexOfAny(null, *)                = -1\n     * StringUtils.indexOfAny(\"\", *)                  = -1\n     * StringUtils.indexOfAny(*, null)                = -1\n     * StringUtils.indexOfAny(*, [])                  = -1\n     * StringUtils.indexOfAny(\"zzabyycdxx\",['z','a']) = 0\n     * StringUtils.indexOfAny(\"zzabyycdxx\",['b','y']) = 3\n     * StringUtils.indexOfAny(\"aba\", ['z'])           = -1\n     * </pre>\n     *\n     * @param cs  the CharSequence to check, may be null\n     * @param searchChars  the chars to search for, may be null\n     * @return the index of any of the chars, -1 if no match or null input\n     * @since 2.0\n     */\n    public static int indexOfAny(CharSequence cs, char[] searchChars) {\n        if (isEmpty(cs) || ArrayUtils.isEmpty(searchChars)) {\n            return INDEX_NOT_FOUND;\n        }\n        int csLen = cs.length();\n        int searchLen = searchChars.length;\n        for (int i = 0; i < csLen; i++) {\n            char ch = cs.charAt(i);\n            for (int j = 0; j < searchLen; j++) {\n                if (searchChars[j] == ch) {\n                        // ch is a supplementary character\n                        return i;\n                }\n            }\n        }\n        return INDEX_NOT_FOUND;\n    }", "javadoc_start_line": 1349, "annotations_start_line": 1371, "method_start_line": 1371, "end_line": 1387}, "steps": [{"file_path": "/src/test/java/org/apache/commons/lang3/StringUtilsEqualsIndexOfTest.java", "method_name": "testIndexOfAny_StringStringWithSupplementaryChars", "content": "    /**\n     * See http://java.sun.com/developer/technicalArticles/Intl/Supplementary/\n     */\n    public void testIndexOfAny_StringStringWithSupplementaryChars() {\n        assertEquals(0, StringUtils.indexOfAny(CharU20000 + CharU20001, CharU20000));\n        assertEquals(2, StringUtils.indexOfAny(CharU20000 + CharU20001, CharU20001));\n        assertEquals(0, StringUtils.indexOfAny(CharU20000, CharU20000));\n        assertEquals(-1, StringUtils.indexOfAny(CharU20000, CharU20001));    \n    }", "javadoc_start_line": 566, "annotations_start_line": 569, "method_start_line": 569, "end_line": 574}]}, {"failing_test": {"className": " org.apache.commons.lang3.StringUtilsEqualsIndexOfTest", "methodName": "testContainsNone_CharArrayWithBadSupplementaryChars", "error": "junit.framework.AssertionFailedError", "message": "expected:<true> but was:<false>"}, "patched_method": {"file_path": "/src/main/java/org/apache/commons/lang3/StringUtils.java", "method_name": "containsNone", "content": "    /**\n     * <p>Checks that the CharSequence does not contain certain characters.</p>\n     *\n     * <p>A <code>null</code> CharSequence will return <code>true</code>.\n     * A <code>null</code> invalid character array will return <code>true</code>.\n     * An empty CharSequence (length()=0) always returns true.</p>\n     *\n     * <pre>\n     * StringUtils.containsNone(null, *)       = true\n     * StringUtils.containsNone(*, null)       = true\n     * StringUtils.containsNone(\"\", *)         = true\n     * StringUtils.containsNone(\"ab\", '')      = true\n     * StringUtils.containsNone(\"abab\", 'xyz') = true\n     * StringUtils.containsNone(\"ab1\", 'xyz')  = true\n     * StringUtils.containsNone(\"abz\", 'xyz')  = false\n     * </pre>\n     *\n     * @param cs  the CharSequence to check, may be null\n     * @param searchChars  an array of invalid chars, may be null\n     * @return true if it contains none of the invalid chars, or is null\n     * @since 2.0\n     */\n    public static boolean containsNone(CharSequence cs, char[] searchChars) {\n        if (cs == null || searchChars == null) {\n            return true;\n        }\n        int csLen = cs.length();\n        int searchLen = searchChars.length;\n        for (int i = 0; i < csLen; i++) {\n            char ch = cs.charAt(i);\n            for (int j = 0; j < searchLen; j++) {\n                if (searchChars[j] == ch) {\n                            // missing low surrogate, fine, like String.indexOf(String)\n                        // ch is in the Basic Multilingual Plane\n                        return false;\n                }\n            }\n        }\n        return true;\n    }", "javadoc_start_line": 1651, "annotations_start_line": 1673, "method_start_line": 1673, "end_line": 1690}, "steps": [{"file_path": "/src/test/java/org/apache/commons/lang3/StringUtilsEqualsIndexOfTest.java", "method_name": "testContainsNone_CharArrayWithBadSupplementaryChars", "content": "    /**\n     * See http://java.sun.com/developer/technicalArticles/Intl/Supplementary/\n     */\n    public void testContainsNone_CharArrayWithBadSupplementaryChars() {\n        // Test edge case: 1/2 of a (broken) supplementary char\n        assertEquals(true, StringUtils.containsNone(CharUSuppCharHigh, CharU20001.toCharArray()));\n        assertEquals(-1, CharUSuppCharLow.indexOf(CharU20001));\n        assertEquals(true, StringUtils.containsNone(CharUSuppCharLow, CharU20001.toCharArray()));\n        assertEquals(-1, CharU20001.indexOf(CharUSuppCharHigh));\n        assertEquals(true, StringUtils.containsNone(CharU20001, CharUSuppCharHigh.toCharArray()));\n        assertEquals(0, CharU20001.indexOf(CharUSuppCharLow));\n        assertEquals(false, StringUtils.containsNone(CharU20001, CharUSuppCharLow.toCharArray()));\n    }", "javadoc_start_line": 301, "annotations_start_line": 304, "method_start_line": 304, "end_line": 313}, {"file_path": "/src/main/java/org/apache/commons/lang3/StringUtils.java", "method_name": "containsNone", "content": "    /**\n     * <p>Checks that the CharSequence does not contain certain characters.</p>\n     *\n     * <p>A <code>null</code> CharSequence will return <code>true</code>.\n     * A <code>null</code> invalid character array will return <code>true</code>.\n     * An empty CharSequence (length()=0) always returns true.</p>\n     *\n     * <pre>\n     * StringUtils.containsNone(null, *)       = true\n     * StringUtils.containsNone(*, null)       = true\n     * StringUtils.containsNone(\"\", *)         = true\n     * StringUtils.containsNone(\"ab\", '')      = true\n     * StringUtils.containsNone(\"abab\", 'xyz') = true\n     * StringUtils.containsNone(\"ab1\", 'xyz')  = true\n     * StringUtils.containsNone(\"abz\", 'xyz')  = false\n     * </pre>\n     *\n     * @param cs  the CharSequence to check, may be null\n     * @param searchChars  an array of invalid chars, may be null\n     * @return true if it contains none of the invalid chars, or is null\n     * @since 2.0\n     */\n    public static boolean containsNone(CharSequence cs, char[] searchChars) {\n        if (cs == null || searchChars == null) {\n            return true;\n        }\n        int csLen = cs.length();\n        int searchLen = searchChars.length;\n        for (int i = 0; i < csLen; i++) {\n            char ch = cs.charAt(i);\n            for (int j = 0; j < searchLen; j++) {\n                if (searchChars[j] == ch) {\n                            // missing low surrogate, fine, like String.indexOf(String)\n                        // ch is in the Basic Multilingual Plane\n                        return false;\n                }\n            }\n        }\n        return true;\n    }", "javadoc_start_line": 1651, "annotations_start_line": 1673, "method_start_line": 1673, "end_line": 1690}]}, {"failing_test": {"className": " org.apache.commons.lang3.StringUtilsEqualsIndexOfTest", "methodName": "testContainsNone_CharArrayWithBadSupplementaryChars", "error": "junit.framework.AssertionFailedError", "message": "expected:<true> but was:<false>"}, "patched_method": {"file_path": "/src/main/java/org/apache/commons/lang3/StringUtils.java", "method_name": "indexOfAnyBut", "content": "    /**\n     * <p>Search a String to find the first index of any\n     * character not in the given set of characters.</p>\n     *\n     * <p>A <code>null</code> String will return <code>-1</code>.\n     * A <code>null</code> search string will return <code>-1</code>.</p>\n     *\n     * <pre>\n     * StringUtils.indexOfAnyBut(null, *)            = -1\n     * StringUtils.indexOfAnyBut(\"\", *)              = -1\n     * StringUtils.indexOfAnyBut(*, null)            = -1\n     * StringUtils.indexOfAnyBut(*, \"\")              = -1\n     * StringUtils.indexOfAnyBut(\"zzabyycdxx\", \"za\") = 3\n     * StringUtils.indexOfAnyBut(\"zzabyycdxx\", \"\")   = 0\n     * StringUtils.indexOfAnyBut(\"aba\",\"ab\")         = -1\n     * </pre>\n     *\n     * @param str  the String to check, may be null\n     * @param searchChars  the chars to search for, may be null\n     * @return the index of any of the chars, -1 if no match or null input\n     * @since 2.0\n     */\n    public static int indexOfAnyBut(String str, String searchChars) {\n        if (isEmpty(str) || isEmpty(searchChars)) {\n            return INDEX_NOT_FOUND;\n        }\n        int strLen = str.length();\n        for (int i = 0; i < strLen; i++) {\n            char ch = str.charAt(i);\n            if (searchChars.indexOf(ch) < 0) {\n                    return i;\n            }\n        }\n        return INDEX_NOT_FOUND;\n    }", "javadoc_start_line": 1547, "annotations_start_line": 1569, "method_start_line": 1569, "end_line": 1581}, "steps": [], "generation_failure": {"error": "Failed to generate stacktrace", "error_message": "[Errno 2] No such file or directory: './projects/Lang/30/results/stacktrace-testContainsNone_CharArrayWithBadSupplementaryChars-indexOfAnyBut.csv'"}}, {"failing_test": {"className": " org.apache.commons.lang3.StringUtilsEqualsIndexOfTest", "methodName": "testContainsNone_CharArrayWithBadSupplementaryChars", "error": "junit.framework.AssertionFailedError", "message": "expected:<true> but was:<false>"}, "patched_method": {"file_path": "/src/main/java/org/apache/commons/lang3/StringUtils.java", "method_name": "indexOfAnyBut", "content": "    /**\n     * <p>Searches a CharSequence to find the first index of any\n     * character not in the given set of characters.</p>\n     *\n     * <p>A <code>null</code> CharSequence will return <code>-1</code>.\n     * A <code>null</code> or zero length search array will return <code>-1</code>.</p>\n     *\n     * <pre>\n     * StringUtils.indexOfAnyBut(null, *)           = -1\n     * StringUtils.indexOfAnyBut(\"\", *)             = -1\n     * StringUtils.indexOfAnyBut(*, null)           = -1\n     * StringUtils.indexOfAnyBut(*, [])             = -1\n     * StringUtils.indexOfAnyBut(\"zzabyycdxx\",'za') = 3\n     * StringUtils.indexOfAnyBut(\"zzabyycdxx\", '')  = 0\n     * StringUtils.indexOfAnyBut(\"aba\", 'ab')       = -1\n     * </pre>\n     *\n     * @param cs  the CharSequence to check, may be null\n     * @param searchChars  the chars to search for, may be null\n     * @return the index of any of the chars, -1 if no match or null input\n     * @since 2.0\n     */\n    public static int indexOfAnyBut(CharSequence cs, char[] searchChars) {\n        if (isEmpty(cs) || ArrayUtils.isEmpty(searchChars)) {\n            return INDEX_NOT_FOUND;\n        }\n        int csLen = cs.length();\n        int searchLen = searchChars.length;\n        outer:\n        for (int i = 0; i < csLen; i++) {\n            char ch = cs.charAt(i);\n            for (int j = 0; j < searchLen; j++) {\n                if (searchChars[j] == ch) {\n                        continue outer;\n                }\n            }\n            return i;\n        }\n        return INDEX_NOT_FOUND;\n    }", "javadoc_start_line": 1506, "annotations_start_line": 1528, "method_start_line": 1528, "end_line": 1545}, "steps": [], "generation_failure": {"error": "Failed to generate stacktrace", "error_message": "[Errno 2] No such file or directory: './projects/Lang/30/results/stacktrace-testContainsNone_CharArrayWithBadSupplementaryChars-indexOfAnyBut.csv'"}}, {"failing_test": {"className": " org.apache.commons.lang3.StringUtilsEqualsIndexOfTest", "methodName": "testContainsNone_CharArrayWithBadSupplementaryChars", "error": "junit.framework.AssertionFailedError", "message": "expected:<true> but was:<false>"}, "patched_method": {"file_path": "/src/main/java/org/apache/commons/lang3/StringUtils.java", "method_name": "containsAny", "content": "    /**\n     * <p>\n     * Checks if the CharSequence contains any character in the given set of characters.\n     * </p>\n     * \n     * <p>\n     * A <code>null</code> CharSequence will return <code>false</code>. A <code>null</code> search CharSequence will return\n     * <code>false</code>.\n     * </p>\n     * \n     * <pre>\n     * StringUtils.containsAny(null, *)            = false\n     * StringUtils.containsAny(\"\", *)              = false\n     * StringUtils.containsAny(*, null)            = false\n     * StringUtils.containsAny(*, \"\")              = false\n     * StringUtils.containsAny(\"zzabyycdxx\", \"za\") = true\n     * StringUtils.containsAny(\"zzabyycdxx\", \"by\") = true\n     * StringUtils.containsAny(\"aba\",\"z\")          = false\n     * </pre>\n     * \n     * @param cs\n     *            the CharSequence to check, may be null\n     * @param searchChars\n     *            the chars to search for, may be null\n     * @return the <code>true</code> if any of the chars are found, <code>false</code> if no match or null input\n     * @since 2.4\n     */\n    public static boolean containsAny(CharSequence cs, String searchChars) {\n        if (searchChars == null) {\n            return false;\n        }\n        return containsAny(cs, searchChars.toCharArray());\n    }", "javadoc_start_line": 1470, "annotations_start_line": 1497, "method_start_line": 1497, "end_line": 1502}, "steps": [], "generation_failure": {"error": "Failed to generate stacktrace", "error_message": "[Errno 2] No such file or directory: './projects/Lang/30/results/stacktrace-testContainsNone_CharArrayWithBadSupplementaryChars-containsAny.csv'"}}, {"failing_test": {"className": " org.apache.commons.lang3.StringUtilsEqualsIndexOfTest", "methodName": "testContainsNone_CharArrayWithBadSupplementaryChars", "error": "junit.framework.AssertionFailedError", "message": "expected:<true> but was:<false>"}, "patched_method": {"file_path": "/src/main/java/org/apache/commons/lang3/StringUtils.java", "method_name": "containsAny", "content": "    /**\n     * <p>Checks if the CharSequence contains any character in the given\n     * set of characters.</p>\n     *\n     * <p>A <code>null</code> CharSequence will return <code>false</code>.\n     * A <code>null</code> or zero length search array will return <code>false</code>.</p>\n     *\n     * <pre>\n     * StringUtils.containsAny(null, *)                = false\n     * StringUtils.containsAny(\"\", *)                  = false\n     * StringUtils.containsAny(*, null)                = false\n     * StringUtils.containsAny(*, [])                  = false\n     * StringUtils.containsAny(\"zzabyycdxx\",['z','a']) = true\n     * StringUtils.containsAny(\"zzabyycdxx\",['b','y']) = true\n     * StringUtils.containsAny(\"aba\", ['z'])           = false\n     * </pre>\n     *\n     * @param cs  the CharSequence to check, may be null\n     * @param searchChars  the chars to search for, may be null\n     * @return the <code>true</code> if any of the chars are found,\n     * <code>false</code> if no match or null input\n     * @since 2.4\n     */\n    public static boolean containsAny(CharSequence cs, char[] searchChars) {\n        if (isEmpty(cs) || ArrayUtils.isEmpty(searchChars)) {\n            return false;\n        }\n        int csLength = cs.length();\n        int searchLength = searchChars.length;\n        int csLast = csLength - 1;\n        int searchLast = searchLength - 1;\n        for (int i = 0; i < csLength; i++) {\n            char ch = cs.charAt(i);\n            for (int j = 0; j < searchLength; j++) {\n                if (searchChars[j] == ch) {\n                    if (i < csLast && j < searchLast && ch >= Character.MIN_HIGH_SURROGATE && ch <= Character.MAX_HIGH_SURROGATE) {\n                            // missing low surrogate, fine, like String.indexOf(String)\n                        if (searchChars[j + 1] == cs.charAt(i + 1)) {\n                            return true;\n                        }\n                    } else {\n                        // ch is in the Basic Multilingual Plane\n                        return true;\n                    }\n                }\n            }\n        }\n        return false;\n    }", "javadoc_start_line": 1420, "annotations_start_line": 1443, "method_start_line": 1443, "end_line": 1468}, "steps": [], "generation_failure": {"error": "Failed to generate stacktrace", "error_message": "[Errno 2] No such file or directory: './projects/Lang/30/results/stacktrace-testContainsNone_CharArrayWithBadSupplementaryChars-containsAny.csv'"}}, {"failing_test": {"className": " org.apache.commons.lang3.StringUtilsEqualsIndexOfTest", "methodName": "testContainsNone_CharArrayWithBadSupplementaryChars", "error": "junit.framework.AssertionFailedError", "message": "expected:<true> but was:<false>"}, "patched_method": {"file_path": "/src/main/java/org/apache/commons/lang3/StringUtils.java", "method_name": "indexOfAny", "content": "    /**\n     * <p>Search a CharSequence to find the first index of any\n     * character in the given set of characters.</p>\n     *\n     * <p>A <code>null</code> String will return <code>-1</code>.\n     * A <code>null</code> or zero length search array will return <code>-1</code>.</p>\n     *\n     * <pre>\n     * StringUtils.indexOfAny(null, *)                = -1\n     * StringUtils.indexOfAny(\"\", *)                  = -1\n     * StringUtils.indexOfAny(*, null)                = -1\n     * StringUtils.indexOfAny(*, [])                  = -1\n     * StringUtils.indexOfAny(\"zzabyycdxx\",['z','a']) = 0\n     * StringUtils.indexOfAny(\"zzabyycdxx\",['b','y']) = 3\n     * StringUtils.indexOfAny(\"aba\", ['z'])           = -1\n     * </pre>\n     *\n     * @param cs  the CharSequence to check, may be null\n     * @param searchChars  the chars to search for, may be null\n     * @return the index of any of the chars, -1 if no match or null input\n     * @since 2.0\n     */\n    public static int indexOfAny(CharSequence cs, char[] searchChars) {\n        if (isEmpty(cs) || ArrayUtils.isEmpty(searchChars)) {\n            return INDEX_NOT_FOUND;\n        }\n        int csLen = cs.length();\n        int searchLen = searchChars.length;\n        for (int i = 0; i < csLen; i++) {\n            char ch = cs.charAt(i);\n            for (int j = 0; j < searchLen; j++) {\n                if (searchChars[j] == ch) {\n                        // ch is a supplementary character\n                        return i;\n                }\n            }\n        }\n        return INDEX_NOT_FOUND;\n    }", "javadoc_start_line": 1349, "annotations_start_line": 1371, "method_start_line": 1371, "end_line": 1387}, "steps": [], "generation_failure": {"error": "Failed to generate stacktrace", "error_message": "[Errno 2] No such file or directory: './projects/Lang/30/results/stacktrace-testContainsNone_CharArrayWithBadSupplementaryChars-indexOfAny.csv'"}}], "project": {"name": "Lang", "version": 30}}