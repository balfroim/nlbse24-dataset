{"tours": [{"failing_test": {"className": " org.apache.commons.lang3.StringUtilsTest", "methodName": "testEscapeSurrogatePairs", "error": "java.lang.StringIndexOutOfBoundsException", "message": "String index out of range: 2"}, "patched_method": {"file_path": "/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java", "method_name": "translate", "content": "    /**\n     * Translate an input onto a Writer. This is intentionally final as its algorithm is \n     * tightly coupled with the abstract method of this class. \n     *\n     * @param input CharSequence that is being translated\n     * @param out Writer to translate the text to\n     * @throws IOException if and only if the Writer produces an IOException\n     */\n    public final void translate(CharSequence input, Writer out) throws IOException {\n        if (out == null) {\n            throw new IllegalArgumentException(\"The Writer must not be null\");\n        }\n        if (input == null) {\n            return;\n        }\n        int pos = 0;\n        int len = input.length();\n        while (pos < len) {\n            int consumed = translate(input, pos, out);\n            if (consumed == 0) {\n                char[] c = Character.toChars(Character.codePointAt(input, pos));\n                out.write(c);\n                pos+= c.length;\n                continue;\n            }\n//          // contract with translators is that they have to understand codepoints \n//          // and they just took care of a surrogate pair\n            for (int pt = 0; pt < consumed; pt++) {\n                pos += Character.charCount(Character.codePointAt(input, pos));\n            }\n        }\n    }", "javadoc_start_line": 67, "annotations_start_line": 75, "method_start_line": 75, "end_line": 98}, "steps": [{"file_path": "/src/test/java/org/apache/commons/lang3/StringUtilsTest.java", "method_name": "testEscapeSurrogatePairs", "content": "    public void testEscapeSurrogatePairs() throws Exception {\n        assertEquals(\"\\uD83D\\uDE30\", StringEscapeUtils.escapeCsv(\"\\uD83D\\uDE30\"));\n        // Examples from https://en.wikipedia.org/wiki/UTF-16\n        assertEquals(\"\\uD800\\uDC00\", StringEscapeUtils.escapeCsv(\"\\uD800\\uDC00\"));\n        assertEquals(\"\\uD834\\uDD1E\", StringEscapeUtils.escapeCsv(\"\\uD834\\uDD1E\"));\n        assertEquals(\"\\uDBFF\\uDFFD\", StringEscapeUtils.escapeCsv(\"\\uDBFF\\uDFFD\"));\n        \n    }", "javadoc_start_line": 2186, "annotations_start_line": 2185, "method_start_line": 2186, "end_line": 2193}, {"file_path": "/src/main/java/org/apache/commons/lang3/StringEscapeUtils.java", "method_name": "escapeCsv", "content": "    /**\n     * <p>Returns a {@code String} value for a CSV column enclosed in double quotes,\n     * if required.</p>\n     *\n     * <p>If the value contains a comma, newline or double quote, then the\n     *    String value is returned enclosed in double quotes.</p>\n     * </p>\n     *\n     * <p>Any double quote characters in the value are escaped with another double quote.</p>\n     *\n     * <p>If the value does not contain a comma, newline or double quote, then the\n     *    String value is returned unchanged.</p>\n     * </p>\n     *\n     * see <a href=\"http://en.wikipedia.org/wiki/Comma-separated_values\">Wikipedia</a> and\n     * <a href=\"http://tools.ietf.org/html/rfc4180\">RFC 4180</a>.\n     *\n     * @param input the input CSV column String, may be null\n     * @return the input String, enclosed in double quotes if the value contains a comma,\n     * newline or double quote, {@code null} if null string input\n     * @since 2.4\n     */\n    public static final String escapeCsv(String input) {\n        return ESCAPE_CSV.translate(input);\n    }", "javadoc_start_line": 533, "annotations_start_line": 555, "method_start_line": 555, "end_line": 557}, {"file_path": "/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java", "method_name": "translate", "content": "    /**\n     * Helper for non-Writer usage. \n     * @param input CharSequence to be translated\n     * @return String output of translation\n     */\n    public final String translate(CharSequence input) {\n        if (input == null) {\n            return null;\n        }\n        try {\n            StringWriter writer = new StringWriter(input.length() * 2);\n            translate(input, writer);\n            return writer.toString();\n        } catch (IOException ioe) {\n            // this should never ever happen while writing to a StringWriter\n            throw new RuntimeException(ioe);\n        }\n    }", "javadoc_start_line": 48, "annotations_start_line": 53, "method_start_line": 53, "end_line": 65}]}], "project": {"name": "Lang", "version": 6}}