{"tours": [{"failing_test": {"className": " com.google.javascript.jscomp.CommandLineRunnerTest", "methodName": "testGetMsgWiringNoWarnings", "error": "junit.framework.AssertionFailedError", "message": "Expected no warnings or errors"}, "patched_method": {"file_path": "/src/com/google/javascript/jscomp/CommandLineRunner.java", "method_name": "createOptions", "content": "  protected CompilerOptions createOptions() {\n    CompilerOptions options = new CompilerOptions();\n    if (flags.processJqueryPrimitives) {\n      options.setCodingConvention(new JqueryCodingConvention());\n    } else {\n      options.setCodingConvention(new ClosureCodingConvention());\n    }\n\n    options.setExtraAnnotationNames(flags.extraAnnotationName);\n\n    CompilationLevel level = flags.compilationLevel;\n    level.setOptionsForCompilationLevel(options);\n\n    if (flags.debug) {\n      level.setDebugOptionsForCompilationLevel(options);\n    }\n\n    if (flags.useTypesForOptimization) {\n      level.setTypeBasedOptimizationOptions(options);\n    }\n\n    if (flags.generateExports) {\n      options.setGenerateExports(flags.generateExports);\n    }\n\n    WarningLevel wLevel = flags.warningLevel;\n    wLevel.setOptionsForWarningLevel(options);\n    for (FormattingOption formattingOption : flags.formatting) {\n      formattingOption.applyToOptions(options);\n    }\n\n    options.closurePass = flags.processClosurePrimitives;\n\n    options.jqueryPass = CompilationLevel.ADVANCED_OPTIMIZATIONS == level &&\n        flags.processJqueryPrimitives;\n\n    options.angularPass = flags.angularPass;\n\n    if (!flags.translationsFile.isEmpty()) {\n      try {\n        options.messageBundle = new XtbMessageBundle(\n            new FileInputStream(flags.translationsFile),\n            flags.translationsProject);\n      } catch (IOException e) {\n        throw new RuntimeException(\"Reading XTB file\", e);\n      }\n    } else if (CompilationLevel.ADVANCED_OPTIMIZATIONS == level) {\n      // In SIMPLE or WHITESPACE mode, if the user hasn't specified a\n      // translations file, they might reasonably try to write their own\n      // implementation of goog.getMsg that makes the substitution at\n      // run-time.\n      //\n      // In ADVANCED mode, goog.getMsg is going to be renamed anyway,\n      // so we might as well inline it. But shut off the i18n warnings,\n      // because the user didn't really ask for i18n.\n      options.messageBundle = new EmptyMessageBundle();\n    }\n\n    return options;\n  }", "javadoc_start_line": 806, "annotations_start_line": 805, "method_start_line": 806, "end_line": 865}, "steps": [{"file_path": "/src/com/google/javascript/jscomp/AbstractCommandLineRunner.java", "method_name": "run", "content": "  /**\n   * Runs the Compiler and calls System.exit() with the exit status of the\n   * compiler.\n   */\n  public final void run() {\n    int result = 0;\n    int runs = 1;\n    try {\n      for (int i = 0; i < runs && result == 0; i++) {\n        result = doRun();\n      }\n    } catch (AbstractCommandLineRunner.FlagUsageException e) {\n      System.err.println(e.getMessage());\n      result = -1;\n    } catch (Throwable t) {\n      t.printStackTrace();\n      result = -2;\n    }\n\n    if (testMode) {\n      exitCodeReceiverForTesting.apply(result);\n    } else {\n      System.exit(result);\n    }\n  }", "javadoc_start_line": 363, "annotations_start_line": 367, "method_start_line": 367, "end_line": 387}, {"file_path": "/src/com/google/javascript/jscomp/AbstractCommandLineRunner.java", "method_name": "doRun", "content": "  /**\n   * Parses command-line arguments and runs the compiler.\n   *\n   * @return system exit status\n   */\n  protected int doRun() throws FlagUsageException, IOException {\n    Compiler.setLoggingLevel(Level.parse(config.loggingLevel));\n\n    List<SourceFile> externs = createExterns();\n\n    compiler = createCompiler();\n    B options = createOptions();\n\n    List<JSModule> modules = null;\n    Result result = null;\n\n    setRunOptions(options);\n\n    boolean writeOutputToFile = !config.jsOutputFile.isEmpty();\n    List<String> outputFileNames = Lists.newArrayList();\n    if (writeOutputToFile) {\n      outputFileNames.add(config.jsOutputFile);\n    }\n\n    List<String> jsFiles = config.js;\n    List<String> moduleSpecs = config.module;\n\n    boolean createCommonJsModules = false;\n    if (options.processCommonJSModules) {\n      if (moduleSpecs.size() == 1 && \"auto\".equals(moduleSpecs.get(0))) {\n        createCommonJsModules = true;\n        moduleSpecs.remove(0);\n      }\n    }\n    if (!moduleSpecs.isEmpty()) {\n      modules = createJsModules(moduleSpecs, jsFiles);\n      for (JSModule m : modules) {\n        outputFileNames.add(getModuleOutputFileName(m));\n      }\n\n      if (config.skipNormalOutputs) {\n        compiler.initModules(externs, modules, options);\n      } else {\n        result = compiler.compileModules(externs, modules, options);\n      }\n    } else {\n      List<SourceFile> inputs = createSourceInputs(jsFiles);\n      if (config.skipNormalOutputs) {\n        compiler.init(externs, inputs, options);\n      } else {\n        result = compiler.compile(externs, inputs, options);\n      }\n    }\n    if (createCommonJsModules) {\n      // For CommonJS modules construct modules from actual inputs.\n      modules = Lists.newArrayList(compiler.getDegenerateModuleGraph()\n          .getAllModules());\n      for (JSModule m : modules) {\n        outputFileNames.add(getModuleOutputFileName(m));\n      }\n    }\n\n    for (String outputFileName : outputFileNames) {\n      if (compiler.getSourceFileByName(outputFileName) != null) {\n        compiler.report(\n            JSError.make(OUTPUT_SAME_AS_INPUT_ERROR, outputFileName));\n        return 1;\n      }\n    }\n\n    return processResults(result, modules, options);\n  }", "javadoc_start_line": 728, "annotations_start_line": 733, "method_start_line": 733, "end_line": 799}, {"file_path": "/src/com/google/javascript/jscomp/CommandLineRunner.java", "method_name": "createOptions", "content": "  protected CompilerOptions createOptions() {\n    CompilerOptions options = new CompilerOptions();\n    if (flags.processJqueryPrimitives) {\n      options.setCodingConvention(new JqueryCodingConvention());\n    } else {\n      options.setCodingConvention(new ClosureCodingConvention());\n    }\n\n    options.setExtraAnnotationNames(flags.extraAnnotationName);\n\n    CompilationLevel level = flags.compilationLevel;\n    level.setOptionsForCompilationLevel(options);\n\n    if (flags.debug) {\n      level.setDebugOptionsForCompilationLevel(options);\n    }\n\n    if (flags.useTypesForOptimization) {\n      level.setTypeBasedOptimizationOptions(options);\n    }\n\n    if (flags.generateExports) {\n      options.setGenerateExports(flags.generateExports);\n    }\n\n    WarningLevel wLevel = flags.warningLevel;\n    wLevel.setOptionsForWarningLevel(options);\n    for (FormattingOption formattingOption : flags.formatting) {\n      formattingOption.applyToOptions(options);\n    }\n\n    options.closurePass = flags.processClosurePrimitives;\n\n    options.jqueryPass = CompilationLevel.ADVANCED_OPTIMIZATIONS == level &&\n        flags.processJqueryPrimitives;\n\n    options.angularPass = flags.angularPass;\n\n    if (!flags.translationsFile.isEmpty()) {\n      try {\n        options.messageBundle = new XtbMessageBundle(\n            new FileInputStream(flags.translationsFile),\n            flags.translationsProject);\n      } catch (IOException e) {\n        throw new RuntimeException(\"Reading XTB file\", e);\n      }\n    } else if (CompilationLevel.ADVANCED_OPTIMIZATIONS == level) {\n      // In SIMPLE or WHITESPACE mode, if the user hasn't specified a\n      // translations file, they might reasonably try to write their own\n      // implementation of goog.getMsg that makes the substitution at\n      // run-time.\n      //\n      // In ADVANCED mode, goog.getMsg is going to be renamed anyway,\n      // so we might as well inline it. But shut off the i18n warnings,\n      // because the user didn't really ask for i18n.\n      options.messageBundle = new EmptyMessageBundle();\n    }\n\n    return options;\n  }", "javadoc_start_line": 806, "annotations_start_line": 805, "method_start_line": 806, "end_line": 865}]}], "project": {"name": "Closure", "version": 107}}