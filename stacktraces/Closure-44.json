{"tours": [{"failing_test": {"className": " com.google.javascript.jscomp.CodePrinterTest", "methodName": "testIssue620", "error": "junit.framework.ComparisonFailure", "message": "expected:<alert(/ //[ ]/ /)> but was:<alert(/ //[]/ /)>"}, "patched_method": {"file_path": "/src/com/google/javascript/jscomp/CodeConsumer.java", "method_name": "add", "content": "  void add(String newcode) {\n    maybeEndStatement();\n\n    if (newcode.length() == 0) {\n      return;\n    }\n\n    char c = newcode.charAt(0);\n    if ((isWordChar(c) || c == '\\\\') &&\n        isWordChar(getLastChar())) {\n      // need space to separate. This is not pretty printing.\n      // For example: \"return foo;\"\n      append(\" \");\n      // Do not allow a forward slash to appear after a DIV.\n      // For example,\n      // REGEXP DIV REGEXP\n      // is valid and should print like\n      // / // / /\n    }\n\n    append(newcode);\n  }", "javadoc_start_line": 181, "annotations_start_line": 181, "method_start_line": 181, "end_line": 202}, "steps": [{"file_path": "/src/com/google/javascript/jscomp/CodePrinter.java", "method_name": "CodePrinter", "content": "class CodePrinter {", "javadoc_start_line": 35, "annotations_start_line": 35, "method_start_line": 35, "end_line": 35}, {"file_path": "/src/com/google/javascript/jscomp/CodePrinter.java", "method_name": "<clinit>", "content": "class CodePrinter {", "javadoc_start_line": 35, "annotations_start_line": 35, "method_start_line": 35, "end_line": 35}, {"file_path": "/src/com/google/javascript/jscomp/CodePrinter.java", "method_name": "toSource", "content": "  /**\n   * Converts a tree to js code\n   */\n  private static String toSource(Node root, Format outputFormat,\n                                 boolean lineBreak,  int lineLengthThreshold,\n                                 SourceMap sourceMap,\n                                 SourceMap.DetailLevel sourceMapDetailLevel,\n                                 Charset outputCharset,\n                                 boolean tagAsStrict) {\n    Preconditions.checkState(sourceMapDetailLevel != null);\n\n    boolean createSourceMap = (sourceMap != null);\n    MappedCodePrinter mcp =\n        outputFormat == Format.COMPACT\n        ? new CompactCodePrinter(\n            lineBreak, lineLengthThreshold,\n            createSourceMap, sourceMapDetailLevel)\n        : new PrettyCodePrinter(\n            lineLengthThreshold, createSourceMap, sourceMapDetailLevel);\n    CodeGenerator cg =\n        outputFormat == Format.TYPED\n        ? new TypedCodeGenerator(mcp, outputCharset)\n        : new CodeGenerator(mcp, outputCharset);\n\n    if (tagAsStrict) {\n      cg.tagAsStrict();\n    }\n\n    cg.add(root);\n    mcp.endFile();\n\n    String code = mcp.getCode();\n\n    if (createSourceMap) {\n      mcp.generateSourceMap(sourceMap);\n    }\n\n    return code;\n  }", "javadoc_start_line": 606, "annotations_start_line": 609, "method_start_line": 614, "end_line": 644}, {"file_path": "/src/com/google/javascript/jscomp/CodeGenerator.java", "method_name": "add", "content": "  void add(Node n) {\n    add(n, Context.OTHER);\n  }", "javadoc_start_line": 81, "annotations_start_line": 81, "method_start_line": 81, "end_line": 83}]}], "project": {"name": "Closure", "version": 44}}