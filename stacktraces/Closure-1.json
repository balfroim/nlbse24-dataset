{
    "tours": [
        {
            "failing_test": {
                "className": " com.google.javascript.jscomp.CommandLineRunnerTest",
                "methodName": "testSimpleModeLeavesUnusedParams",
                "error": "junit.framework.AssertionFailedError",
                "message": ""
            },
            "patched_method": {
                "file_path": "/src/com/google/javascript/jscomp/RemoveUnusedVars.java",
                "method_name": "removeUnreferencedFunctionArgs",
                "content": "  /**\n   * Removes unreferenced arguments from a function declaration and when\n   * possible the function's callSites.\n   *\n   * @param fnScope The scope inside the function\n   */\n  private void removeUnreferencedFunctionArgs(Scope fnScope) {\n    // Notice that removing unreferenced function args breaks\n    // Function.prototype.length. In advanced mode, we don't really care\n    // about this: we consider \"length\" the equivalent of reflecting on\n    // the function's lexical source.\n    //\n    // Rather than create a new option for this, we assume that if the user\n    // is removing globals, then it's OK to remove unused function args.\n    //\n    // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n\n    Node function = fnScope.getRootNode();\n\n    Preconditions.checkState(function.isFunction());\n    if (NodeUtil.isGetOrSetKey(function.getParent())) {\n      // The parameters object literal setters can not be removed.\n      return;\n    }\n\n    Node argList = getFunctionArgList(function);\n    boolean modifyCallers = modifyCallSites\n        && callSiteOptimizer.canModifyCallers(function);\n    if (!modifyCallers) {\n      // Strip unreferenced args off the end of the function declaration.\n      Node lastArg;\n      while ((lastArg = argList.getLastChild()) != null) {\n        Var var = fnScope.getVar(lastArg.getString());\n        if (!referenced.contains(var)) {\n          argList.removeChild(lastArg);\n          compiler.reportCodeChange();\n        } else {\n          break;\n        }\n      }\n    } else {\n      callSiteOptimizer.optimize(fnScope, referenced);\n    }\n  }",
                "javadoc_start_line": 363,
                "annotations_start_line": 369,
                "method_start_line": 369,
                "end_line": 406
            },
            "steps": [],
            "generation_failure": {
                "error": "Failed to generate stacktrace",
                "error_message": "[Errno 2] No such file or directory: './projects/Closure/1/results/stacktrace-testSimpleModeLeavesUnusedParams-removeUnreferencedFunctionArgs.csv'"
            }
        },
        {
            "failing_test": {
                "className": " com.google.javascript.jscomp.CommandLineRunnerTest",
                "methodName": "testForwardDeclareDroppedTypes",
                "error": "junit.framework.AssertionFailedError",
                "message": ""
            },
            "patched_method": {
                "file_path": "/src/com/google/javascript/jscomp/RemoveUnusedVars.java",
                "method_name": "removeUnreferencedFunctionArgs",
                "content": "  /**\n   * Removes unreferenced arguments from a function declaration and when\n   * possible the function's callSites.\n   *\n   * @param fnScope The scope inside the function\n   */\n  private void removeUnreferencedFunctionArgs(Scope fnScope) {\n    // Notice that removing unreferenced function args breaks\n    // Function.prototype.length. In advanced mode, we don't really care\n    // about this: we consider \"length\" the equivalent of reflecting on\n    // the function's lexical source.\n    //\n    // Rather than create a new option for this, we assume that if the user\n    // is removing globals, then it's OK to remove unused function args.\n    //\n    // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n\n    Node function = fnScope.getRootNode();\n\n    Preconditions.checkState(function.isFunction());\n    if (NodeUtil.isGetOrSetKey(function.getParent())) {\n      // The parameters object literal setters can not be removed.\n      return;\n    }\n\n    Node argList = getFunctionArgList(function);\n    boolean modifyCallers = modifyCallSites\n        && callSiteOptimizer.canModifyCallers(function);\n    if (!modifyCallers) {\n      // Strip unreferenced args off the end of the function declaration.\n      Node lastArg;\n      while ((lastArg = argList.getLastChild()) != null) {\n        Var var = fnScope.getVar(lastArg.getString());\n        if (!referenced.contains(var)) {\n          argList.removeChild(lastArg);\n          compiler.reportCodeChange();\n        } else {\n          break;\n        }\n      }\n    } else {\n      callSiteOptimizer.optimize(fnScope, referenced);\n    }\n  }",
                "javadoc_start_line": 363,
                "annotations_start_line": 369,
                "method_start_line": 369,
                "end_line": 406
            },
            "steps": [],
            "generation_failure": {
                "error": "Failed to generate stacktrace",
                "error_message": "[Errno 2] No such file or directory: './projects/Closure/1/results/stacktrace-testForwardDeclareDroppedTypes-removeUnreferencedFunctionArgs.csv'"
            }
        },
        {
            "failing_test": {
                "className": " com.google.javascript.jscomp.CommandLineRunnerTest",
                "methodName": "testDebugFlag1",
                "error": "junit.framework.AssertionFailedError",
                "message": ""
            },
            "patched_method": {
                "file_path": "/src/com/google/javascript/jscomp/RemoveUnusedVars.java",
                "method_name": "removeUnreferencedFunctionArgs",
                "content": "  /**\n   * Removes unreferenced arguments from a function declaration and when\n   * possible the function's callSites.\n   *\n   * @param fnScope The scope inside the function\n   */\n  private void removeUnreferencedFunctionArgs(Scope fnScope) {\n    // Notice that removing unreferenced function args breaks\n    // Function.prototype.length. In advanced mode, we don't really care\n    // about this: we consider \"length\" the equivalent of reflecting on\n    // the function's lexical source.\n    //\n    // Rather than create a new option for this, we assume that if the user\n    // is removing globals, then it's OK to remove unused function args.\n    //\n    // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n\n    Node function = fnScope.getRootNode();\n\n    Preconditions.checkState(function.isFunction());\n    if (NodeUtil.isGetOrSetKey(function.getParent())) {\n      // The parameters object literal setters can not be removed.\n      return;\n    }\n\n    Node argList = getFunctionArgList(function);\n    boolean modifyCallers = modifyCallSites\n        && callSiteOptimizer.canModifyCallers(function);\n    if (!modifyCallers) {\n      // Strip unreferenced args off the end of the function declaration.\n      Node lastArg;\n      while ((lastArg = argList.getLastChild()) != null) {\n        Var var = fnScope.getVar(lastArg.getString());\n        if (!referenced.contains(var)) {\n          argList.removeChild(lastArg);\n          compiler.reportCodeChange();\n        } else {\n          break;\n        }\n      }\n    } else {\n      callSiteOptimizer.optimize(fnScope, referenced);\n    }\n  }",
                "javadoc_start_line": 363,
                "annotations_start_line": 369,
                "method_start_line": 369,
                "end_line": 406
            },
            "steps": [],
            "generation_failure": {
                "error": "Failed to generate stacktrace",
                "error_message": "[Errno 2] No such file or directory: './projects/Closure/1/results/stacktrace-testDebugFlag1-removeUnreferencedFunctionArgs.csv'"
            }
        },
        {
            "failing_test": {
                "className": " com.google.javascript.jscomp.IntegrationTest",
                "methodName": "testIssue787",
                "error": "junit.framework.AssertionFailedError",
                "message": ""
            },
            "patched_method": {
                "file_path": "/src/com/google/javascript/jscomp/RemoveUnusedVars.java",
                "method_name": "removeUnreferencedFunctionArgs",
                "content": "  /**\n   * Removes unreferenced arguments from a function declaration and when\n   * possible the function's callSites.\n   *\n   * @param fnScope The scope inside the function\n   */\n  private void removeUnreferencedFunctionArgs(Scope fnScope) {\n    // Notice that removing unreferenced function args breaks\n    // Function.prototype.length. In advanced mode, we don't really care\n    // about this: we consider \"length\" the equivalent of reflecting on\n    // the function's lexical source.\n    //\n    // Rather than create a new option for this, we assume that if the user\n    // is removing globals, then it's OK to remove unused function args.\n    //\n    // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n\n    Node function = fnScope.getRootNode();\n\n    Preconditions.checkState(function.isFunction());\n    if (NodeUtil.isGetOrSetKey(function.getParent())) {\n      // The parameters object literal setters can not be removed.\n      return;\n    }\n\n    Node argList = getFunctionArgList(function);\n    boolean modifyCallers = modifyCallSites\n        && callSiteOptimizer.canModifyCallers(function);\n    if (!modifyCallers) {\n      // Strip unreferenced args off the end of the function declaration.\n      Node lastArg;\n      while ((lastArg = argList.getLastChild()) != null) {\n        Var var = fnScope.getVar(lastArg.getString());\n        if (!referenced.contains(var)) {\n          argList.removeChild(lastArg);\n          compiler.reportCodeChange();\n        } else {\n          break;\n        }\n      }\n    } else {\n      callSiteOptimizer.optimize(fnScope, referenced);\n    }\n  }",
                "javadoc_start_line": 363,
                "annotations_start_line": 369,
                "method_start_line": 369,
                "end_line": 406
            },
            "steps": [],
            "generation_failure": {
                "error": "Failed to generate stacktrace",
                "error_message": "[Errno 2] No such file or directory: './projects/Closure/1/results/stacktrace-testIssue787-removeUnreferencedFunctionArgs.csv'"
            }
        },
        {
            "failing_test": {
                "className": " com.google.javascript.jscomp.RemoveUnusedVarsTest",
                "methodName": "testRemoveGlobal1",
                "error": "junit.framework.AssertionFailedError",
                "message": ""
            },
            "patched_method": {
                "file_path": "/src/com/google/javascript/jscomp/RemoveUnusedVars.java",
                "method_name": "removeUnreferencedFunctionArgs",
                "content": "  /**\n   * Removes unreferenced arguments from a function declaration and when\n   * possible the function's callSites.\n   *\n   * @param fnScope The scope inside the function\n   */\n  private void removeUnreferencedFunctionArgs(Scope fnScope) {\n    // Notice that removing unreferenced function args breaks\n    // Function.prototype.length. In advanced mode, we don't really care\n    // about this: we consider \"length\" the equivalent of reflecting on\n    // the function's lexical source.\n    //\n    // Rather than create a new option for this, we assume that if the user\n    // is removing globals, then it's OK to remove unused function args.\n    //\n    // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n\n    Node function = fnScope.getRootNode();\n\n    Preconditions.checkState(function.isFunction());\n    if (NodeUtil.isGetOrSetKey(function.getParent())) {\n      // The parameters object literal setters can not be removed.\n      return;\n    }\n\n    Node argList = getFunctionArgList(function);\n    boolean modifyCallers = modifyCallSites\n        && callSiteOptimizer.canModifyCallers(function);\n    if (!modifyCallers) {\n      // Strip unreferenced args off the end of the function declaration.\n      Node lastArg;\n      while ((lastArg = argList.getLastChild()) != null) {\n        Var var = fnScope.getVar(lastArg.getString());\n        if (!referenced.contains(var)) {\n          argList.removeChild(lastArg);\n          compiler.reportCodeChange();\n        } else {\n          break;\n        }\n      }\n    } else {\n      callSiteOptimizer.optimize(fnScope, referenced);\n    }\n  }",
                "javadoc_start_line": 363,
                "annotations_start_line": 369,
                "method_start_line": 369,
                "end_line": 406
            },
            "steps": [
                {
                    "file_path": "/src/com/google/javascript/jscomp/RemoveUnusedVars.java",
                    "method_name": "process",
                    "content": "  /**\n   * Traverses the root, removing all unused variables. Multiple traversals\n   * may occur to ensure all unused variables are removed.\n   */\n  @Override\n  public void process(Node externs, Node root) {\n    Preconditions.checkState(compiler.getLifeCycleStage().isNormalized());\n    SimpleDefinitionFinder defFinder = null;\n\n    if (modifyCallSites) {\n      // For testing, allow the SimpleDefinitionFinder to be build now.\n      defFinder = new SimpleDefinitionFinder(compiler);\n      defFinder.process(externs, root);\n    }\n    process(externs, root, defFinder);\n  }",
                    "javadoc_start_line": 135,
                    "annotations_start_line": 139,
                    "method_start_line": 140,
                    "end_line": 150
                },
                {
                    "file_path": "/src/com/google/javascript/jscomp/RemoveUnusedVars.java",
                    "method_name": "process",
                    "content": "  public void process(\n      Node externs, Node root, SimpleDefinitionFinder defFinder) {\n    if (modifyCallSites) {\n      Preconditions.checkNotNull(defFinder);\n      callSiteOptimizer = new CallSiteOptimizer(compiler, defFinder);\n    }\n    traverseAndRemoveUnusedReferences(root);\n    if (callSiteOptimizer != null) {\n      callSiteOptimizer.applyChanges();\n    }\n  }",
                    "javadoc_start_line": 153,
                    "annotations_start_line": 152,
                    "method_start_line": 154,
                    "end_line": 163
                },
                {
                    "file_path": "/src/com/google/javascript/jscomp/RemoveUnusedVars.java",
                    "method_name": "traverseAndRemoveUnusedReferences",
                    "content": "  /**\n   * Traverses a node recursively. Call this once per pass.\n   */\n  private void traverseAndRemoveUnusedReferences(Node root) {\n    Scope scope = new SyntacticScopeCreator(compiler).createScope(root, null);\n    traverseNode(root, null, scope);\n\n    if (removeGlobals) {\n      collectMaybeUnreferencedVars(scope);\n    }\n\n    interpretAssigns();\n    removeUnreferencedVars();\n    for (Scope fnScope : allFunctionScopes) {\n      removeUnreferencedFunctionArgs(fnScope);\n    }\n  }",
                    "javadoc_start_line": 165,
                    "annotations_start_line": 168,
                    "method_start_line": 168,
                    "end_line": 181
                },
                {
                    "file_path": "/src/com/google/javascript/jscomp/RemoveUnusedVars.java",
                    "method_name": "removeUnreferencedFunctionArgs",
                    "content": "  /**\n   * Removes unreferenced arguments from a function declaration and when\n   * possible the function's callSites.\n   *\n   * @param fnScope The scope inside the function\n   */\n  private void removeUnreferencedFunctionArgs(Scope fnScope) {\n    // Notice that removing unreferenced function args breaks\n    // Function.prototype.length. In advanced mode, we don't really care\n    // about this: we consider \"length\" the equivalent of reflecting on\n    // the function's lexical source.\n    //\n    // Rather than create a new option for this, we assume that if the user\n    // is removing globals, then it's OK to remove unused function args.\n    //\n    // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n\n    Node function = fnScope.getRootNode();\n\n    Preconditions.checkState(function.isFunction());\n    if (NodeUtil.isGetOrSetKey(function.getParent())) {\n      // The parameters object literal setters can not be removed.\n      return;\n    }\n\n    Node argList = getFunctionArgList(function);\n    boolean modifyCallers = modifyCallSites\n        && callSiteOptimizer.canModifyCallers(function);\n    if (!modifyCallers) {\n      // Strip unreferenced args off the end of the function declaration.\n      Node lastArg;\n      while ((lastArg = argList.getLastChild()) != null) {\n        Var var = fnScope.getVar(lastArg.getString());\n        if (!referenced.contains(var)) {\n          argList.removeChild(lastArg);\n          compiler.reportCodeChange();\n        } else {\n          break;\n        }\n      }\n    } else {\n      callSiteOptimizer.optimize(fnScope, referenced);\n    }\n  }",
                    "javadoc_start_line": 363,
                    "annotations_start_line": 369,
                    "method_start_line": 369,
                    "end_line": 406
                }
            ]
        },
        {
            "failing_test": {
                "className": " com.google.javascript.jscomp.RemoveUnusedVarsTest",
                "methodName": "testRemoveGlobal2",
                "error": "junit.framework.AssertionFailedError",
                "message": ""
            },
            "patched_method": {
                "file_path": "/src/com/google/javascript/jscomp/RemoveUnusedVars.java",
                "method_name": "removeUnreferencedFunctionArgs",
                "content": "  /**\n   * Removes unreferenced arguments from a function declaration and when\n   * possible the function's callSites.\n   *\n   * @param fnScope The scope inside the function\n   */\n  private void removeUnreferencedFunctionArgs(Scope fnScope) {\n    // Notice that removing unreferenced function args breaks\n    // Function.prototype.length. In advanced mode, we don't really care\n    // about this: we consider \"length\" the equivalent of reflecting on\n    // the function's lexical source.\n    //\n    // Rather than create a new option for this, we assume that if the user\n    // is removing globals, then it's OK to remove unused function args.\n    //\n    // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n\n    Node function = fnScope.getRootNode();\n\n    Preconditions.checkState(function.isFunction());\n    if (NodeUtil.isGetOrSetKey(function.getParent())) {\n      // The parameters object literal setters can not be removed.\n      return;\n    }\n\n    Node argList = getFunctionArgList(function);\n    boolean modifyCallers = modifyCallSites\n        && callSiteOptimizer.canModifyCallers(function);\n    if (!modifyCallers) {\n      // Strip unreferenced args off the end of the function declaration.\n      Node lastArg;\n      while ((lastArg = argList.getLastChild()) != null) {\n        Var var = fnScope.getVar(lastArg.getString());\n        if (!referenced.contains(var)) {\n          argList.removeChild(lastArg);\n          compiler.reportCodeChange();\n        } else {\n          break;\n        }\n      }\n    } else {\n      callSiteOptimizer.optimize(fnScope, referenced);\n    }\n  }",
                "javadoc_start_line": 363,
                "annotations_start_line": 369,
                "method_start_line": 369,
                "end_line": 406
            },
            "steps": [
                {
                    "file_path": "/src/com/google/javascript/jscomp/RemoveUnusedVars.java",
                    "method_name": "process",
                    "content": "  /**\n   * Traverses the root, removing all unused variables. Multiple traversals\n   * may occur to ensure all unused variables are removed.\n   */\n  @Override\n  public void process(Node externs, Node root) {\n    Preconditions.checkState(compiler.getLifeCycleStage().isNormalized());\n    SimpleDefinitionFinder defFinder = null;\n\n    if (modifyCallSites) {\n      // For testing, allow the SimpleDefinitionFinder to be build now.\n      defFinder = new SimpleDefinitionFinder(compiler);\n      defFinder.process(externs, root);\n    }\n    process(externs, root, defFinder);\n  }",
                    "javadoc_start_line": 135,
                    "annotations_start_line": 139,
                    "method_start_line": 140,
                    "end_line": 150
                },
                {
                    "file_path": "/src/com/google/javascript/jscomp/RemoveUnusedVars.java",
                    "method_name": "process",
                    "content": "  public void process(\n      Node externs, Node root, SimpleDefinitionFinder defFinder) {\n    if (modifyCallSites) {\n      Preconditions.checkNotNull(defFinder);\n      callSiteOptimizer = new CallSiteOptimizer(compiler, defFinder);\n    }\n    traverseAndRemoveUnusedReferences(root);\n    if (callSiteOptimizer != null) {\n      callSiteOptimizer.applyChanges();\n    }\n  }",
                    "javadoc_start_line": 153,
                    "annotations_start_line": 152,
                    "method_start_line": 154,
                    "end_line": 163
                },
                {
                    "file_path": "/src/com/google/javascript/jscomp/RemoveUnusedVars.java",
                    "method_name": "traverseAndRemoveUnusedReferences",
                    "content": "  /**\n   * Traverses a node recursively. Call this once per pass.\n   */\n  private void traverseAndRemoveUnusedReferences(Node root) {\n    Scope scope = new SyntacticScopeCreator(compiler).createScope(root, null);\n    traverseNode(root, null, scope);\n\n    if (removeGlobals) {\n      collectMaybeUnreferencedVars(scope);\n    }\n\n    interpretAssigns();\n    removeUnreferencedVars();\n    for (Scope fnScope : allFunctionScopes) {\n      removeUnreferencedFunctionArgs(fnScope);\n    }\n  }",
                    "javadoc_start_line": 165,
                    "annotations_start_line": 168,
                    "method_start_line": 168,
                    "end_line": 181
                },
                {
                    "file_path": "/src/com/google/javascript/jscomp/RemoveUnusedVars.java",
                    "method_name": "removeUnreferencedFunctionArgs",
                    "content": "  /**\n   * Removes unreferenced arguments from a function declaration and when\n   * possible the function's callSites.\n   *\n   * @param fnScope The scope inside the function\n   */\n  private void removeUnreferencedFunctionArgs(Scope fnScope) {\n    // Notice that removing unreferenced function args breaks\n    // Function.prototype.length. In advanced mode, we don't really care\n    // about this: we consider \"length\" the equivalent of reflecting on\n    // the function's lexical source.\n    //\n    // Rather than create a new option for this, we assume that if the user\n    // is removing globals, then it's OK to remove unused function args.\n    //\n    // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n\n    Node function = fnScope.getRootNode();\n\n    Preconditions.checkState(function.isFunction());\n    if (NodeUtil.isGetOrSetKey(function.getParent())) {\n      // The parameters object literal setters can not be removed.\n      return;\n    }\n\n    Node argList = getFunctionArgList(function);\n    boolean modifyCallers = modifyCallSites\n        && callSiteOptimizer.canModifyCallers(function);\n    if (!modifyCallers) {\n      // Strip unreferenced args off the end of the function declaration.\n      Node lastArg;\n      while ((lastArg = argList.getLastChild()) != null) {\n        Var var = fnScope.getVar(lastArg.getString());\n        if (!referenced.contains(var)) {\n          argList.removeChild(lastArg);\n          compiler.reportCodeChange();\n        } else {\n          break;\n        }\n      }\n    } else {\n      callSiteOptimizer.optimize(fnScope, referenced);\n    }\n  }",
                    "javadoc_start_line": 363,
                    "annotations_start_line": 369,
                    "method_start_line": 369,
                    "end_line": 406
                }
            ]
        },
        {
            "failing_test": {
                "className": " com.google.javascript.jscomp.RemoveUnusedVarsTest",
                "methodName": "testRemoveGlobal3",
                "error": "junit.framework.AssertionFailedError",
                "message": ""
            },
            "patched_method": {
                "file_path": "/src/com/google/javascript/jscomp/RemoveUnusedVars.java",
                "method_name": "removeUnreferencedFunctionArgs",
                "content": "  /**\n   * Removes unreferenced arguments from a function declaration and when\n   * possible the function's callSites.\n   *\n   * @param fnScope The scope inside the function\n   */\n  private void removeUnreferencedFunctionArgs(Scope fnScope) {\n    // Notice that removing unreferenced function args breaks\n    // Function.prototype.length. In advanced mode, we don't really care\n    // about this: we consider \"length\" the equivalent of reflecting on\n    // the function's lexical source.\n    //\n    // Rather than create a new option for this, we assume that if the user\n    // is removing globals, then it's OK to remove unused function args.\n    //\n    // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n\n    Node function = fnScope.getRootNode();\n\n    Preconditions.checkState(function.isFunction());\n    if (NodeUtil.isGetOrSetKey(function.getParent())) {\n      // The parameters object literal setters can not be removed.\n      return;\n    }\n\n    Node argList = getFunctionArgList(function);\n    boolean modifyCallers = modifyCallSites\n        && callSiteOptimizer.canModifyCallers(function);\n    if (!modifyCallers) {\n      // Strip unreferenced args off the end of the function declaration.\n      Node lastArg;\n      while ((lastArg = argList.getLastChild()) != null) {\n        Var var = fnScope.getVar(lastArg.getString());\n        if (!referenced.contains(var)) {\n          argList.removeChild(lastArg);\n          compiler.reportCodeChange();\n        } else {\n          break;\n        }\n      }\n    } else {\n      callSiteOptimizer.optimize(fnScope, referenced);\n    }\n  }",
                "javadoc_start_line": 363,
                "annotations_start_line": 369,
                "method_start_line": 369,
                "end_line": 406
            },
            "steps": [
                {
                    "file_path": "/src/com/google/javascript/jscomp/RemoveUnusedVars.java",
                    "method_name": "process",
                    "content": "  /**\n   * Traverses the root, removing all unused variables. Multiple traversals\n   * may occur to ensure all unused variables are removed.\n   */\n  @Override\n  public void process(Node externs, Node root) {\n    Preconditions.checkState(compiler.getLifeCycleStage().isNormalized());\n    SimpleDefinitionFinder defFinder = null;\n\n    if (modifyCallSites) {\n      // For testing, allow the SimpleDefinitionFinder to be build now.\n      defFinder = new SimpleDefinitionFinder(compiler);\n      defFinder.process(externs, root);\n    }\n    process(externs, root, defFinder);\n  }",
                    "javadoc_start_line": 135,
                    "annotations_start_line": 139,
                    "method_start_line": 140,
                    "end_line": 150
                },
                {
                    "file_path": "/src/com/google/javascript/jscomp/RemoveUnusedVars.java",
                    "method_name": "process",
                    "content": "  public void process(\n      Node externs, Node root, SimpleDefinitionFinder defFinder) {\n    if (modifyCallSites) {\n      Preconditions.checkNotNull(defFinder);\n      callSiteOptimizer = new CallSiteOptimizer(compiler, defFinder);\n    }\n    traverseAndRemoveUnusedReferences(root);\n    if (callSiteOptimizer != null) {\n      callSiteOptimizer.applyChanges();\n    }\n  }",
                    "javadoc_start_line": 153,
                    "annotations_start_line": 152,
                    "method_start_line": 154,
                    "end_line": 163
                },
                {
                    "file_path": "/src/com/google/javascript/jscomp/RemoveUnusedVars.java",
                    "method_name": "traverseAndRemoveUnusedReferences",
                    "content": "  /**\n   * Traverses a node recursively. Call this once per pass.\n   */\n  private void traverseAndRemoveUnusedReferences(Node root) {\n    Scope scope = new SyntacticScopeCreator(compiler).createScope(root, null);\n    traverseNode(root, null, scope);\n\n    if (removeGlobals) {\n      collectMaybeUnreferencedVars(scope);\n    }\n\n    interpretAssigns();\n    removeUnreferencedVars();\n    for (Scope fnScope : allFunctionScopes) {\n      removeUnreferencedFunctionArgs(fnScope);\n    }\n  }",
                    "javadoc_start_line": 165,
                    "annotations_start_line": 168,
                    "method_start_line": 168,
                    "end_line": 181
                },
                {
                    "file_path": "/src/com/google/javascript/jscomp/RemoveUnusedVars.java",
                    "method_name": "removeUnreferencedFunctionArgs",
                    "content": "  /**\n   * Removes unreferenced arguments from a function declaration and when\n   * possible the function's callSites.\n   *\n   * @param fnScope The scope inside the function\n   */\n  private void removeUnreferencedFunctionArgs(Scope fnScope) {\n    // Notice that removing unreferenced function args breaks\n    // Function.prototype.length. In advanced mode, we don't really care\n    // about this: we consider \"length\" the equivalent of reflecting on\n    // the function's lexical source.\n    //\n    // Rather than create a new option for this, we assume that if the user\n    // is removing globals, then it's OK to remove unused function args.\n    //\n    // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n\n    Node function = fnScope.getRootNode();\n\n    Preconditions.checkState(function.isFunction());\n    if (NodeUtil.isGetOrSetKey(function.getParent())) {\n      // The parameters object literal setters can not be removed.\n      return;\n    }\n\n    Node argList = getFunctionArgList(function);\n    boolean modifyCallers = modifyCallSites\n        && callSiteOptimizer.canModifyCallers(function);\n    if (!modifyCallers) {\n      // Strip unreferenced args off the end of the function declaration.\n      Node lastArg;\n      while ((lastArg = argList.getLastChild()) != null) {\n        Var var = fnScope.getVar(lastArg.getString());\n        if (!referenced.contains(var)) {\n          argList.removeChild(lastArg);\n          compiler.reportCodeChange();\n        } else {\n          break;\n        }\n      }\n    } else {\n      callSiteOptimizer.optimize(fnScope, referenced);\n    }\n  }",
                    "javadoc_start_line": 363,
                    "annotations_start_line": 369,
                    "method_start_line": 369,
                    "end_line": 406
                }
            ]
        },
        {
            "failing_test": {
                "className": " com.google.javascript.jscomp.RemoveUnusedVarsTest",
                "methodName": "testIssue168b",
                "error": "junit.framework.AssertionFailedError",
                "message": ""
            },
            "patched_method": {
                "file_path": "/src/com/google/javascript/jscomp/RemoveUnusedVars.java",
                "method_name": "removeUnreferencedFunctionArgs",
                "content": "  /**\n   * Removes unreferenced arguments from a function declaration and when\n   * possible the function's callSites.\n   *\n   * @param fnScope The scope inside the function\n   */\n  private void removeUnreferencedFunctionArgs(Scope fnScope) {\n    // Notice that removing unreferenced function args breaks\n    // Function.prototype.length. In advanced mode, we don't really care\n    // about this: we consider \"length\" the equivalent of reflecting on\n    // the function's lexical source.\n    //\n    // Rather than create a new option for this, we assume that if the user\n    // is removing globals, then it's OK to remove unused function args.\n    //\n    // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n\n    Node function = fnScope.getRootNode();\n\n    Preconditions.checkState(function.isFunction());\n    if (NodeUtil.isGetOrSetKey(function.getParent())) {\n      // The parameters object literal setters can not be removed.\n      return;\n    }\n\n    Node argList = getFunctionArgList(function);\n    boolean modifyCallers = modifyCallSites\n        && callSiteOptimizer.canModifyCallers(function);\n    if (!modifyCallers) {\n      // Strip unreferenced args off the end of the function declaration.\n      Node lastArg;\n      while ((lastArg = argList.getLastChild()) != null) {\n        Var var = fnScope.getVar(lastArg.getString());\n        if (!referenced.contains(var)) {\n          argList.removeChild(lastArg);\n          compiler.reportCodeChange();\n        } else {\n          break;\n        }\n      }\n    } else {\n      callSiteOptimizer.optimize(fnScope, referenced);\n    }\n  }",
                "javadoc_start_line": 363,
                "annotations_start_line": 369,
                "method_start_line": 369,
                "end_line": 406
            },
            "steps": [
                {
                    "file_path": "/src/com/google/javascript/jscomp/RemoveUnusedVars.java",
                    "method_name": "process",
                    "content": "  /**\n   * Traverses the root, removing all unused variables. Multiple traversals\n   * may occur to ensure all unused variables are removed.\n   */\n  @Override\n  public void process(Node externs, Node root) {\n    Preconditions.checkState(compiler.getLifeCycleStage().isNormalized());\n    SimpleDefinitionFinder defFinder = null;\n\n    if (modifyCallSites) {\n      // For testing, allow the SimpleDefinitionFinder to be build now.\n      defFinder = new SimpleDefinitionFinder(compiler);\n      defFinder.process(externs, root);\n    }\n    process(externs, root, defFinder);\n  }",
                    "javadoc_start_line": 135,
                    "annotations_start_line": 139,
                    "method_start_line": 140,
                    "end_line": 150
                },
                {
                    "file_path": "/src/com/google/javascript/jscomp/RemoveUnusedVars.java",
                    "method_name": "process",
                    "content": "  public void process(\n      Node externs, Node root, SimpleDefinitionFinder defFinder) {\n    if (modifyCallSites) {\n      Preconditions.checkNotNull(defFinder);\n      callSiteOptimizer = new CallSiteOptimizer(compiler, defFinder);\n    }\n    traverseAndRemoveUnusedReferences(root);\n    if (callSiteOptimizer != null) {\n      callSiteOptimizer.applyChanges();\n    }\n  }",
                    "javadoc_start_line": 153,
                    "annotations_start_line": 152,
                    "method_start_line": 154,
                    "end_line": 163
                },
                {
                    "file_path": "/src/com/google/javascript/jscomp/RemoveUnusedVars.java",
                    "method_name": "traverseAndRemoveUnusedReferences",
                    "content": "  /**\n   * Traverses a node recursively. Call this once per pass.\n   */\n  private void traverseAndRemoveUnusedReferences(Node root) {\n    Scope scope = new SyntacticScopeCreator(compiler).createScope(root, null);\n    traverseNode(root, null, scope);\n\n    if (removeGlobals) {\n      collectMaybeUnreferencedVars(scope);\n    }\n\n    interpretAssigns();\n    removeUnreferencedVars();\n    for (Scope fnScope : allFunctionScopes) {\n      removeUnreferencedFunctionArgs(fnScope);\n    }\n  }",
                    "javadoc_start_line": 165,
                    "annotations_start_line": 168,
                    "method_start_line": 168,
                    "end_line": 181
                },
                {
                    "file_path": "/src/com/google/javascript/jscomp/RemoveUnusedVars.java",
                    "method_name": "removeUnreferencedFunctionArgs",
                    "content": "  /**\n   * Removes unreferenced arguments from a function declaration and when\n   * possible the function's callSites.\n   *\n   * @param fnScope The scope inside the function\n   */\n  private void removeUnreferencedFunctionArgs(Scope fnScope) {\n    // Notice that removing unreferenced function args breaks\n    // Function.prototype.length. In advanced mode, we don't really care\n    // about this: we consider \"length\" the equivalent of reflecting on\n    // the function's lexical source.\n    //\n    // Rather than create a new option for this, we assume that if the user\n    // is removing globals, then it's OK to remove unused function args.\n    //\n    // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n\n    Node function = fnScope.getRootNode();\n\n    Preconditions.checkState(function.isFunction());\n    if (NodeUtil.isGetOrSetKey(function.getParent())) {\n      // The parameters object literal setters can not be removed.\n      return;\n    }\n\n    Node argList = getFunctionArgList(function);\n    boolean modifyCallers = modifyCallSites\n        && callSiteOptimizer.canModifyCallers(function);\n    if (!modifyCallers) {\n      // Strip unreferenced args off the end of the function declaration.\n      Node lastArg;\n      while ((lastArg = argList.getLastChild()) != null) {\n        Var var = fnScope.getVar(lastArg.getString());\n        if (!referenced.contains(var)) {\n          argList.removeChild(lastArg);\n          compiler.reportCodeChange();\n        } else {\n          break;\n        }\n      }\n    } else {\n      callSiteOptimizer.optimize(fnScope, referenced);\n    }\n  }",
                    "javadoc_start_line": 363,
                    "annotations_start_line": 369,
                    "method_start_line": 369,
                    "end_line": 406
                }
            ]
        }
    ],
    "project": {
        "name": "Closure",
        "version": 1
    }
}