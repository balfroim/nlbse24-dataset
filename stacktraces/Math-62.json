{"tours": [{"failing_test": {"className": " org.apache.commons.math.optimization.univariate.MultiStartUnivariateRealOptimizerTest", "methodName": "testQuinticMin", "error": "junit.framework.AssertionFailedError", "message": "expected:<-0.2719561293> but was:<-0.2719561278056452>"}, "patched_method": {"file_path": "/src/main/java/org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizer.java", "method_name": "optimize", "content": "    /** {@inheritDoc} */\n    public UnivariateRealPointValuePair optimize(final FUNC f, final GoalType goal,\n                                                 final double min, final double max,\n                                                 final double startValue)\n        throws FunctionEvaluationException {\n        optima = new UnivariateRealPointValuePair[starts];\n        totalEvaluations = 0;\n\n        // Multi-start loop.\n        for (int i = 0; i < starts; ++i) {\n            try {\n                final double bound1 = (i == 0) ? min : min + generator.nextDouble() * (max - min);\n                final double bound2 = (i == 0) ? max : min + generator.nextDouble() * (max - min);\n                optima[i] = optimizer.optimize(f, goal, FastMath.min(bound1, bound2), FastMath.max(bound1, bound2));\n            } catch (FunctionEvaluationException fee) {\n                optima[i] = null;\n            } catch (ConvergenceException ce) {\n                optima[i] = null;\n            }\n\n            final int usedEvaluations = optimizer.getEvaluations();\n            optimizer.setMaxEvaluations(optimizer.getMaxEvaluations() - usedEvaluations);\n            totalEvaluations += usedEvaluations;\n        }\n\n        sortPairs(goal);\n\n        if (optima[0] == null) {\n            throw new ConvergenceException(LocalizedFormats.NO_CONVERGENCE_WITH_ANY_START_POINT,\n                                           starts);\n        }\n\n        // Return the point with the best objective function value.\n        return optima[0];\n    }", "javadoc_start_line": 149, "annotations_start_line": 150, "method_start_line": 153, "end_line": 183}, "steps": [{"file_path": "/src/test/java/org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizerTest.java", "method_name": "testQuinticMin", "content": "    public void testQuinticMin() throws MathException {\n        // The quintic function has zeros at 0, +-0.5 and +-1.\n        // The function has extrema (first derivative is zero) at 0.27195613 and 0.82221643,\n        UnivariateRealFunction f = new QuinticFunction();\n        UnivariateRealOptimizer underlying = new BrentOptimizer(1e-9, 1e-14);\n        underlying.setMaxEvaluations(300);\n        JDKRandomGenerator g = new JDKRandomGenerator();\n        g.setSeed(4312000053L);\n        MultiStartUnivariateRealOptimizer optimizer =\n            new MultiStartUnivariateRealOptimizer(underlying, 5, g);\n\n        UnivariateRealPointValuePair optimum\n            = optimizer.optimize(f, GoalType.MINIMIZE, -0.3, -0.2);\n        assertEquals(-0.2719561293, optimum.getPoint(), 1e-9);\n        assertEquals(-0.0443342695, optimum.getValue(), 1e-9);\n\n        UnivariateRealPointValuePair[] optima = optimizer.getOptima();\n        for (int i = 0; i < optima.length; ++i) {\n            assertEquals(f.value(optima[i].getPoint()), optima[i].getValue(), 1e-9);\n        }\n        assertTrue(optimizer.getEvaluations() >= 50);\n        assertTrue(optimizer.getEvaluations() <= 100);\n    }", "javadoc_start_line": 58, "annotations_start_line": 57, "method_start_line": 58, "end_line": 80}, {"file_path": "/src/main/java/org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizer.java", "method_name": "optimize", "content": "    /** {@inheritDoc} */\n    public UnivariateRealPointValuePair optimize(final FUNC f,\n                                                 final GoalType goal,\n                                                 final double min, final double max)\n        throws FunctionEvaluationException {\n        return optimize(f, goal, min, max, 0);\n    }", "javadoc_start_line": 141, "annotations_start_line": 142, "method_start_line": 145, "end_line": 147}]}, {"failing_test": {"className": " org.apache.commons.math.optimization.univariate.MultiStartUnivariateRealOptimizerTest", "methodName": "testQuinticMin", "error": "junit.framework.AssertionFailedError", "message": "expected:<-0.2719561293> but was:<-0.2719561278056452>"}, "patched_method": {"file_path": "/src/main/java/org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizer.java", "method_name": "optimize", "content": "    /** {@inheritDoc} */\n    public UnivariateRealPointValuePair optimize(final FUNC f,\n                                                 final GoalType goal,\n                                                 final double min, final double max)\n        throws FunctionEvaluationException {\n        return optimize(f, goal, min, max, 0);\n    }", "javadoc_start_line": 141, "annotations_start_line": 142, "method_start_line": 145, "end_line": 147}, "steps": [{"file_path": "/src/test/java/org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizerTest.java", "method_name": "testQuinticMin", "content": "    public void testQuinticMin() throws MathException {\n        // The quintic function has zeros at 0, +-0.5 and +-1.\n        // The function has extrema (first derivative is zero) at 0.27195613 and 0.82221643,\n        UnivariateRealFunction f = new QuinticFunction();\n        UnivariateRealOptimizer underlying = new BrentOptimizer(1e-9, 1e-14);\n        underlying.setMaxEvaluations(300);\n        JDKRandomGenerator g = new JDKRandomGenerator();\n        g.setSeed(4312000053L);\n        MultiStartUnivariateRealOptimizer optimizer =\n            new MultiStartUnivariateRealOptimizer(underlying, 5, g);\n\n        UnivariateRealPointValuePair optimum\n            = optimizer.optimize(f, GoalType.MINIMIZE, -0.3, -0.2);\n        assertEquals(-0.2719561293, optimum.getPoint(), 1e-9);\n        assertEquals(-0.0443342695, optimum.getValue(), 1e-9);\n\n        UnivariateRealPointValuePair[] optima = optimizer.getOptima();\n        for (int i = 0; i < optima.length; ++i) {\n            assertEquals(f.value(optima[i].getPoint()), optima[i].getValue(), 1e-9);\n        }\n        assertTrue(optimizer.getEvaluations() >= 50);\n        assertTrue(optimizer.getEvaluations() <= 100);\n    }", "javadoc_start_line": 58, "annotations_start_line": 57, "method_start_line": 58, "end_line": 80}, {"file_path": "/src/main/java/org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizer.java", "method_name": "optimize", "content": "    /** {@inheritDoc} */\n    public UnivariateRealPointValuePair optimize(final FUNC f,\n                                                 final GoalType goal,\n                                                 final double min, final double max)\n        throws FunctionEvaluationException {\n        return optimize(f, goal, min, max, 0);\n    }", "javadoc_start_line": 141, "annotations_start_line": 142, "method_start_line": 145, "end_line": 147}]}], "project": {"name": "Math", "version": 62}}