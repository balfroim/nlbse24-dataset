{"tours": [{"failing_test": {"className": " com.google.javascript.jscomp.ClosureReverseAbstractInterpreterTest", "methodName": "testGoogIsArray2", "error": "junit.framework.AssertionFailedError", "message": "Expected: Array"}, "patched_method": {"file_path": "/src/com/google/javascript/jscomp/type/ClosureReverseAbstractInterpreter.java", "method_name": "caseTopType", "content": "        protected JSType caseTopType(JSType topType) {\n          return topType;\n        }", "javadoc_start_line": 53, "annotations_start_line": 52, "method_start_line": 53, "end_line": 55}, "steps": [{"file_path": "/src/com/google/javascript/jscomp/type/ClosureReverseAbstractInterpreter.java", "method_name": "getPreciserScopeKnowingConditionOutcome", "content": "  public FlowScope getPreciserScopeKnowingConditionOutcome(Node condition,\n      FlowScope blindScope, boolean outcome) {\n    if (condition.isCall() && condition.getChildCount() == 2) {\n      Node callee = condition.getFirstChild();\n      Node param = condition.getLastChild();\n      if (callee.isGetProp() && param.isQualifiedName()) {\n        JSType paramType =  getTypeIfRefinable(param, blindScope);\n        Node left = callee.getFirstChild();\n        Node right = callee.getLastChild();\n        if (left.isName() && \"goog\".equals(left.getString()) &&\n            right.isString()) {\n          Function<TypeRestriction, JSType> restricter =\n              restricters.get(right.getString());\n          if (restricter != null) {\n            return restrictParameter(param, paramType, blindScope, restricter,\n                outcome);\n          }\n        }\n      }\n    }\n    return nextPreciserScopeKnowingConditionOutcome(\n        condition, blindScope, outcome);\n  }", "javadoc_start_line": 217, "annotations_start_line": 216, "method_start_line": 218, "end_line": 239}, {"file_path": "/src/com/google/javascript/jscomp/type/ClosureReverseAbstractInterpreter.java", "method_name": "restrictParameter", "content": "  private FlowScope restrictParameter(Node parameter, JSType type,\n      FlowScope blindScope, Function<TypeRestriction, JSType> restriction,\n      boolean outcome) {\n    // restricting\n    type = restriction.apply(new TypeRestriction(type, outcome));\n\n    // changing the scope\n    if (type != null) {\n      FlowScope informed = blindScope.createChildFlowScope();\n      declareNameInScope(informed, parameter, type);\n      return informed;\n    } else {\n      return blindScope;\n    }\n  }", "javadoc_start_line": 241, "annotations_start_line": 241, "method_start_line": 243, "end_line": 255}, {"file_path": "/src/com/google/javascript/rhino/jstype/AllType.java", "method_name": "visit", "content": "  public <T> T visit(Visitor<T> visitor) {\n    return visitor.caseAllType();\n  }", "javadoc_start_line": 99, "annotations_start_line": 98, "method_start_line": 99, "end_line": 101}]}], "project": {"name": "Closure", "version": 111}}