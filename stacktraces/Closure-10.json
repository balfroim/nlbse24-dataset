{"tours": [{"failing_test": {"className": " com.google.javascript.jscomp.PeepholeFoldConstantsTest", "methodName": "testIssue821", "error": "junit.framework.AssertionFailedError", "message": ""}, "patched_method": {"file_path": "/src/com/google/javascript/jscomp/NodeUtil.java", "method_name": "mayBeString", "content": "  static boolean mayBeString(Node n, boolean recurse) {\n    if (recurse) {\n      return allResultsMatch(n, MAY_BE_STRING_PREDICATE);\n    } else {\n      return mayBeStringHelper(n);\n    }\n  }", "javadoc_start_line": 1415, "annotations_start_line": 1415, "method_start_line": 1415, "end_line": 1421}, "steps": [{"file_path": "/src/com/google/javascript/jscomp/PeepholeOptimizationsPass.java", "method_name": "process", "content": "  public void process(Node externs, Node root) {\n    PeepholeChangeHandler handler = new PeepholeChangeHandler();\n    compiler.addChangeHandler(handler);\n    beginTraversal();\n    traverse(root);\n    endTraversal();\n    compiler.removeChangeHandler(handler);\n  }", "javadoc_start_line": 104, "annotations_start_line": 103, "method_start_line": 104, "end_line": 111}, {"file_path": "/src/com/google/javascript/jscomp/PeepholeOptimizationsPass.java", "method_name": "traverse", "content": "  private void traverse(Node node) {\n    // The goal here is to avoid retraversing\n    // the entire AST to catch newly created opportunities.\n    // So we track whether a \"unit of code\" has changed,\n    // and revisit immediately.\n    if (!shouldVisit(node)) {\n      return;\n    }\n\n    int visits = 0;\n    do {\n      Node c = node.getFirstChild();\n      while(c != null) {\n        Node next = c.getNext();\n        traverse(c);\n        c = next;\n      }\n\n      visit(node);\n      visits++;\n\n      Preconditions.checkState(visits < 10000, \"too many interations\");\n    } while (shouldRetraverse(node));\n\n    exitNode(node);\n  }", "javadoc_start_line": 113, "annotations_start_line": 113, "method_start_line": 113, "end_line": 138}, {"file_path": "/src/com/google/javascript/jscomp/PeepholeOptimizationsPass.java", "method_name": "traverse", "content": "  private void traverse(Node node) {\n    // The goal here is to avoid retraversing\n    // the entire AST to catch newly created opportunities.\n    // So we track whether a \"unit of code\" has changed,\n    // and revisit immediately.\n    if (!shouldVisit(node)) {\n      return;\n    }\n\n    int visits = 0;\n    do {\n      Node c = node.getFirstChild();\n      while(c != null) {\n        Node next = c.getNext();\n        traverse(c);\n        c = next;\n      }\n\n      visit(node);\n      visits++;\n\n      Preconditions.checkState(visits < 10000, \"too many interations\");\n    } while (shouldRetraverse(node));\n\n    exitNode(node);\n  }", "javadoc_start_line": 113, "annotations_start_line": 113, "method_start_line": 113, "end_line": 138}, {"file_path": "/src/com/google/javascript/jscomp/PeepholeOptimizationsPass.java", "method_name": "traverse", "content": "  private void traverse(Node node) {\n    // The goal here is to avoid retraversing\n    // the entire AST to catch newly created opportunities.\n    // So we track whether a \"unit of code\" has changed,\n    // and revisit immediately.\n    if (!shouldVisit(node)) {\n      return;\n    }\n\n    int visits = 0;\n    do {\n      Node c = node.getFirstChild();\n      while(c != null) {\n        Node next = c.getNext();\n        traverse(c);\n        c = next;\n      }\n\n      visit(node);\n      visits++;\n\n      Preconditions.checkState(visits < 10000, \"too many interations\");\n    } while (shouldRetraverse(node));\n\n    exitNode(node);\n  }", "javadoc_start_line": 113, "annotations_start_line": 113, "method_start_line": 113, "end_line": 138}, {"file_path": "/src/com/google/javascript/jscomp/PeepholeOptimizationsPass.java", "method_name": "traverse", "content": "  private void traverse(Node node) {\n    // The goal here is to avoid retraversing\n    // the entire AST to catch newly created opportunities.\n    // So we track whether a \"unit of code\" has changed,\n    // and revisit immediately.\n    if (!shouldVisit(node)) {\n      return;\n    }\n\n    int visits = 0;\n    do {\n      Node c = node.getFirstChild();\n      while(c != null) {\n        Node next = c.getNext();\n        traverse(c);\n        c = next;\n      }\n\n      visit(node);\n      visits++;\n\n      Preconditions.checkState(visits < 10000, \"too many interations\");\n    } while (shouldRetraverse(node));\n\n    exitNode(node);\n  }", "javadoc_start_line": 113, "annotations_start_line": 113, "method_start_line": 113, "end_line": 138}, {"file_path": "/src/com/google/javascript/jscomp/PeepholeOptimizationsPass.java", "method_name": "traverse", "content": "  private void traverse(Node node) {\n    // The goal here is to avoid retraversing\n    // the entire AST to catch newly created opportunities.\n    // So we track whether a \"unit of code\" has changed,\n    // and revisit immediately.\n    if (!shouldVisit(node)) {\n      return;\n    }\n\n    int visits = 0;\n    do {\n      Node c = node.getFirstChild();\n      while(c != null) {\n        Node next = c.getNext();\n        traverse(c);\n        c = next;\n      }\n\n      visit(node);\n      visits++;\n\n      Preconditions.checkState(visits < 10000, \"too many interations\");\n    } while (shouldRetraverse(node));\n\n    exitNode(node);\n  }", "javadoc_start_line": 113, "annotations_start_line": 113, "method_start_line": 113, "end_line": 138}, {"file_path": "/src/com/google/javascript/jscomp/PeepholeOptimizationsPass.java", "method_name": "visit", "content": "  public void visit(Node n) {\n    Node currentVersionOfNode = n;\n    boolean somethingChanged = false;\n\n    do {\n      somethingChanged = false;\n      for (AbstractPeepholeOptimization optimization : peepholeOptimizations) {\n        Node newVersionOfNode =\n            optimization.optimizeSubtree(currentVersionOfNode);\n\n        if (newVersionOfNode != currentVersionOfNode) {\n          somethingChanged = true;\n\n          currentVersionOfNode = newVersionOfNode;\n        }\n\n        if (currentVersionOfNode == null) {\n          return;\n        }\n      }\n    } while(somethingChanged);\n  }", "javadoc_start_line": 173, "annotations_start_line": 173, "method_start_line": 173, "end_line": 194}, {"file_path": "/src/com/google/javascript/jscomp/PeepholeFoldConstants.java", "method_name": "optimizeSubtree", "content": "  Node optimizeSubtree(Node subtree) {\n    switch(subtree.getType()) {\n      case Token.NEW:\n        return tryFoldCtorCall(subtree);\n\n      case Token.TYPEOF:\n        return tryFoldTypeof(subtree);\n\n      case Token.NOT:\n      case Token.POS:\n      case Token.NEG:\n      case Token.BITNOT:\n        tryReduceOperandsForOp(subtree);\n        return tryFoldUnaryOperator(subtree);\n\n      case Token.VOID:\n        return tryReduceVoid(subtree);\n\n      default:\n        tryReduceOperandsForOp(subtree);\n        return tryFoldBinaryOperator(subtree);\n    }\n  }", "javadoc_start_line": 75, "annotations_start_line": 74, "method_start_line": 75, "end_line": 97}, {"file_path": "/src/com/google/javascript/jscomp/PeepholeFoldConstants.java", "method_name": "tryFoldBinaryOperator", "content": "  private Node tryFoldBinaryOperator(Node subtree) {\n    Node left = subtree.getFirstChild();\n\n    if (left == null) {\n      return subtree;\n    }\n\n    Node right = left.getNext();\n\n    if (right == null) {\n      return subtree;\n    }\n\n    // If we've reached here, node is truly a binary operator.\n    switch(subtree.getType()) {\n      case Token.GETPROP:\n        return tryFoldGetProp(subtree, left, right);\n\n      case Token.GETELEM:\n        return tryFoldGetElem(subtree, left, right);\n\n      case Token.INSTANCEOF:\n        return tryFoldInstanceof(subtree, left, right);\n\n      case Token.AND:\n      case Token.OR:\n        return tryFoldAndOr(subtree, left, right);\n\n      case Token.LSH:\n      case Token.RSH:\n      case Token.URSH:\n        return tryFoldShift(subtree, left, right);\n\n      case Token.ASSIGN:\n        return tryFoldAssign(subtree, left, right);\n\n      case Token.ASSIGN_BITOR:\n      case Token.ASSIGN_BITXOR:\n      case Token.ASSIGN_BITAND:\n      case Token.ASSIGN_LSH:\n      case Token.ASSIGN_RSH:\n      case Token.ASSIGN_URSH:\n      case Token.ASSIGN_ADD:\n      case Token.ASSIGN_SUB:\n      case Token.ASSIGN_MUL:\n      case Token.ASSIGN_DIV:\n      case Token.ASSIGN_MOD:\n        return tryUnfoldAssignOp(subtree, left, right);\n\n      case Token.ADD:\n        return tryFoldAdd(subtree, left, right);\n\n      case Token.SUB:\n      case Token.DIV:\n      case Token.MOD:\n        return tryFoldArithmeticOp(subtree, left, right);\n\n      case Token.MUL:\n      case Token.BITAND:\n      case Token.BITOR:\n      case Token.BITXOR:\n        Node result = tryFoldArithmeticOp(subtree, left, right);\n        if (result != subtree) {\n          return result;\n        }\n        return tryFoldLeftChildOp(subtree, left, right);\n\n      case Token.LT:\n      case Token.GT:\n      case Token.LE:\n      case Token.GE:\n      case Token.EQ:\n      case Token.NE:\n      case Token.SHEQ:\n      case Token.SHNE:\n        return tryFoldComparison(subtree, left, right);\n\n      default:\n        return subtree;\n    }\n  }", "javadoc_start_line": 99, "annotations_start_line": 99, "method_start_line": 99, "end_line": 179}, {"file_path": "/src/com/google/javascript/jscomp/PeepholeFoldConstants.java", "method_name": "tryFoldAdd", "content": "  private Node tryFoldAdd(Node node, Node left, Node right) {\n    Preconditions.checkArgument(node.isAdd());\n\n    if (NodeUtil.mayBeString(node, true)) {\n      if (NodeUtil.isLiteralValue(left, false) &&\n          NodeUtil.isLiteralValue(right, false)) {\n        // '6' + 7\n        return tryFoldAddConstantString(node, left, right);\n      } else {\n        // a + 7 or 6 + a\n        return tryFoldChildAddString(node, left, right);\n      }\n    } else {\n      // Try arithmetic add\n      Node result = tryFoldArithmeticOp(node, left, right);\n      if (result != node) {\n        return result;\n      }\n      return tryFoldLeftChildOp(node, left, right);\n    }\n  }", "javadoc_start_line": 827, "annotations_start_line": 827, "method_start_line": 827, "end_line": 847}, {"file_path": "/src/com/google/javascript/jscomp/PeepholeFoldConstants.java", "method_name": "tryFoldLeftChildOp", "content": "  /**\n   * Expressions such as [foo() * 10 * 20] generate parse trees\n   * where no node has two const children ((foo() * 10) * 20), so\n   * performArithmeticOp() won't fold it -- tryFoldLeftChildOp() will.\n   * Specifically, it folds associative expressions where:\n   *  - The left child is also an associative expression of the same time.\n   *  - The right child is a constant NUMBER constant.\n   *  - The left child's right child is a NUMBER constant.\n   */\n  private Node tryFoldLeftChildOp(Node n, Node left, Node right) {\n    int opType = n.getType();\n    Preconditions.checkState(\n        (NodeUtil.isAssociative(opType) && NodeUtil.isCommutative(opType))\n        || n.isAdd());\n\n    Preconditions.checkState(\n        !n.isAdd()|| !NodeUtil.mayBeString(n));\n\n    // Use getNumberValue to handle constants like \"NaN\" and \"Infinity\"\n    // other values are converted to numbers elsewhere.\n    Double rightValObj = NodeUtil.getNumberValue(right);\n    if (rightValObj != null && left.getType() == opType) {\n      Preconditions.checkState(left.getChildCount() == 2);\n\n      Node ll = left.getFirstChild();\n      Node lr = ll.getNext();\n\n      Node valueToCombine = ll;\n      Node replacement = performArithmeticOp(opType, valueToCombine, right);\n      if (replacement == null) {\n        valueToCombine = lr;\n        replacement = performArithmeticOp(opType, valueToCombine, right);\n      }\n      if (replacement != null) {\n        // Remove the child that has been combined\n        left.removeChild(valueToCombine);\n        // Replace the left op with the remaining child.\n        n.replaceChild(left, left.removeFirstChild());\n        // New \"-Infinity\" node need location info explicitly\n        // added.\n        replacement.copyInformationFromForTree(right);\n        n.replaceChild(right, replacement);\n        reportCodeChange();\n      }\n    }\n\n    return n;\n  }", "javadoc_start_line": 778, "annotations_start_line": 787, "method_start_line": 787, "end_line": 825}, {"file_path": "/src/com/google/javascript/jscomp/NodeUtil.java", "method_name": "mayBeString", "content": "  /**\n   * @returns Whether the results is possibly a string.\n   */\n  static boolean mayBeString(Node n) {\n    return mayBeString(n, true);\n  }", "javadoc_start_line": 1408, "annotations_start_line": 1411, "method_start_line": 1411, "end_line": 1413}]}], "project": {"name": "Closure", "version": 10}}