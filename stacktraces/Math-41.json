{"tours": [{"failing_test": {"className": " org.apache.commons.math.stat.descriptive.moment.VarianceTest", "methodName": "testEvaluateArraySegmentWeighted", "error": "junit.framework.AssertionFailedError", "message": "expected:<1.6644508338125354> but was:<0.31909161062727365>"}, "patched_method": {"file_path": "/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java", "method_name": "evaluate", "content": "    /**\n     * Returns the weighted variance of the entries in the specified portion of\n     * the input array, using the precomputed weighted mean value.  Returns\n     * <code>Double.NaN</code> if the designated subarray is empty.\n     * <p>\n     * Uses the formula <pre>\n     *   &Sigma;(weights[i]*(values[i] - mean)<sup>2</sup>)/(&Sigma;(weights[i]) - 1)\n     * </pre></p>\n     * <p>\n     * The formula used assumes that the supplied mean value is the weighted arithmetic\n     * mean of the sample data, not a known population parameter. This method\n     * is supplied only to save computation when the mean has already been\n     * computed.</p>\n     * <p>\n     * This formula will not return the same result as the unweighted variance when all\n     * weights are equal, unless all weights are equal to 1. The formula assumes that\n     * weights are to be treated as \"expansion values,\" as will be the case if for example\n     * the weights represent frequency counts. To normalize weights so that the denominator\n     * in the variance computation equals the length of the input vector minus one, use <pre>\n     *   <code>evaluate(values, MathArrays.normalizeArray(weights, values.length), mean); </code>\n     * </pre>\n     * <p>\n     * Returns 0 for a single-value (i.e. length = 1) sample.</p>\n     * <p>\n     * Throws <code>IllegalArgumentException</code> if any of the following are true:\n     * <ul><li>the values array is null</li>\n     *     <li>the weights array is null</li>\n     *     <li>the weights array does not have the same length as the values array</li>\n     *     <li>the weights array contains one or more infinite values</li>\n     *     <li>the weights array contains one or more NaN values</li>\n     *     <li>the weights array contains negative values</li>\n     *     <li>the start and length arguments do not determine a valid array</li>\n     * </ul></p>\n     * <p>\n     * Does not change the internal state of the statistic.</p>\n     *\n     * @param values the input array\n     * @param weights the weights array\n     * @param mean the precomputed weighted mean value\n     * @param begin index of the first array element to include\n     * @param length the number of elements to include\n     * @return the variance of the values or Double.NaN if length = 0\n     * @throws IllegalArgumentException if the parameters are not valid\n     * @since 2.1\n     */\n    public double evaluate(final double[] values, final double[] weights,\n                           final double mean, final int begin, final int length) {\n\n        double var = Double.NaN;\n\n        if (test(values, weights, begin, length)) {\n            if (length == 1) {\n                var = 0.0;\n            } else if (length > 1) {\n                double accum = 0.0;\n                double dev = 0.0;\n                double accum2 = 0.0;\n                for (int i = begin; i < begin + length; i++) {\n                    dev = values[i] - mean;\n                    accum += weights[i] * (dev * dev);\n                    accum2 += weights[i] * dev;\n                }\n\n                double sumWts = 0;\n                for (int i = 0; i < weights.length; i++) {\n                    sumWts += weights[i];\n                }\n\n                if (isBiasCorrected) {\n                    var = (accum - (accum2 * accum2 / sumWts)) / (sumWts - 1.0);\n                } else {\n                    var = (accum - (accum2 * accum2 / sumWts)) / sumWts;\n                }\n            }\n        }\n        return var;\n    }", "javadoc_start_line": 456, "annotations_start_line": 501, "method_start_line": 502, "end_line": 532}, "steps": [], "generation_failure": {"error": "Failed to generate stacktrace", "error_message": "Command failed: codeql database analyze ./projects/Math/41/codeql-db ./projects/Math/41/codeql/java/ql/src/99_Custom/stacktrace-methods-testEvaluateArraySegmentWeighted-evaluate.ql --format=csv --output ./projects/Math/41/results/stacktrace-methods-testEvaluateArraySegmentWeighted-evaluate.csv --search-path ./projects/Math/41/codeql\nRunning queries.\nCompiling query plan for /home/balfroim/Documents/Shomidacode/script/projects/Math/41/codeql/java/ql/src/99_Custom/stacktrace-methods-testEvaluateArraySegmentWeighted-evaluate.ql.\nERROR: no viable parse for input '(\\n\\n)', expecting one of : 'any', 'avg', 'boolean', 'count', 'date', 'exists', 'false', 'float', 'forall', 'forex', 'if', 'int', 'max', 'min', 'not', 'none', 'rank', 'result', 'strictcount', 'strictsum', 'strictconcat', 'concat', 'string', 'sum', 'super', 'this', 'true', '-', '(', '[', '+', Lowerid, Upperid, Atlowerid, Integer, Float, String (/home/balfroim/Documents/Shomidacode/script/projects/Math/41/codeql/java/ql/src/99_Custom/stacktrace-methods-testEvaluateArraySegmentWeighted-evaluate.ql:13,1-2)\nERROR: 'call_order' is not bound to a value. (/home/balfroim/Documents/Shomidacode/script/projects/Math/41/codeql/java/ql/src/99_Custom/stacktrace-methods-testEvaluateArraySegmentWeighted-evaluate.ql:11,31-45)\n\n"}}], "project": {"name": "Math", "version": 41}}