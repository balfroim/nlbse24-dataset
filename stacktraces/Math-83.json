{"tours": [{"failing_test": {"className": " org.apache.commons.math.optimization.linear.SimplexSolverTest", "methodName": "testMath286", "error": "junit.framework.AssertionFailedError", "message": "expected:<6.9> but was:<4.6000000000000005>"}, "patched_method": {"file_path": "/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java", "method_name": "getSolution", "content": "    /**\n     * Get the current solution.\n     * \n     * @return current solution\n     */\n    protected RealPointValuePair getSolution() {\n      double[] coefficients = new double[getOriginalNumDecisionVariables()];\n      Integer negativeVarBasicRow = getBasicRow(getNegativeDecisionVariableOffset());\n      double mostNegative = negativeVarBasicRow == null ? 0 : getEntry(negativeVarBasicRow, getRhsOffset());\n      Set<Integer> basicRows = new HashSet<Integer>();\n      for (int i = 0; i < coefficients.length; i++) {\n          Integer basicRow = getBasicRow(getNumObjectiveFunctions() + i);\n          if (basicRows.contains(basicRow)) {\n              // if multiple variables can take a given value \n              // then we choose the first and set the rest equal to 0\n              coefficients[i] = 0;\n          } else {\n              basicRows.add(basicRow);\n              coefficients[i] =\n                  (basicRow == null ? 0 : getEntry(basicRow, getRhsOffset())) -\n                  (restrictToNonNegative ? 0 : mostNegative);\n          }\n      }\n        return new RealPointValuePair(coefficients, f.getValue(coefficients));\n    }", "javadoc_start_line": 334, "annotations_start_line": 339, "method_start_line": 339, "end_line": 358}, "steps": [{"file_path": "/src/test/java/org/apache/commons/math/optimization/linear/SimplexSolverTest.java", "method_name": "testMath286", "content": "    public void testMath286() throws OptimizationException {\n      LinearObjectiveFunction f = new LinearObjectiveFunction(new double[] { 0.2, 0.3 }, 0 );\n      Collection<LinearConstraint> constraints = new ArrayList<LinearConstraint>();\n      constraints.add(new LinearConstraint(new double[] { 1, 1 }, Relationship.EQ, 23.0));\n\n      RealPointValuePair solution = new SimplexSolver().optimize(f, constraints, GoalType.MAXIMIZE, true);\n      assertEquals(6.9, solution.getValue(), .0000001);\n    }", "javadoc_start_line": 52, "annotations_start_line": 51, "method_start_line": 52, "end_line": 59}, {"file_path": "/src/main/java/org/apache/commons/math/optimization/linear/AbstractLinearOptimizer.java", "method_name": "optimize", "content": "    /** {@inheritDoc} */\n    public RealPointValuePair optimize(final LinearObjectiveFunction f,\n                                       final Collection<LinearConstraint> constraints,\n                                       final GoalType goalType, final boolean restrictToNonNegative)\n         throws OptimizationException {\n\n        // store linear problem characteristics\n        this.f                     = f;\n        this.constraints           = constraints;\n        this.goalType              = goalType;\n        this.restrictToNonNegative = restrictToNonNegative;\n\n        iterations  = 0;\n\n        // solve the problem\n        return doOptimize();\n\n    }", "javadoc_start_line": 91, "annotations_start_line": 92, "method_start_line": 95, "end_line": 108}, {"file_path": "/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java", "method_name": "doOptimize", "content": "    /** {@inheritDoc} */\n    @Override\n    public RealPointValuePair doOptimize()\n        throws OptimizationException {\n        final SimplexTableau tableau =\n            new SimplexTableau(f, constraints, goalType, restrictToNonNegative, epsilon);\n        solvePhase1(tableau);\n        tableau.discardArtificialVariables();\n        while (!isOptimal(tableau)) {\n            doIteration(tableau);\n        }\n        return tableau.getSolution();\n    }", "javadoc_start_line": 181, "annotations_start_line": 182, "method_start_line": 184, "end_line": 193}, {"file_path": "/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java", "method_name": "getSolution", "content": "    /**\n     * Get the current solution.\n     * \n     * @return current solution\n     */\n    protected RealPointValuePair getSolution() {\n      double[] coefficients = new double[getOriginalNumDecisionVariables()];\n      Integer negativeVarBasicRow = getBasicRow(getNegativeDecisionVariableOffset());\n      double mostNegative = negativeVarBasicRow == null ? 0 : getEntry(negativeVarBasicRow, getRhsOffset());\n      Set<Integer> basicRows = new HashSet<Integer>();\n      for (int i = 0; i < coefficients.length; i++) {\n          Integer basicRow = getBasicRow(getNumObjectiveFunctions() + i);\n          if (basicRows.contains(basicRow)) {\n              // if multiple variables can take a given value \n              // then we choose the first and set the rest equal to 0\n              coefficients[i] = 0;\n          } else {\n              basicRows.add(basicRow);\n              coefficients[i] =\n                  (basicRow == null ? 0 : getEntry(basicRow, getRhsOffset())) -\n                  (restrictToNonNegative ? 0 : mostNegative);\n          }\n      }\n        return new RealPointValuePair(coefficients, f.getValue(coefficients));\n    }", "javadoc_start_line": 334, "annotations_start_line": 339, "method_start_line": 339, "end_line": 358}]}, {"failing_test": {"className": " org.apache.commons.math.optimization.linear.SimplexSolverTest", "methodName": "testMath286", "error": "junit.framework.AssertionFailedError", "message": "expected:<6.9> but was:<4.6000000000000005>"}, "patched_method": {"file_path": "/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java", "method_name": "getBasicRow", "content": "    /**\n     * Checks whether the given column is basic.\n     * @param col index of the column to check\n     * @return the row that the variable is basic in.  null if the column is not basic\n     */\n    private Integer getBasicRow(final int col, boolean ignoreObjectiveRows) {\n        Integer row = null;\n        int start = getNumObjectiveFunctions();\n        for (int i = start; i < getHeight(); i++) {\n            if (MathUtils.equals(getEntry(i, col), 1.0, epsilon) && (row == null)) {\n                row = i;\n            } else if (!MathUtils.equals(getEntry(i, col), 0.0, epsilon)) {\n                return null;\n            }\n        }\n        return row;\n    }", "javadoc_start_line": 285, "annotations_start_line": 290, "method_start_line": 290, "end_line": 301}, "steps": [{"file_path": "/src/test/java/org/apache/commons/math/optimization/linear/SimplexSolverTest.java", "method_name": "testMath286", "content": "    public void testMath286() throws OptimizationException {\n      LinearObjectiveFunction f = new LinearObjectiveFunction(new double[] { 0.2, 0.3 }, 0 );\n      Collection<LinearConstraint> constraints = new ArrayList<LinearConstraint>();\n      constraints.add(new LinearConstraint(new double[] { 1, 1 }, Relationship.EQ, 23.0));\n\n      RealPointValuePair solution = new SimplexSolver().optimize(f, constraints, GoalType.MAXIMIZE, true);\n      assertEquals(6.9, solution.getValue(), .0000001);\n    }", "javadoc_start_line": 52, "annotations_start_line": 51, "method_start_line": 52, "end_line": 59}, {"file_path": "/src/main/java/org/apache/commons/math/optimization/linear/AbstractLinearOptimizer.java", "method_name": "optimize", "content": "    /** {@inheritDoc} */\n    public RealPointValuePair optimize(final LinearObjectiveFunction f,\n                                       final Collection<LinearConstraint> constraints,\n                                       final GoalType goalType, final boolean restrictToNonNegative)\n         throws OptimizationException {\n\n        // store linear problem characteristics\n        this.f                     = f;\n        this.constraints           = constraints;\n        this.goalType              = goalType;\n        this.restrictToNonNegative = restrictToNonNegative;\n\n        iterations  = 0;\n\n        // solve the problem\n        return doOptimize();\n\n    }", "javadoc_start_line": 91, "annotations_start_line": 92, "method_start_line": 95, "end_line": 108}, {"file_path": "/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java", "method_name": "doOptimize", "content": "    /** {@inheritDoc} */\n    @Override\n    public RealPointValuePair doOptimize()\n        throws OptimizationException {\n        final SimplexTableau tableau =\n            new SimplexTableau(f, constraints, goalType, restrictToNonNegative, epsilon);\n        solvePhase1(tableau);\n        tableau.discardArtificialVariables();\n        while (!isOptimal(tableau)) {\n            doIteration(tableau);\n        }\n        return tableau.getSolution();\n    }", "javadoc_start_line": 181, "annotations_start_line": 182, "method_start_line": 184, "end_line": 193}, {"file_path": "/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java", "method_name": "getSolution", "content": "    /**\n     * Get the current solution.\n     * \n     * @return current solution\n     */\n    protected RealPointValuePair getSolution() {\n      double[] coefficients = new double[getOriginalNumDecisionVariables()];\n      Integer negativeVarBasicRow = getBasicRow(getNegativeDecisionVariableOffset());\n      double mostNegative = negativeVarBasicRow == null ? 0 : getEntry(negativeVarBasicRow, getRhsOffset());\n      Set<Integer> basicRows = new HashSet<Integer>();\n      for (int i = 0; i < coefficients.length; i++) {\n          Integer basicRow = getBasicRow(getNumObjectiveFunctions() + i);\n          if (basicRows.contains(basicRow)) {\n              // if multiple variables can take a given value \n              // then we choose the first and set the rest equal to 0\n              coefficients[i] = 0;\n          } else {\n              basicRows.add(basicRow);\n              coefficients[i] =\n                  (basicRow == null ? 0 : getEntry(basicRow, getRhsOffset())) -\n                  (restrictToNonNegative ? 0 : mostNegative);\n          }\n      }\n        return new RealPointValuePair(coefficients, f.getValue(coefficients));\n    }", "javadoc_start_line": 334, "annotations_start_line": 339, "method_start_line": 339, "end_line": 358}, {"file_path": "/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java", "method_name": "getBasicRow", "content": "    /**\n     * Checks whether the given column is basic.\n     * @param col index of the column to check\n     * @return the row that the variable is basic in.  null if the column is not basic\n     */\n    private Integer getBasicRow(final int col) {\n        return getBasicRow(col, true);\n    }", "javadoc_start_line": 267, "annotations_start_line": 272, "method_start_line": 272, "end_line": 274}]}], "project": {"name": "Math", "version": 83}}