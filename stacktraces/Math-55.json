{"tours": [{"failing_test": {"className": " org.apache.commons.math.geometry.Vector3DTest", "methodName": "testCrossProductCancellation", "error": "junit.framework.AssertionFailedError", "message": "expected:<1.0> but was:<0.0>"}, "patched_method": {"file_path": "/src/main/java/org/apache/commons/math/geometry/Vector3D.java", "method_name": "crossProduct", "content": "  /** Compute the cross-product of two vectors.\n   * @param v1 first vector\n   * @param v2 second vector\n   * @return the cross product v1 ^ v2 as a new Vector\n   */\n  public static Vector3D crossProduct(final Vector3D v1, final Vector3D v2) {\n\n\n      // rescale both vectors without losing precision,\n      // to ensure their norm are the same order of magnitude\n\n      // we reduce cancellation errors by preconditioning,\n      // we replace v1 by v3 = v1 - rho v2 with rho chosen in order to compute\n      // v3 without loss of precision. See Kahan lecture\n      // \"Computing Cross-Products and Rotations in 2- and 3-Dimensional Euclidean Spaces\"\n      // available at http://www.cs.berkeley.edu/~wkahan/MathH110/Cross.pdf\n\n      // compute rho as an 8 bits approximation of v1.v2 / v2.v2\n\n\n      // compute cross product from v3 and v2 instead of v1 and v2\n      return new Vector3D(v1.y * v2.z - v1.z * v2.y, v1.z * v2.x - v1.x * v2.z, v1.x * v2.y - v1.y * v2.x);\n\n  }", "javadoc_start_line": 452, "annotations_start_line": 457, "method_start_line": 457, "end_line": 475}, "steps": [{"file_path": "/src/test/java/org/apache/commons/math/geometry/Vector3DTest.java", "method_name": "testCrossProductCancellation", "content": "    public void testCrossProductCancellation() {\n        Vector3D v1 = new Vector3D(9070467121.0, 4535233560.0, 1);\n        Vector3D v2 = new Vector3D(9070467123.0, 4535233561.0, 1);\n        checkVector(Vector3D.crossProduct(v1, v2), -1, 2, 1);\n\n        double scale    = FastMath.scalb(1.0, 100);\n        Vector3D big1   = new Vector3D(scale, v1);\n        Vector3D small2 = new Vector3D(1 / scale, v2);\n        checkVector(Vector3D.crossProduct(big1, small2), -1, 2, 1);\n\n    }", "javadoc_start_line": 156, "annotations_start_line": 155, "method_start_line": 156, "end_line": 166}, {"file_path": "/src/main/java/org/apache/commons/math/geometry/Vector3D.java", "method_name": "crossProduct", "content": "  /** Compute the cross-product of two vectors.\n   * @param v1 first vector\n   * @param v2 second vector\n   * @return the cross product v1 ^ v2 as a new Vector\n   */\n  public static Vector3D crossProduct(final Vector3D v1, final Vector3D v2) {\n\n\n      // rescale both vectors without losing precision,\n      // to ensure their norm are the same order of magnitude\n\n      // we reduce cancellation errors by preconditioning,\n      // we replace v1 by v3 = v1 - rho v2 with rho chosen in order to compute\n      // v3 without loss of precision. See Kahan lecture\n      // \"Computing Cross-Products and Rotations in 2- and 3-Dimensional Euclidean Spaces\"\n      // available at http://www.cs.berkeley.edu/~wkahan/MathH110/Cross.pdf\n\n      // compute rho as an 8 bits approximation of v1.v2 / v2.v2\n\n\n      // compute cross product from v3 and v2 instead of v1 and v2\n      return new Vector3D(v1.y * v2.z - v1.z * v2.y, v1.z * v2.x - v1.x * v2.z, v1.x * v2.y - v1.y * v2.x);\n\n  }", "javadoc_start_line": 452, "annotations_start_line": 457, "method_start_line": 457, "end_line": 475}]}], "project": {"name": "Math", "version": 55}}