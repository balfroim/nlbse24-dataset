{"tours": [{"failing_test": {"className": " org.apache.commons.math.stat.descriptive.SummaryStatisticsTest", "methodName": "testOverrideMeanWithMathClass", "error": "junit.framework.AssertionFailedError", "message": "expected:<2.5> but was:<NaN>"}, "patched_method": {"file_path": "/src/main/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java", "method_name": "addValue", "content": "    /**\n     * Add a value to the data\n     * @param value the value to add\n     */\n    public void addValue(double value) {\n        sumImpl.increment(value);\n        sumsqImpl.increment(value);\n        minImpl.increment(value);\n        maxImpl.increment(value);\n        sumLogImpl.increment(value);\n        secondMoment.increment(value);\n        // If mean, variance or geomean have been overridden,\n        // need to increment these\n        if (!(meanImpl instanceof Mean)) {\n            meanImpl.increment(value);\n        }\n        if (!(varianceImpl instanceof Variance)) {\n            varianceImpl.increment(value);\n        }\n        if (!(geoMeanImpl instanceof GeometricMean)) {\n            geoMeanImpl.increment(value);\n        }\n        n++;\n    }", "javadoc_start_line": 145, "annotations_start_line": 149, "method_start_line": 149, "end_line": 168}, "steps": [{"file_path": "/src/test/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java", "method_name": "testOverrideMeanWithMathClass", "content": "    public void testOverrideMeanWithMathClass() throws Exception {\n        double[] scores = {1, 2, 3, 4};\n        SummaryStatistics stats = new SummaryStatistics();\n        stats.setMeanImpl(new Mean()); \n        for(double i : scores) {\n          stats.addValue(i);\n        }\n        Assert.assertEquals((new Mean()).evaluate(scores),stats.getMean(), 0); \n    }", "javadoc_start_line": 328, "annotations_start_line": 327, "method_start_line": 328, "end_line": 336}, {"file_path": "/src/main/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java", "method_name": "addValue", "content": "    /**\n     * Add a value to the data\n     * @param value the value to add\n     */\n    public void addValue(double value) {\n        sumImpl.increment(value);\n        sumsqImpl.increment(value);\n        minImpl.increment(value);\n        maxImpl.increment(value);\n        sumLogImpl.increment(value);\n        secondMoment.increment(value);\n        // If mean, variance or geomean have been overridden,\n        // need to increment these\n        if (!(meanImpl instanceof Mean)) {\n            meanImpl.increment(value);\n        }\n        if (!(varianceImpl instanceof Variance)) {\n            varianceImpl.increment(value);\n        }\n        if (!(geoMeanImpl instanceof GeometricMean)) {\n            geoMeanImpl.increment(value);\n        }\n        n++;\n    }", "javadoc_start_line": 145, "annotations_start_line": 149, "method_start_line": 149, "end_line": 168}]}, {"failing_test": {"className": " org.apache.commons.math.stat.descriptive.SummaryStatisticsTest", "methodName": "testOverrideGeoMeanWithMathClass", "error": "junit.framework.AssertionFailedError", "message": "expected:<2.213363839400643> but was:<NaN>"}, "patched_method": {"file_path": "/src/main/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java", "method_name": "addValue", "content": "    /**\n     * Add a value to the data\n     * @param value the value to add\n     */\n    public void addValue(double value) {\n        sumImpl.increment(value);\n        sumsqImpl.increment(value);\n        minImpl.increment(value);\n        maxImpl.increment(value);\n        sumLogImpl.increment(value);\n        secondMoment.increment(value);\n        // If mean, variance or geomean have been overridden,\n        // need to increment these\n        if (!(meanImpl instanceof Mean)) {\n            meanImpl.increment(value);\n        }\n        if (!(varianceImpl instanceof Variance)) {\n            varianceImpl.increment(value);\n        }\n        if (!(geoMeanImpl instanceof GeometricMean)) {\n            geoMeanImpl.increment(value);\n        }\n        n++;\n    }", "javadoc_start_line": 145, "annotations_start_line": 149, "method_start_line": 149, "end_line": 168}, "steps": [{"file_path": "/src/test/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java", "method_name": "testOverrideGeoMeanWithMathClass", "content": "    public void testOverrideGeoMeanWithMathClass() throws Exception {\n        double[] scores = {1, 2, 3, 4};\n        SummaryStatistics stats = new SummaryStatistics();\n        stats.setGeoMeanImpl(new GeometricMean()); \n        for(double i : scores) {\n          stats.addValue(i);\n        }\n        Assert.assertEquals((new GeometricMean()).evaluate(scores),stats.getGeometricMean(), 0); \n    }", "javadoc_start_line": 339, "annotations_start_line": 338, "method_start_line": 339, "end_line": 347}, {"file_path": "/src/main/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java", "method_name": "addValue", "content": "    /**\n     * Add a value to the data\n     * @param value the value to add\n     */\n    public void addValue(double value) {\n        sumImpl.increment(value);\n        sumsqImpl.increment(value);\n        minImpl.increment(value);\n        maxImpl.increment(value);\n        sumLogImpl.increment(value);\n        secondMoment.increment(value);\n        // If mean, variance or geomean have been overridden,\n        // need to increment these\n        if (!(meanImpl instanceof Mean)) {\n            meanImpl.increment(value);\n        }\n        if (!(varianceImpl instanceof Variance)) {\n            varianceImpl.increment(value);\n        }\n        if (!(geoMeanImpl instanceof GeometricMean)) {\n            geoMeanImpl.increment(value);\n        }\n        n++;\n    }", "javadoc_start_line": 145, "annotations_start_line": 149, "method_start_line": 149, "end_line": 168}]}, {"failing_test": {"className": " org.apache.commons.math.stat.descriptive.SummaryStatisticsTest", "methodName": "testOverrideVarianceWithMathClass", "error": "junit.framework.AssertionFailedError", "message": "expected:<1.25> but was:<NaN>"}, "patched_method": {"file_path": "/src/main/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java", "method_name": "addValue", "content": "    /**\n     * Add a value to the data\n     * @param value the value to add\n     */\n    public void addValue(double value) {\n        sumImpl.increment(value);\n        sumsqImpl.increment(value);\n        minImpl.increment(value);\n        maxImpl.increment(value);\n        sumLogImpl.increment(value);\n        secondMoment.increment(value);\n        // If mean, variance or geomean have been overridden,\n        // need to increment these\n        if (!(meanImpl instanceof Mean)) {\n            meanImpl.increment(value);\n        }\n        if (!(varianceImpl instanceof Variance)) {\n            varianceImpl.increment(value);\n        }\n        if (!(geoMeanImpl instanceof GeometricMean)) {\n            geoMeanImpl.increment(value);\n        }\n        n++;\n    }", "javadoc_start_line": 145, "annotations_start_line": 149, "method_start_line": 149, "end_line": 168}, "steps": [{"file_path": "/src/test/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java", "method_name": "testOverrideVarianceWithMathClass", "content": "    /**\n     * JIRA: MATH-691\n     */\n    @Test\n    public void testOverrideVarianceWithMathClass() throws Exception {\n        double[] scores = {1, 2, 3, 4};\n        SummaryStatistics stats = new SummaryStatistics();\n        stats.setVarianceImpl(new Variance(false)); //use \"population variance\"\n        for(double i : scores) {\n          stats.addValue(i);\n        }\n        Assert.assertEquals((new Variance(false)).evaluate(scores),stats.getVariance(), 0); \n    }", "javadoc_start_line": 313, "annotations_start_line": 316, "method_start_line": 317, "end_line": 325}, {"file_path": "/src/main/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java", "method_name": "addValue", "content": "    /**\n     * Add a value to the data\n     * @param value the value to add\n     */\n    public void addValue(double value) {\n        sumImpl.increment(value);\n        sumsqImpl.increment(value);\n        minImpl.increment(value);\n        maxImpl.increment(value);\n        sumLogImpl.increment(value);\n        secondMoment.increment(value);\n        // If mean, variance or geomean have been overridden,\n        // need to increment these\n        if (!(meanImpl instanceof Mean)) {\n            meanImpl.increment(value);\n        }\n        if (!(varianceImpl instanceof Variance)) {\n            varianceImpl.increment(value);\n        }\n        if (!(geoMeanImpl instanceof GeometricMean)) {\n            geoMeanImpl.increment(value);\n        }\n        n++;\n    }", "javadoc_start_line": 145, "annotations_start_line": 149, "method_start_line": 149, "end_line": 168}]}, {"failing_test": {"className": " org.apache.commons.math.stat.descriptive.SynchronizedSummaryStatisticsTest", "methodName": "testOverrideMeanWithMathClass", "error": "junit.framework.AssertionFailedError", "message": "expected:<2.5> but was:<NaN>"}, "patched_method": {"file_path": "/src/main/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java", "method_name": "addValue", "content": "    /**\n     * Add a value to the data\n     * @param value the value to add\n     */\n    public void addValue(double value) {\n        sumImpl.increment(value);\n        sumsqImpl.increment(value);\n        minImpl.increment(value);\n        maxImpl.increment(value);\n        sumLogImpl.increment(value);\n        secondMoment.increment(value);\n        // If mean, variance or geomean have been overridden,\n        // need to increment these\n        if (!(meanImpl instanceof Mean)) {\n            meanImpl.increment(value);\n        }\n        if (!(varianceImpl instanceof Variance)) {\n            varianceImpl.increment(value);\n        }\n        if (!(geoMeanImpl instanceof GeometricMean)) {\n            geoMeanImpl.increment(value);\n        }\n        n++;\n    }", "javadoc_start_line": 145, "annotations_start_line": 149, "method_start_line": 149, "end_line": 168}, "steps": [{"file_path": "/src/test/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java", "method_name": "testOverrideMeanWithMathClass", "content": "    public void testOverrideMeanWithMathClass() throws Exception {\n        double[] scores = {1, 2, 3, 4};\n        SummaryStatistics stats = new SummaryStatistics();\n        stats.setMeanImpl(new Mean()); \n        for(double i : scores) {\n          stats.addValue(i);\n        }\n        Assert.assertEquals((new Mean()).evaluate(scores),stats.getMean(), 0); \n    }", "javadoc_start_line": 328, "annotations_start_line": 327, "method_start_line": 328, "end_line": 336}, {"file_path": "/src/main/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java", "method_name": "addValue", "content": "    /**\n     * Add a value to the data\n     * @param value the value to add\n     */\n    public void addValue(double value) {\n        sumImpl.increment(value);\n        sumsqImpl.increment(value);\n        minImpl.increment(value);\n        maxImpl.increment(value);\n        sumLogImpl.increment(value);\n        secondMoment.increment(value);\n        // If mean, variance or geomean have been overridden,\n        // need to increment these\n        if (!(meanImpl instanceof Mean)) {\n            meanImpl.increment(value);\n        }\n        if (!(varianceImpl instanceof Variance)) {\n            varianceImpl.increment(value);\n        }\n        if (!(geoMeanImpl instanceof GeometricMean)) {\n            geoMeanImpl.increment(value);\n        }\n        n++;\n    }", "javadoc_start_line": 145, "annotations_start_line": 149, "method_start_line": 149, "end_line": 168}]}, {"failing_test": {"className": " org.apache.commons.math.stat.descriptive.SynchronizedSummaryStatisticsTest", "methodName": "testOverrideGeoMeanWithMathClass", "error": "junit.framework.AssertionFailedError", "message": "expected:<2.213363839400643> but was:<NaN>"}, "patched_method": {"file_path": "/src/main/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java", "method_name": "addValue", "content": "    /**\n     * Add a value to the data\n     * @param value the value to add\n     */\n    public void addValue(double value) {\n        sumImpl.increment(value);\n        sumsqImpl.increment(value);\n        minImpl.increment(value);\n        maxImpl.increment(value);\n        sumLogImpl.increment(value);\n        secondMoment.increment(value);\n        // If mean, variance or geomean have been overridden,\n        // need to increment these\n        if (!(meanImpl instanceof Mean)) {\n            meanImpl.increment(value);\n        }\n        if (!(varianceImpl instanceof Variance)) {\n            varianceImpl.increment(value);\n        }\n        if (!(geoMeanImpl instanceof GeometricMean)) {\n            geoMeanImpl.increment(value);\n        }\n        n++;\n    }", "javadoc_start_line": 145, "annotations_start_line": 149, "method_start_line": 149, "end_line": 168}, "steps": [{"file_path": "/src/test/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java", "method_name": "testOverrideGeoMeanWithMathClass", "content": "    public void testOverrideGeoMeanWithMathClass() throws Exception {\n        double[] scores = {1, 2, 3, 4};\n        SummaryStatistics stats = new SummaryStatistics();\n        stats.setGeoMeanImpl(new GeometricMean()); \n        for(double i : scores) {\n          stats.addValue(i);\n        }\n        Assert.assertEquals((new GeometricMean()).evaluate(scores),stats.getGeometricMean(), 0); \n    }", "javadoc_start_line": 339, "annotations_start_line": 338, "method_start_line": 339, "end_line": 347}, {"file_path": "/src/main/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java", "method_name": "addValue", "content": "    /**\n     * Add a value to the data\n     * @param value the value to add\n     */\n    public void addValue(double value) {\n        sumImpl.increment(value);\n        sumsqImpl.increment(value);\n        minImpl.increment(value);\n        maxImpl.increment(value);\n        sumLogImpl.increment(value);\n        secondMoment.increment(value);\n        // If mean, variance or geomean have been overridden,\n        // need to increment these\n        if (!(meanImpl instanceof Mean)) {\n            meanImpl.increment(value);\n        }\n        if (!(varianceImpl instanceof Variance)) {\n            varianceImpl.increment(value);\n        }\n        if (!(geoMeanImpl instanceof GeometricMean)) {\n            geoMeanImpl.increment(value);\n        }\n        n++;\n    }", "javadoc_start_line": 145, "annotations_start_line": 149, "method_start_line": 149, "end_line": 168}]}, {"failing_test": {"className": " org.apache.commons.math.stat.descriptive.SynchronizedSummaryStatisticsTest", "methodName": "testOverrideVarianceWithMathClass", "error": "junit.framework.AssertionFailedError", "message": "expected:<1.25> but was:<NaN>"}, "patched_method": {"file_path": "/src/main/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java", "method_name": "addValue", "content": "    /**\n     * Add a value to the data\n     * @param value the value to add\n     */\n    public void addValue(double value) {\n        sumImpl.increment(value);\n        sumsqImpl.increment(value);\n        minImpl.increment(value);\n        maxImpl.increment(value);\n        sumLogImpl.increment(value);\n        secondMoment.increment(value);\n        // If mean, variance or geomean have been overridden,\n        // need to increment these\n        if (!(meanImpl instanceof Mean)) {\n            meanImpl.increment(value);\n        }\n        if (!(varianceImpl instanceof Variance)) {\n            varianceImpl.increment(value);\n        }\n        if (!(geoMeanImpl instanceof GeometricMean)) {\n            geoMeanImpl.increment(value);\n        }\n        n++;\n    }", "javadoc_start_line": 145, "annotations_start_line": 149, "method_start_line": 149, "end_line": 168}, "steps": [{"file_path": "/src/test/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java", "method_name": "testOverrideVarianceWithMathClass", "content": "    /**\n     * JIRA: MATH-691\n     */\n    @Test\n    public void testOverrideVarianceWithMathClass() throws Exception {\n        double[] scores = {1, 2, 3, 4};\n        SummaryStatistics stats = new SummaryStatistics();\n        stats.setVarianceImpl(new Variance(false)); //use \"population variance\"\n        for(double i : scores) {\n          stats.addValue(i);\n        }\n        Assert.assertEquals((new Variance(false)).evaluate(scores),stats.getVariance(), 0); \n    }", "javadoc_start_line": 313, "annotations_start_line": 316, "method_start_line": 317, "end_line": 325}, {"file_path": "/src/main/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java", "method_name": "addValue", "content": "    /**\n     * Add a value to the data\n     * @param value the value to add\n     */\n    public void addValue(double value) {\n        sumImpl.increment(value);\n        sumsqImpl.increment(value);\n        minImpl.increment(value);\n        maxImpl.increment(value);\n        sumLogImpl.increment(value);\n        secondMoment.increment(value);\n        // If mean, variance or geomean have been overridden,\n        // need to increment these\n        if (!(meanImpl instanceof Mean)) {\n            meanImpl.increment(value);\n        }\n        if (!(varianceImpl instanceof Variance)) {\n            varianceImpl.increment(value);\n        }\n        if (!(geoMeanImpl instanceof GeometricMean)) {\n            geoMeanImpl.increment(value);\n        }\n        n++;\n    }", "javadoc_start_line": 145, "annotations_start_line": 149, "method_start_line": 149, "end_line": 168}]}], "project": {"name": "Math", "version": 43}}