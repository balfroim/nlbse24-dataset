{"tours": [{"failing_test": {"className": " org.apache.commons.lang.ClassUtilsTest", "methodName": "test_getShortClassName_Class", "error": "junit.framework.ComparisonFailure", "message": "expected:<String[[]]> but was:<String[;]>"}, "patched_method": {"file_path": "/src/java/org/apache/commons/lang/ClassUtils.java", "method_name": "getPackageName", "content": "    /**\n     * <p>Gets the package name from a <code>String</code>.</p>\n     *\n     * <p>The string passed in is assumed to be a class name - it is not checked.</p>\n     * <p>If the class is unpackaged, return an empty string.</p>\n     *\n     * @param className  the className to get the package name for, may be <code>null</code>\n     * @return the package name or an empty string\n     */\n    public static String getPackageName(String className) {\n        if (className == null) {\n            return StringUtils.EMPTY;\n        }\n\n        // Strip array encoding\n        // Strip Object type encoding\n\n        int i = className.lastIndexOf(PACKAGE_SEPARATOR_CHAR);\n        if (i == -1) {\n            return StringUtils.EMPTY;\n        }\n        return className.substring(0, i);\n    }", "javadoc_start_line": 235, "annotations_start_line": 244, "method_start_line": 244, "end_line": 257}, "steps": [], "generation_failure": {"error": "Failed to generate stacktrace", "error_message": "[Errno 2] No such file or directory: './projects/Lang/41/results/stacktrace-test_getShortClassName_Class-getPackageName.csv'"}}, {"failing_test": {"className": " org.apache.commons.lang.ClassUtilsTest", "methodName": "test_getShortClassName_Class", "error": "junit.framework.ComparisonFailure", "message": "expected:<String[[]]> but was:<String[;]>"}, "patched_method": {"file_path": "/src/java/org/apache/commons/lang/ClassUtils.java", "method_name": "getShortClassName", "content": "    /**\n     * <p>Gets the class name minus the package name from a String.</p>\n     *\n     * <p>The string passed in is assumed to be a class name - it is not checked.</p>\n     *\n     * @param className  the className to get the short name for\n     * @return the class name of the class without the package name or an empty string\n     */\n    public static String getShortClassName(String className) {\n        if (className == null) {\n            return StringUtils.EMPTY;\n        }\n        if (className.length() == 0) {\n            return StringUtils.EMPTY;\n        }\n\n\n        // Handle array encoding\n            // Strip Object type encoding\n\n\n        int lastDotIdx = className.lastIndexOf(PACKAGE_SEPARATOR_CHAR);\n        int innerIdx = className.indexOf(\n                INNER_CLASS_SEPARATOR_CHAR, lastDotIdx == -1 ? 0 : lastDotIdx + 1);\n        String out = className.substring(lastDotIdx + 1);\n        if (innerIdx != -1) {\n            out = out.replace(INNER_CLASS_SEPARATOR_CHAR, PACKAGE_SEPARATOR_CHAR);\n        }\n        return out;\n    }", "javadoc_start_line": 175, "annotations_start_line": 183, "method_start_line": 183, "end_line": 204}, "steps": [{"file_path": "/src/test/org/apache/commons/lang/ClassUtilsTest.java", "method_name": "test_getShortClassName_Class", "content": "    public void test_getShortClassName_Class() {\n        assertEquals(\"ClassUtils\", ClassUtils.getShortClassName(ClassUtils.class));\n        assertEquals(\"Map.Entry\", ClassUtils.getShortClassName(Map.Entry.class));\n        assertEquals(\"\", ClassUtils.getShortClassName((Class) null));\n\n        // LANG-535\n        assertEquals(\"String[]\", ClassUtils.getShortClassName(String[].class));\n        assertEquals(\"Map.Entry[]\", ClassUtils.getShortClassName(Map.Entry[].class));\n\n        // Primitives\n        assertEquals(\"boolean\", ClassUtils.getShortClassName(boolean.class));\n        assertEquals(\"byte\", ClassUtils.getShortClassName(byte.class));\n        assertEquals(\"char\", ClassUtils.getShortClassName(char.class));\n        assertEquals(\"short\", ClassUtils.getShortClassName(short.class));\n        assertEquals(\"int\", ClassUtils.getShortClassName(int.class));\n        assertEquals(\"long\", ClassUtils.getShortClassName(long.class));\n        assertEquals(\"float\", ClassUtils.getShortClassName(float.class));\n        assertEquals(\"double\", ClassUtils.getShortClassName(double.class));\n\n        // Primitive Arrays\n        assertEquals(\"boolean[]\", ClassUtils.getShortClassName(boolean[].class));\n        assertEquals(\"byte[]\", ClassUtils.getShortClassName(byte[].class));\n        assertEquals(\"char[]\", ClassUtils.getShortClassName(char[].class));\n        assertEquals(\"short[]\", ClassUtils.getShortClassName(short[].class));\n        assertEquals(\"int[]\", ClassUtils.getShortClassName(int[].class));\n        assertEquals(\"long[]\", ClassUtils.getShortClassName(long[].class));\n        assertEquals(\"float[]\", ClassUtils.getShortClassName(float[].class));\n        assertEquals(\"double[]\", ClassUtils.getShortClassName(double[].class));\n\n        // Arrays of arrays of ...\n        assertEquals(\"String[][]\", ClassUtils.getShortClassName(String[][].class));\n        assertEquals(\"String[][][]\", ClassUtils.getShortClassName(String[][][].class));\n        assertEquals(\"String[][][][]\", ClassUtils.getShortClassName(String[][][][].class));\n    }", "javadoc_start_line": 91, "annotations_start_line": 91, "method_start_line": 91, "end_line": 124}, {"file_path": "/src/java/org/apache/commons/lang/ClassUtils.java", "method_name": "getShortClassName", "content": "    /**\n     * <p>Gets the class name minus the package name from a <code>Class</code>.</p>\n     *\n     * @param cls  the class to get the short name for.\n     * @return the class name without the package name or an empty string\n     */\n    public static String getShortClassName(Class<?> cls) {\n        if (cls == null) {\n            return StringUtils.EMPTY;\n        }\n        return getShortClassName(cls.getName());\n    }", "javadoc_start_line": 162, "annotations_start_line": 168, "method_start_line": 168, "end_line": 173}]}, {"failing_test": {"className": " org.apache.commons.lang.ClassUtilsTest", "methodName": "test_getPackageName_Class", "error": "junit.framework.ComparisonFailure", "message": "expected:<[]java.lang> but was:<[[L]java.lang>"}, "patched_method": {"file_path": "/src/java/org/apache/commons/lang/ClassUtils.java", "method_name": "getPackageName", "content": "    /**\n     * <p>Gets the package name from a <code>String</code>.</p>\n     *\n     * <p>The string passed in is assumed to be a class name - it is not checked.</p>\n     * <p>If the class is unpackaged, return an empty string.</p>\n     *\n     * @param className  the className to get the package name for, may be <code>null</code>\n     * @return the package name or an empty string\n     */\n    public static String getPackageName(String className) {\n        if (className == null) {\n            return StringUtils.EMPTY;\n        }\n\n        // Strip array encoding\n        // Strip Object type encoding\n\n        int i = className.lastIndexOf(PACKAGE_SEPARATOR_CHAR);\n        if (i == -1) {\n            return StringUtils.EMPTY;\n        }\n        return className.substring(0, i);\n    }", "javadoc_start_line": 235, "annotations_start_line": 244, "method_start_line": 244, "end_line": 257}, "steps": [{"file_path": "/src/test/org/apache/commons/lang/ClassUtilsTest.java", "method_name": "test_getPackageName_Class", "content": "    public void test_getPackageName_Class() {\n        assertEquals(\"java.lang\", ClassUtils.getPackageName(String.class));\n        assertEquals(\"java.util\", ClassUtils.getPackageName(Map.Entry.class));\n        assertEquals(\"\", ClassUtils.getPackageName((Class)null));\n\n        // LANG-535\n        assertEquals(\"java.lang\", ClassUtils.getPackageName(String[].class));\n\n        // Primitive Arrays\n        assertEquals(\"\", ClassUtils.getPackageName(boolean[].class));\n        assertEquals(\"\", ClassUtils.getPackageName(byte[].class));\n        assertEquals(\"\", ClassUtils.getPackageName(char[].class));\n        assertEquals(\"\", ClassUtils.getPackageName(short[].class));\n        assertEquals(\"\", ClassUtils.getPackageName(int[].class));\n        assertEquals(\"\", ClassUtils.getPackageName(long[].class));\n        assertEquals(\"\", ClassUtils.getPackageName(float[].class));\n        assertEquals(\"\", ClassUtils.getPackageName(double[].class));\n\n        // Arrays of arrays of ...\n        assertEquals(\"java.lang\", ClassUtils.getPackageName(String[][].class));\n        assertEquals(\"java.lang\", ClassUtils.getPackageName(String[][][].class));\n        assertEquals(\"java.lang\", ClassUtils.getPackageName(String[][][][].class));\n    }", "javadoc_start_line": 140, "annotations_start_line": 140, "method_start_line": 140, "end_line": 162}, {"file_path": "/src/java/org/apache/commons/lang/ClassUtils.java", "method_name": "getPackageName", "content": "    /**\n     * <p>Gets the package name of a <code>Class</code>.</p>\n     *\n     * @param cls  the class to get the package name for, may be <code>null</code>.\n     * @return the package name or an empty string\n     */\n    public static String getPackageName(Class<?> cls) {\n        if (cls == null) {\n            return StringUtils.EMPTY;\n        }\n        return getPackageName(cls.getName());\n    }", "javadoc_start_line": 222, "annotations_start_line": 228, "method_start_line": 228, "end_line": 233}]}, {"failing_test": {"className": " org.apache.commons.lang.ClassUtilsTest", "methodName": "test_getPackageName_Class", "error": "junit.framework.ComparisonFailure", "message": "expected:<[]java.lang> but was:<[[L]java.lang>"}, "patched_method": {"file_path": "/src/java/org/apache/commons/lang/ClassUtils.java", "method_name": "getShortClassName", "content": "    /**\n     * <p>Gets the class name minus the package name from a String.</p>\n     *\n     * <p>The string passed in is assumed to be a class name - it is not checked.</p>\n     *\n     * @param className  the className to get the short name for\n     * @return the class name of the class without the package name or an empty string\n     */\n    public static String getShortClassName(String className) {\n        if (className == null) {\n            return StringUtils.EMPTY;\n        }\n        if (className.length() == 0) {\n            return StringUtils.EMPTY;\n        }\n\n\n        // Handle array encoding\n            // Strip Object type encoding\n\n\n        int lastDotIdx = className.lastIndexOf(PACKAGE_SEPARATOR_CHAR);\n        int innerIdx = className.indexOf(\n                INNER_CLASS_SEPARATOR_CHAR, lastDotIdx == -1 ? 0 : lastDotIdx + 1);\n        String out = className.substring(lastDotIdx + 1);\n        if (innerIdx != -1) {\n            out = out.replace(INNER_CLASS_SEPARATOR_CHAR, PACKAGE_SEPARATOR_CHAR);\n        }\n        return out;\n    }", "javadoc_start_line": 175, "annotations_start_line": 183, "method_start_line": 183, "end_line": 204}, "steps": [], "generation_failure": {"error": "Failed to generate stacktrace", "error_message": "[Errno 2] No such file or directory: './projects/Lang/41/results/stacktrace-test_getPackageName_Class-getShortClassName.csv'"}}], "project": {"name": "Lang", "version": 41}}