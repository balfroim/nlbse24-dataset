{"tours": [{"failing_test": {"className": " org.apache.commons.math3.dfp.DfpTest", "methodName": "testMultiply", "error": "junit.framework.AssertionFailedError", "message": "assersion failed Multiply #37 x = NaN flags = 1"}, "patched_method": {"file_path": "/src/main/java/org/apache/commons/math3/dfp/Dfp.java", "method_name": "multiply", "content": "    /** Multiply this by a single digit x.\n     * @param x multiplicand\n     * @return product of this and x\n     */\n    public Dfp multiply(final int x) {\n            return multiplyFast(x);\n    }", "javadoc_start_line": 1598, "annotations_start_line": 1602, "method_start_line": 1602, "end_line": 1604}, "steps": [{"file_path": "/src/test/java/org/apache/commons/math3/dfp/DfpTest.java", "method_name": "testMultiply", "content": "    public void testMultiply()\n    {\n        test(field.newDfp(\"1\").multiply(field.newDfp(\"1\")),      // Basic tests   1*1 = 1\n             field.newDfp(\"1\"),\n             0, \"Multiply #1\");\n\n        test(field.newDfp(\"1\").multiply(1),             // Basic tests   1*1 = 1\n             field.newDfp(\"1\"),\n             0, \"Multiply #2\");\n\n        test(field.newDfp(\"-1\").multiply(field.newDfp(\"1\")),     // Basic tests   -1*1 = -1\n             field.newDfp(\"-1\"),\n             0, \"Multiply #3\");\n\n        test(field.newDfp(\"-1\").multiply(1),            // Basic tests   -1*1 = -1\n             field.newDfp(\"-1\"),\n             0, \"Multiply #4\");\n\n        // basic tests with integers\n        test(field.newDfp(\"2\").multiply(field.newDfp(\"3\")),\n             field.newDfp(\"6\"),\n             0, \"Multiply #5\");\n\n        test(field.newDfp(\"2\").multiply(3),\n             field.newDfp(\"6\"),\n             0, \"Multiply #6\");\n\n        test(field.newDfp(\"-2\").multiply(field.newDfp(\"3\")),\n             field.newDfp(\"-6\"),\n             0, \"Multiply #7\");\n\n        test(field.newDfp(\"-2\").multiply(3),\n             field.newDfp(\"-6\"),\n             0, \"Multiply #8\");\n\n        test(field.newDfp(\"2\").multiply(field.newDfp(\"-3\")),\n             field.newDfp(\"-6\"),\n             0, \"Multiply #9\");\n\n        test(field.newDfp(\"-2\").multiply(field.newDfp(\"-3\")),\n             field.newDfp(\"6\"),\n             0, \"Multiply #10\");\n\n        //multiply by zero\n\n        test(field.newDfp(\"-2\").multiply(field.newDfp(\"0\")),\n             field.newDfp(\"-0\"),\n             0, \"Multiply #11\");\n\n        test(field.newDfp(\"-2\").multiply(0),\n             field.newDfp(\"-0\"),\n             0, \"Multiply #12\");\n\n        test(field.newDfp(\"2\").multiply(field.newDfp(\"0\")),\n             field.newDfp(\"0\"),\n             0, \"Multiply #13\");\n\n        test(field.newDfp(\"2\").multiply(0),\n             field.newDfp(\"0\"),\n             0, \"Multiply #14\");\n\n        test(field.newDfp(\"2\").multiply(pinf),\n             pinf,\n             0, \"Multiply #15\");\n\n        test(field.newDfp(\"2\").multiply(ninf),\n             ninf,\n             0, \"Multiply #16\");\n\n        test(field.newDfp(\"-2\").multiply(pinf),\n             ninf,\n             0, \"Multiply #17\");\n\n        test(field.newDfp(\"-2\").multiply(ninf),\n             pinf,\n             0, \"Multiply #18\");\n\n        test(ninf.multiply(field.newDfp(\"-2\")),\n             pinf,\n             0, \"Multiply #18.1\");\n\n        test(field.newDfp(\"5e131071\").multiply(2),\n             pinf,\n             DfpField.FLAG_OVERFLOW, \"Multiply #19\");\n\n        test(field.newDfp(\"5e131071\").multiply(field.newDfp(\"1.999999999999999\")),\n             field.newDfp(\"9.9999999999999950000e131071\"),\n             0, \"Multiply #20\");\n\n        test(field.newDfp(\"-5e131071\").multiply(2),\n             ninf,\n             DfpField.FLAG_OVERFLOW, \"Multiply #22\");\n\n        test(field.newDfp(\"-5e131071\").multiply(field.newDfp(\"1.999999999999999\")),\n             field.newDfp(\"-9.9999999999999950000e131071\"),\n             0, \"Multiply #23\");\n\n        test(field.newDfp(\"1e-65539\").multiply(field.newDfp(\"1e-65539\")),\n             field.newDfp(\"1e-131078\"),\n             DfpField.FLAG_UNDERFLOW, \"Multiply #24\");\n\n        test(field.newDfp(\"1\").multiply(nan),\n             nan,\n             0, \"Multiply #25\");\n\n        test(nan.multiply(field.newDfp(\"1\")),\n             nan,\n             0, \"Multiply #26\");\n\n        test(nan.multiply(pinf),\n             nan,\n             0, \"Multiply #27\");\n\n        test(pinf.multiply(nan),\n             nan,\n             0, \"Multiply #27\");\n\n        test(pinf.multiply(field.newDfp(\"0\")),\n             nan,\n             DfpField.FLAG_INVALID, \"Multiply #28\");\n\n        test(field.newDfp(\"0\").multiply(pinf),\n             nan,\n             DfpField.FLAG_INVALID, \"Multiply #29\");\n\n        test(pinf.multiply(pinf),\n             pinf,\n             0, \"Multiply #30\");\n\n        test(ninf.multiply(pinf),\n             ninf,\n             0, \"Multiply #31\");\n\n        test(pinf.multiply(ninf),\n             ninf,\n             0, \"Multiply #32\");\n\n        test(ninf.multiply(ninf),\n             pinf,\n             0, \"Multiply #33\");\n\n        test(pinf.multiply(1),\n             pinf,\n             0, \"Multiply #34\");\n\n        test(pinf.multiply(0),\n             nan,\n             DfpField.FLAG_INVALID, \"Multiply #35\");\n\n        test(nan.multiply(1),\n             nan,\n             0, \"Multiply #36\");\n\n        test(field.newDfp(\"1\").multiply(10000),\n             field.newDfp(\"10000\"),\n             0, \"Multiply #37\");\n\n        test(field.newDfp(\"2\").multiply(1000000),\n             field.newDfp(\"2000000\"),\n             0, \"Multiply #38\");\n\n        test(field.newDfp(\"1\").multiply(-1),\n             field.newDfp(\"-1\"),\n             0, \"Multiply #39\");\n    }", "javadoc_start_line": 756, "annotations_start_line": 755, "method_start_line": 757, "end_line": 920}, {"file_path": "/src/main/java/org/apache/commons/math3/dfp/Dfp.java", "method_name": "multiply", "content": "    /** Multiply this by a single digit x.\n     * @param x multiplicand\n     * @return product of this and x\n     */\n    public Dfp multiply(final int x) {\n            return multiplyFast(x);\n    }", "javadoc_start_line": 1598, "annotations_start_line": 1602, "method_start_line": 1602, "end_line": 1604}]}], "project": {"name": "Math", "version": 17}}