{"tours": [{"failing_test": {"className": " com.google.javascript.jscomp.CollapseVariableDeclarationsTest", "methodName": "testIssue820", "error": "junit.framework.AssertionFailedError", "message": ""}, "patched_method": {"file_path": "/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java", "method_name": "canBeRedeclared", "content": "    private boolean canBeRedeclared(Node n, Scope s) {\n      if (!NodeUtil.isExprAssign(n)) {\n        return false;\n      }\n      Node assign = n.getFirstChild();\n      Node lhs = assign.getFirstChild();\n\n      if (!lhs.isName()) {\n        return false;\n      }\n\n      Var var = s.getVar(lhs.getString());\n      return var != null\n          && var.getScope() == s\n          && !blacklistedVars.contains(var);\n    }", "javadoc_start_line": 190, "annotations_start_line": 190, "method_start_line": 190, "end_line": 205}, "steps": [{"file_path": "/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java", "method_name": "process", "content": "  public void process(Node externs, Node root) {\n    collapses.clear();\n    nodesToCollapse.clear();\n\n    NodeTraversal.traverse(compiler, root, new GatherCollapses());\n\n    if (!collapses.isEmpty()) {\n      applyCollapses();\n      compiler.reportCodeChange();\n    }\n  }", "javadoc_start_line": 109, "annotations_start_line": 108, "method_start_line": 109, "end_line": 119}, {"file_path": "/src/com/google/javascript/jscomp/NodeTraversal.java", "method_name": "traverse", "content": "  /**\n   * Traverses a node recursively.\n   */\n  public static void traverse(\n      AbstractCompiler compiler, Node root, Callback cb) {\n    NodeTraversal t = new NodeTraversal(compiler, cb);\n    t.traverse(root);\n  }", "javadoc_start_line": 450, "annotations_start_line": 453, "method_start_line": 454, "end_line": 457}, {"file_path": "/src/com/google/javascript/jscomp/NodeTraversal.java", "method_name": "traverse", "content": "  /**\n   * Traverses a parse tree recursively.\n   */\n  public void traverse(Node root) {\n    try {\n      inputId = NodeUtil.getInputId(root);\n      sourceName = \"\";\n      curNode = root;\n      pushScope(root);\n      traverseBranch(root, null);\n      popScope();\n    } catch (Exception unexpectedException) {\n      throwUnexpectedException(unexpectedException);\n    }\n  }", "javadoc_start_line": 268, "annotations_start_line": 271, "method_start_line": 271, "end_line": 282}, {"file_path": "/src/com/google/javascript/jscomp/NodeTraversal.java", "method_name": "traverseBranch", "content": "  /**\n   * Traverses a branch.\n   */\n  @SuppressWarnings(\"fallthrough\")\n  private void traverseBranch(Node n, Node parent) {\n    int type = n.getType();\n    if (type == Token.SCRIPT) {\n      inputId = n.getInputId();\n      sourceName = getSourceName(n);\n    }\n\n    curNode = n;\n    if (!callback.shouldTraverse(this, n, parent)) return;\n\n    switch (type) {\n      case Token.FUNCTION:\n        traverseFunction(n, parent);\n        break;\n\n      default:\n        for (Node child = n.getFirstChild(); child != null; ) {\n          // child could be replaced, in which case our child node\n          // would no longer point to the true next\n          Node next = child.getNext();\n          traverseBranch(child, n);\n          child = next;\n        }\n        break;\n    }\n\n    curNode = n;\n    callback.visit(this, n, parent);\n  }", "javadoc_start_line": 474, "annotations_start_line": 477, "method_start_line": 478, "end_line": 506}]}], "project": {"name": "Closure", "version": 8}}