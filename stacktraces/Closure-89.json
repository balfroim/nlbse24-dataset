{"tours": [{"failing_test": {"className": " com.google.javascript.jscomp.CollapsePropertiesTest", "methodName": "testAddPropertyToChildOfUncollapsibleFunctionInLocalScope", "error": "junit.framework.AssertionFailedError", "message": ""}, "patched_method": {"file_path": "/src/com/google/javascript/jscomp/GlobalNamespace.java", "method_name": "canCollapseUnannotatedChildNames", "content": "    boolean canCollapseUnannotatedChildNames() {\n      if (type == Type.OTHER || globalSets != 1 || localSets != 0) {\n        return false;\n      }\n\n      // Don't try to collapse if the one global set is a twin reference.\n      // We could theoretically handle this case in CollapseProperties, but\n      // it's probably not worth the effort.\n      Preconditions.checkNotNull(declaration);\n      if (declaration.getTwin() != null) {\n        return false;\n      }\n\n      if (isClassOrEnum) {\n        return true;\n      }\n\n      // If this is a key of an aliased object literal, then it will be aliased\n      // later. So we won't be able to collapse its properties.\n      if (parent != null && parent.shouldKeepKeys()) {\n        return false;\n      }\n\n      // If this is aliased, then its properties can't be collapsed either.\n      if (type != Type.FUNCTION && aliasingGets > 0) {\n        return false;\n      }\n\n      return (parent == null || parent.canCollapseUnannotatedChildNames());\n    }", "javadoc_start_line": 896, "annotations_start_line": 896, "method_start_line": 896, "end_line": 925}, "steps": [{"file_path": "/src/com/google/javascript/jscomp/CollapseProperties.java", "method_name": "process", "content": "  public void process(Node externs, Node root) {\n    GlobalNamespace namespace;\n    if (collapsePropertiesOnExternTypes) {\n      namespace = new GlobalNamespace(compiler, externs, root);\n    } else {\n      namespace = new GlobalNamespace(compiler, root);\n    }\n\n    if (inlineAliases) {\n      inlineAliases(namespace);\n    }\n    nameMap = namespace.getNameIndex();\n    globalNames = namespace.getNameForest();\n    checkNamespaces();\n\n    for (Name n : globalNames) {\n      flattenReferencesToCollapsibleDescendantNames(n, n.name);\n    }\n\n    // We collapse property definitions after collapsing property references\n    // because this step can alter the parse tree above property references,\n    // invalidating the node ancestry stored with each reference.\n    for (Name n : globalNames) {\n      collapseDeclarationOfNameAndDescendants(n, n.name);\n    }\n  }", "javadoc_start_line": 116, "annotations_start_line": 115, "method_start_line": 116, "end_line": 141}, {"file_path": "/src/com/google/javascript/jscomp/CollapseProperties.java", "method_name": "collapseDeclarationOfNameAndDescendants", "content": "  /**\n   * Collapses definitions of the collapsible properties of a global name.\n   * Recurses on subnames that also represent JavaScript objects with\n   * collapsible properties.\n   *\n   * @param n A node representing a global name\n   * @param alias The flattened name for {@code n}\n   */\n  private void collapseDeclarationOfNameAndDescendants(Name n, String alias) {\n    boolean canCollapseChildNames = n.canCollapseUnannotatedChildNames();\n\n    // Handle this name first so that nested object literals get unrolled.\n    if (n.canCollapse() && canCollapseChildNames) {\n      updateObjLitOrFunctionDeclaration(n, alias);\n    }\n\n    if (n.props != null) {\n      for (Name p : n.props) {\n        // Recurse first so that saved node ancestries are intact when needed.\n        collapseDeclarationOfNameAndDescendants(\n            p, appendPropForAlias(alias, p.name));\n\n        if (!p.inExterns && canCollapseChildNames && p.declaration != null &&\n            p.declaration.node != null &&\n            p.declaration.node.getParent() != null &&\n            p.declaration.node.getParent().getType() == Token.ASSIGN) {\n          updateSimpleDeclaration(\n              appendPropForAlias(alias, p.name), p, p.declaration);\n        }\n      }\n    }\n  }", "javadoc_start_line": 433, "annotations_start_line": 441, "method_start_line": 441, "end_line": 464}]}, {"failing_test": {"className": " com.google.javascript.jscomp.CollapsePropertiesTest", "methodName": "testAddPropertyToChildOfUncollapsibleFunctionInLocalScope", "error": "junit.framework.AssertionFailedError", "message": ""}, "patched_method": {"file_path": "/src/com/google/javascript/jscomp/CollapseProperties.java", "method_name": "updateSimpleDeclaration", "content": "  /**\n   * Updates the initial assignment to a collapsible property at global scope\n   * by changing it to a variable declaration (e.g. a.b = 1 -> var a$b = 1).\n   * The property's value may either be a primitive or an object literal or\n   * function whose properties aren't collapsible.\n   *\n   * @param alias The flattened property name (e.g. \"a$b\")\n   * @param refName The name for the reference being updated.\n   * @param ref An object containing information about the assignment getting\n   *     updated\n   */\n  private void updateSimpleDeclaration(String alias, Name refName, Ref ref) {\n    Node rvalue = ref.node.getNext();\n    Node parent = ref.node.getParent();\n    Node gramps = parent.getParent();\n    Node greatGramps = gramps.getParent();\n    Node greatGreatGramps = greatGramps.getParent();\n\n\n    // Create the new alias node.\n    Node nameNode = NodeUtil.newName(\n        compiler.getCodingConvention(), alias, gramps.getFirstChild(),\n        refName.fullName());\n    NodeUtil.copyNameAnnotations(ref.node.getLastChild(), nameNode);\n\n    if (gramps.getType() == Token.EXPR_RESULT) {\n      // BEFORE: a.b.c = ...;\n      //   exprstmt\n      //     assign\n      //       getprop\n      //         getprop\n      //           name a\n      //           string b\n      //         string c\n      //       NODE\n      // AFTER: var a$b$c = ...;\n      //   var\n      //     name a$b$c\n      //       NODE\n\n      // Remove the rvalue (NODE).\n      parent.removeChild(rvalue);\n      nameNode.addChildToFront(rvalue);\n\n      Node varNode = new Node(Token.VAR, nameNode);\n      greatGramps.replaceChild(gramps, varNode);\n    } else {\n      // This must be a complex assignment.\n      Preconditions.checkNotNull(ref.getTwin());\n\n      // BEFORE:\n      // ... (x.y = 3);\n      //\n      // AFTER:\n      // var x$y;\n      // ... (x$y = 3);\n\n      Node current = gramps;\n      Node currentParent = gramps.getParent();\n      for (; currentParent.getType() != Token.SCRIPT &&\n             currentParent.getType() != Token.BLOCK;\n           current = currentParent,\n           currentParent = currentParent.getParent()) {}\n\n      // Create a stub variable declaration right\n      // before the current statement.\n      Node stubVar = new Node(Token.VAR, nameNode.cloneTree())\n          .copyInformationFrom(nameNode);\n      currentParent.addChildBefore(stubVar, current);\n\n      parent.replaceChild(ref.node, nameNode);\n    }\n\n    compiler.reportCodeChange();\n  }", "javadoc_start_line": 466, "annotations_start_line": 477, "method_start_line": 477, "end_line": 540}, "steps": [], "generation_failure": {"error": "Failed to generate stacktrace", "error_message": "[Errno 2] No such file or directory: './projects/Closure/89/results/stacktrace-testAddPropertyToChildOfUncollapsibleFunctionInLocalScope-updateSimpleDeclaration.csv'"}}, {"failing_test": {"className": " com.google.javascript.jscomp.CollapsePropertiesTest", "methodName": "testAliasCreatedForFunctionDepth1_1", "error": "junit.framework.AssertionFailedError", "message": ""}, "patched_method": {"file_path": "/src/com/google/javascript/jscomp/GlobalNamespace.java", "method_name": "canCollapseUnannotatedChildNames", "content": "    boolean canCollapseUnannotatedChildNames() {\n      if (type == Type.OTHER || globalSets != 1 || localSets != 0) {\n        return false;\n      }\n\n      // Don't try to collapse if the one global set is a twin reference.\n      // We could theoretically handle this case in CollapseProperties, but\n      // it's probably not worth the effort.\n      Preconditions.checkNotNull(declaration);\n      if (declaration.getTwin() != null) {\n        return false;\n      }\n\n      if (isClassOrEnum) {\n        return true;\n      }\n\n      // If this is a key of an aliased object literal, then it will be aliased\n      // later. So we won't be able to collapse its properties.\n      if (parent != null && parent.shouldKeepKeys()) {\n        return false;\n      }\n\n      // If this is aliased, then its properties can't be collapsed either.\n      if (type != Type.FUNCTION && aliasingGets > 0) {\n        return false;\n      }\n\n      return (parent == null || parent.canCollapseUnannotatedChildNames());\n    }", "javadoc_start_line": 896, "annotations_start_line": 896, "method_start_line": 896, "end_line": 925}, "steps": [{"file_path": "/src/com/google/javascript/jscomp/CollapseProperties.java", "method_name": "process", "content": "  public void process(Node externs, Node root) {\n    GlobalNamespace namespace;\n    if (collapsePropertiesOnExternTypes) {\n      namespace = new GlobalNamespace(compiler, externs, root);\n    } else {\n      namespace = new GlobalNamespace(compiler, root);\n    }\n\n    if (inlineAliases) {\n      inlineAliases(namespace);\n    }\n    nameMap = namespace.getNameIndex();\n    globalNames = namespace.getNameForest();\n    checkNamespaces();\n\n    for (Name n : globalNames) {\n      flattenReferencesToCollapsibleDescendantNames(n, n.name);\n    }\n\n    // We collapse property definitions after collapsing property references\n    // because this step can alter the parse tree above property references,\n    // invalidating the node ancestry stored with each reference.\n    for (Name n : globalNames) {\n      collapseDeclarationOfNameAndDescendants(n, n.name);\n    }\n  }", "javadoc_start_line": 116, "annotations_start_line": 115, "method_start_line": 116, "end_line": 141}, {"file_path": "/src/com/google/javascript/jscomp/CollapseProperties.java", "method_name": "collapseDeclarationOfNameAndDescendants", "content": "  /**\n   * Collapses definitions of the collapsible properties of a global name.\n   * Recurses on subnames that also represent JavaScript objects with\n   * collapsible properties.\n   *\n   * @param n A node representing a global name\n   * @param alias The flattened name for {@code n}\n   */\n  private void collapseDeclarationOfNameAndDescendants(Name n, String alias) {\n    boolean canCollapseChildNames = n.canCollapseUnannotatedChildNames();\n\n    // Handle this name first so that nested object literals get unrolled.\n    if (n.canCollapse() && canCollapseChildNames) {\n      updateObjLitOrFunctionDeclaration(n, alias);\n    }\n\n    if (n.props != null) {\n      for (Name p : n.props) {\n        // Recurse first so that saved node ancestries are intact when needed.\n        collapseDeclarationOfNameAndDescendants(\n            p, appendPropForAlias(alias, p.name));\n\n        if (!p.inExterns && canCollapseChildNames && p.declaration != null &&\n            p.declaration.node != null &&\n            p.declaration.node.getParent() != null &&\n            p.declaration.node.getParent().getType() == Token.ASSIGN) {\n          updateSimpleDeclaration(\n              appendPropForAlias(alias, p.name), p, p.declaration);\n        }\n      }\n    }\n  }", "javadoc_start_line": 433, "annotations_start_line": 441, "method_start_line": 441, "end_line": 464}, {"file_path": "/src/com/google/javascript/jscomp/CollapseProperties.java", "method_name": "collapseDeclarationOfNameAndDescendants", "content": "  /**\n   * Collapses definitions of the collapsible properties of a global name.\n   * Recurses on subnames that also represent JavaScript objects with\n   * collapsible properties.\n   *\n   * @param n A node representing a global name\n   * @param alias The flattened name for {@code n}\n   */\n  private void collapseDeclarationOfNameAndDescendants(Name n, String alias) {\n    boolean canCollapseChildNames = n.canCollapseUnannotatedChildNames();\n\n    // Handle this name first so that nested object literals get unrolled.\n    if (n.canCollapse() && canCollapseChildNames) {\n      updateObjLitOrFunctionDeclaration(n, alias);\n    }\n\n    if (n.props != null) {\n      for (Name p : n.props) {\n        // Recurse first so that saved node ancestries are intact when needed.\n        collapseDeclarationOfNameAndDescendants(\n            p, appendPropForAlias(alias, p.name));\n\n        if (!p.inExterns && canCollapseChildNames && p.declaration != null &&\n            p.declaration.node != null &&\n            p.declaration.node.getParent() != null &&\n            p.declaration.node.getParent().getType() == Token.ASSIGN) {\n          updateSimpleDeclaration(\n              appendPropForAlias(alias, p.name), p, p.declaration);\n        }\n      }\n    }\n  }", "javadoc_start_line": 433, "annotations_start_line": 441, "method_start_line": 441, "end_line": 464}]}, {"failing_test": {"className": " com.google.javascript.jscomp.CollapsePropertiesTest", "methodName": "testAliasCreatedForFunctionDepth1_1", "error": "junit.framework.AssertionFailedError", "message": ""}, "patched_method": {"file_path": "/src/com/google/javascript/jscomp/CollapseProperties.java", "method_name": "updateSimpleDeclaration", "content": "  /**\n   * Updates the initial assignment to a collapsible property at global scope\n   * by changing it to a variable declaration (e.g. a.b = 1 -> var a$b = 1).\n   * The property's value may either be a primitive or an object literal or\n   * function whose properties aren't collapsible.\n   *\n   * @param alias The flattened property name (e.g. \"a$b\")\n   * @param refName The name for the reference being updated.\n   * @param ref An object containing information about the assignment getting\n   *     updated\n   */\n  private void updateSimpleDeclaration(String alias, Name refName, Ref ref) {\n    Node rvalue = ref.node.getNext();\n    Node parent = ref.node.getParent();\n    Node gramps = parent.getParent();\n    Node greatGramps = gramps.getParent();\n    Node greatGreatGramps = greatGramps.getParent();\n\n\n    // Create the new alias node.\n    Node nameNode = NodeUtil.newName(\n        compiler.getCodingConvention(), alias, gramps.getFirstChild(),\n        refName.fullName());\n    NodeUtil.copyNameAnnotations(ref.node.getLastChild(), nameNode);\n\n    if (gramps.getType() == Token.EXPR_RESULT) {\n      // BEFORE: a.b.c = ...;\n      //   exprstmt\n      //     assign\n      //       getprop\n      //         getprop\n      //           name a\n      //           string b\n      //         string c\n      //       NODE\n      // AFTER: var a$b$c = ...;\n      //   var\n      //     name a$b$c\n      //       NODE\n\n      // Remove the rvalue (NODE).\n      parent.removeChild(rvalue);\n      nameNode.addChildToFront(rvalue);\n\n      Node varNode = new Node(Token.VAR, nameNode);\n      greatGramps.replaceChild(gramps, varNode);\n    } else {\n      // This must be a complex assignment.\n      Preconditions.checkNotNull(ref.getTwin());\n\n      // BEFORE:\n      // ... (x.y = 3);\n      //\n      // AFTER:\n      // var x$y;\n      // ... (x$y = 3);\n\n      Node current = gramps;\n      Node currentParent = gramps.getParent();\n      for (; currentParent.getType() != Token.SCRIPT &&\n             currentParent.getType() != Token.BLOCK;\n           current = currentParent,\n           currentParent = currentParent.getParent()) {}\n\n      // Create a stub variable declaration right\n      // before the current statement.\n      Node stubVar = new Node(Token.VAR, nameNode.cloneTree())\n          .copyInformationFrom(nameNode);\n      currentParent.addChildBefore(stubVar, current);\n\n      parent.replaceChild(ref.node, nameNode);\n    }\n\n    compiler.reportCodeChange();\n  }", "javadoc_start_line": 466, "annotations_start_line": 477, "method_start_line": 477, "end_line": 540}, "steps": [{"file_path": "/src/com/google/javascript/jscomp/CollapseProperties.java", "method_name": "process", "content": "  public void process(Node externs, Node root) {\n    GlobalNamespace namespace;\n    if (collapsePropertiesOnExternTypes) {\n      namespace = new GlobalNamespace(compiler, externs, root);\n    } else {\n      namespace = new GlobalNamespace(compiler, root);\n    }\n\n    if (inlineAliases) {\n      inlineAliases(namespace);\n    }\n    nameMap = namespace.getNameIndex();\n    globalNames = namespace.getNameForest();\n    checkNamespaces();\n\n    for (Name n : globalNames) {\n      flattenReferencesToCollapsibleDescendantNames(n, n.name);\n    }\n\n    // We collapse property definitions after collapsing property references\n    // because this step can alter the parse tree above property references,\n    // invalidating the node ancestry stored with each reference.\n    for (Name n : globalNames) {\n      collapseDeclarationOfNameAndDescendants(n, n.name);\n    }\n  }", "javadoc_start_line": 116, "annotations_start_line": 115, "method_start_line": 116, "end_line": 141}, {"file_path": "/src/com/google/javascript/jscomp/CollapseProperties.java", "method_name": "collapseDeclarationOfNameAndDescendants", "content": "  /**\n   * Collapses definitions of the collapsible properties of a global name.\n   * Recurses on subnames that also represent JavaScript objects with\n   * collapsible properties.\n   *\n   * @param n A node representing a global name\n   * @param alias The flattened name for {@code n}\n   */\n  private void collapseDeclarationOfNameAndDescendants(Name n, String alias) {\n    boolean canCollapseChildNames = n.canCollapseUnannotatedChildNames();\n\n    // Handle this name first so that nested object literals get unrolled.\n    if (n.canCollapse() && canCollapseChildNames) {\n      updateObjLitOrFunctionDeclaration(n, alias);\n    }\n\n    if (n.props != null) {\n      for (Name p : n.props) {\n        // Recurse first so that saved node ancestries are intact when needed.\n        collapseDeclarationOfNameAndDescendants(\n            p, appendPropForAlias(alias, p.name));\n\n        if (!p.inExterns && canCollapseChildNames && p.declaration != null &&\n            p.declaration.node != null &&\n            p.declaration.node.getParent() != null &&\n            p.declaration.node.getParent().getType() == Token.ASSIGN) {\n          updateSimpleDeclaration(\n              appendPropForAlias(alias, p.name), p, p.declaration);\n        }\n      }\n    }\n  }", "javadoc_start_line": 433, "annotations_start_line": 441, "method_start_line": 441, "end_line": 464}, {"file_path": "/src/com/google/javascript/jscomp/CollapseProperties.java", "method_name": "updateSimpleDeclaration", "content": "  /**\n   * Updates the initial assignment to a collapsible property at global scope\n   * by changing it to a variable declaration (e.g. a.b = 1 -> var a$b = 1).\n   * The property's value may either be a primitive or an object literal or\n   * function whose properties aren't collapsible.\n   *\n   * @param alias The flattened property name (e.g. \"a$b\")\n   * @param refName The name for the reference being updated.\n   * @param ref An object containing information about the assignment getting\n   *     updated\n   */\n  private void updateSimpleDeclaration(String alias, Name refName, Ref ref) {\n    Node rvalue = ref.node.getNext();\n    Node parent = ref.node.getParent();\n    Node gramps = parent.getParent();\n    Node greatGramps = gramps.getParent();\n    Node greatGreatGramps = greatGramps.getParent();\n\n\n    // Create the new alias node.\n    Node nameNode = NodeUtil.newName(\n        compiler.getCodingConvention(), alias, gramps.getFirstChild(),\n        refName.fullName());\n    NodeUtil.copyNameAnnotations(ref.node.getLastChild(), nameNode);\n\n    if (gramps.getType() == Token.EXPR_RESULT) {\n      // BEFORE: a.b.c = ...;\n      //   exprstmt\n      //     assign\n      //       getprop\n      //         getprop\n      //           name a\n      //           string b\n      //         string c\n      //       NODE\n      // AFTER: var a$b$c = ...;\n      //   var\n      //     name a$b$c\n      //       NODE\n\n      // Remove the rvalue (NODE).\n      parent.removeChild(rvalue);\n      nameNode.addChildToFront(rvalue);\n\n      Node varNode = new Node(Token.VAR, nameNode);\n      greatGramps.replaceChild(gramps, varNode);\n    } else {\n      // This must be a complex assignment.\n      Preconditions.checkNotNull(ref.getTwin());\n\n      // BEFORE:\n      // ... (x.y = 3);\n      //\n      // AFTER:\n      // var x$y;\n      // ... (x$y = 3);\n\n      Node current = gramps;\n      Node currentParent = gramps.getParent();\n      for (; currentParent.getType() != Token.SCRIPT &&\n             currentParent.getType() != Token.BLOCK;\n           current = currentParent,\n           currentParent = currentParent.getParent()) {}\n\n      // Create a stub variable declaration right\n      // before the current statement.\n      Node stubVar = new Node(Token.VAR, nameNode.cloneTree())\n          .copyInformationFrom(nameNode);\n      currentParent.addChildBefore(stubVar, current);\n\n      parent.replaceChild(ref.node, nameNode);\n    }\n\n    compiler.reportCodeChange();\n  }", "javadoc_start_line": 466, "annotations_start_line": 477, "method_start_line": 477, "end_line": 540}]}, {"failing_test": {"className": " com.google.javascript.jscomp.CollapsePropertiesTest", "methodName": "testAliasCreatedForFunctionDepth1_2", "error": "junit.framework.AssertionFailedError", "message": ""}, "patched_method": {"file_path": "/src/com/google/javascript/jscomp/GlobalNamespace.java", "method_name": "canCollapseUnannotatedChildNames", "content": "    boolean canCollapseUnannotatedChildNames() {\n      if (type == Type.OTHER || globalSets != 1 || localSets != 0) {\n        return false;\n      }\n\n      // Don't try to collapse if the one global set is a twin reference.\n      // We could theoretically handle this case in CollapseProperties, but\n      // it's probably not worth the effort.\n      Preconditions.checkNotNull(declaration);\n      if (declaration.getTwin() != null) {\n        return false;\n      }\n\n      if (isClassOrEnum) {\n        return true;\n      }\n\n      // If this is a key of an aliased object literal, then it will be aliased\n      // later. So we won't be able to collapse its properties.\n      if (parent != null && parent.shouldKeepKeys()) {\n        return false;\n      }\n\n      // If this is aliased, then its properties can't be collapsed either.\n      if (type != Type.FUNCTION && aliasingGets > 0) {\n        return false;\n      }\n\n      return (parent == null || parent.canCollapseUnannotatedChildNames());\n    }", "javadoc_start_line": 896, "annotations_start_line": 896, "method_start_line": 896, "end_line": 925}, "steps": [{"file_path": "/src/com/google/javascript/jscomp/CollapseProperties.java", "method_name": "process", "content": "  public void process(Node externs, Node root) {\n    GlobalNamespace namespace;\n    if (collapsePropertiesOnExternTypes) {\n      namespace = new GlobalNamespace(compiler, externs, root);\n    } else {\n      namespace = new GlobalNamespace(compiler, root);\n    }\n\n    if (inlineAliases) {\n      inlineAliases(namespace);\n    }\n    nameMap = namespace.getNameIndex();\n    globalNames = namespace.getNameForest();\n    checkNamespaces();\n\n    for (Name n : globalNames) {\n      flattenReferencesToCollapsibleDescendantNames(n, n.name);\n    }\n\n    // We collapse property definitions after collapsing property references\n    // because this step can alter the parse tree above property references,\n    // invalidating the node ancestry stored with each reference.\n    for (Name n : globalNames) {\n      collapseDeclarationOfNameAndDescendants(n, n.name);\n    }\n  }", "javadoc_start_line": 116, "annotations_start_line": 115, "method_start_line": 116, "end_line": 141}, {"file_path": "/src/com/google/javascript/jscomp/CollapseProperties.java", "method_name": "collapseDeclarationOfNameAndDescendants", "content": "  /**\n   * Collapses definitions of the collapsible properties of a global name.\n   * Recurses on subnames that also represent JavaScript objects with\n   * collapsible properties.\n   *\n   * @param n A node representing a global name\n   * @param alias The flattened name for {@code n}\n   */\n  private void collapseDeclarationOfNameAndDescendants(Name n, String alias) {\n    boolean canCollapseChildNames = n.canCollapseUnannotatedChildNames();\n\n    // Handle this name first so that nested object literals get unrolled.\n    if (n.canCollapse() && canCollapseChildNames) {\n      updateObjLitOrFunctionDeclaration(n, alias);\n    }\n\n    if (n.props != null) {\n      for (Name p : n.props) {\n        // Recurse first so that saved node ancestries are intact when needed.\n        collapseDeclarationOfNameAndDescendants(\n            p, appendPropForAlias(alias, p.name));\n\n        if (!p.inExterns && canCollapseChildNames && p.declaration != null &&\n            p.declaration.node != null &&\n            p.declaration.node.getParent() != null &&\n            p.declaration.node.getParent().getType() == Token.ASSIGN) {\n          updateSimpleDeclaration(\n              appendPropForAlias(alias, p.name), p, p.declaration);\n        }\n      }\n    }\n  }", "javadoc_start_line": 433, "annotations_start_line": 441, "method_start_line": 441, "end_line": 464}, {"file_path": "/src/com/google/javascript/jscomp/CollapseProperties.java", "method_name": "collapseDeclarationOfNameAndDescendants", "content": "  /**\n   * Collapses definitions of the collapsible properties of a global name.\n   * Recurses on subnames that also represent JavaScript objects with\n   * collapsible properties.\n   *\n   * @param n A node representing a global name\n   * @param alias The flattened name for {@code n}\n   */\n  private void collapseDeclarationOfNameAndDescendants(Name n, String alias) {\n    boolean canCollapseChildNames = n.canCollapseUnannotatedChildNames();\n\n    // Handle this name first so that nested object literals get unrolled.\n    if (n.canCollapse() && canCollapseChildNames) {\n      updateObjLitOrFunctionDeclaration(n, alias);\n    }\n\n    if (n.props != null) {\n      for (Name p : n.props) {\n        // Recurse first so that saved node ancestries are intact when needed.\n        collapseDeclarationOfNameAndDescendants(\n            p, appendPropForAlias(alias, p.name));\n\n        if (!p.inExterns && canCollapseChildNames && p.declaration != null &&\n            p.declaration.node != null &&\n            p.declaration.node.getParent() != null &&\n            p.declaration.node.getParent().getType() == Token.ASSIGN) {\n          updateSimpleDeclaration(\n              appendPropForAlias(alias, p.name), p, p.declaration);\n        }\n      }\n    }\n  }", "javadoc_start_line": 433, "annotations_start_line": 441, "method_start_line": 441, "end_line": 464}]}, {"failing_test": {"className": " com.google.javascript.jscomp.CollapsePropertiesTest", "methodName": "testAliasCreatedForFunctionDepth1_2", "error": "junit.framework.AssertionFailedError", "message": ""}, "patched_method": {"file_path": "/src/com/google/javascript/jscomp/CollapseProperties.java", "method_name": "updateSimpleDeclaration", "content": "  /**\n   * Updates the initial assignment to a collapsible property at global scope\n   * by changing it to a variable declaration (e.g. a.b = 1 -> var a$b = 1).\n   * The property's value may either be a primitive or an object literal or\n   * function whose properties aren't collapsible.\n   *\n   * @param alias The flattened property name (e.g. \"a$b\")\n   * @param refName The name for the reference being updated.\n   * @param ref An object containing information about the assignment getting\n   *     updated\n   */\n  private void updateSimpleDeclaration(String alias, Name refName, Ref ref) {\n    Node rvalue = ref.node.getNext();\n    Node parent = ref.node.getParent();\n    Node gramps = parent.getParent();\n    Node greatGramps = gramps.getParent();\n    Node greatGreatGramps = greatGramps.getParent();\n\n\n    // Create the new alias node.\n    Node nameNode = NodeUtil.newName(\n        compiler.getCodingConvention(), alias, gramps.getFirstChild(),\n        refName.fullName());\n    NodeUtil.copyNameAnnotations(ref.node.getLastChild(), nameNode);\n\n    if (gramps.getType() == Token.EXPR_RESULT) {\n      // BEFORE: a.b.c = ...;\n      //   exprstmt\n      //     assign\n      //       getprop\n      //         getprop\n      //           name a\n      //           string b\n      //         string c\n      //       NODE\n      // AFTER: var a$b$c = ...;\n      //   var\n      //     name a$b$c\n      //       NODE\n\n      // Remove the rvalue (NODE).\n      parent.removeChild(rvalue);\n      nameNode.addChildToFront(rvalue);\n\n      Node varNode = new Node(Token.VAR, nameNode);\n      greatGramps.replaceChild(gramps, varNode);\n    } else {\n      // This must be a complex assignment.\n      Preconditions.checkNotNull(ref.getTwin());\n\n      // BEFORE:\n      // ... (x.y = 3);\n      //\n      // AFTER:\n      // var x$y;\n      // ... (x$y = 3);\n\n      Node current = gramps;\n      Node currentParent = gramps.getParent();\n      for (; currentParent.getType() != Token.SCRIPT &&\n             currentParent.getType() != Token.BLOCK;\n           current = currentParent,\n           currentParent = currentParent.getParent()) {}\n\n      // Create a stub variable declaration right\n      // before the current statement.\n      Node stubVar = new Node(Token.VAR, nameNode.cloneTree())\n          .copyInformationFrom(nameNode);\n      currentParent.addChildBefore(stubVar, current);\n\n      parent.replaceChild(ref.node, nameNode);\n    }\n\n    compiler.reportCodeChange();\n  }", "javadoc_start_line": 466, "annotations_start_line": 477, "method_start_line": 477, "end_line": 540}, "steps": [{"file_path": "/src/com/google/javascript/jscomp/CollapseProperties.java", "method_name": "process", "content": "  public void process(Node externs, Node root) {\n    GlobalNamespace namespace;\n    if (collapsePropertiesOnExternTypes) {\n      namespace = new GlobalNamespace(compiler, externs, root);\n    } else {\n      namespace = new GlobalNamespace(compiler, root);\n    }\n\n    if (inlineAliases) {\n      inlineAliases(namespace);\n    }\n    nameMap = namespace.getNameIndex();\n    globalNames = namespace.getNameForest();\n    checkNamespaces();\n\n    for (Name n : globalNames) {\n      flattenReferencesToCollapsibleDescendantNames(n, n.name);\n    }\n\n    // We collapse property definitions after collapsing property references\n    // because this step can alter the parse tree above property references,\n    // invalidating the node ancestry stored with each reference.\n    for (Name n : globalNames) {\n      collapseDeclarationOfNameAndDescendants(n, n.name);\n    }\n  }", "javadoc_start_line": 116, "annotations_start_line": 115, "method_start_line": 116, "end_line": 141}, {"file_path": "/src/com/google/javascript/jscomp/CollapseProperties.java", "method_name": "collapseDeclarationOfNameAndDescendants", "content": "  /**\n   * Collapses definitions of the collapsible properties of a global name.\n   * Recurses on subnames that also represent JavaScript objects with\n   * collapsible properties.\n   *\n   * @param n A node representing a global name\n   * @param alias The flattened name for {@code n}\n   */\n  private void collapseDeclarationOfNameAndDescendants(Name n, String alias) {\n    boolean canCollapseChildNames = n.canCollapseUnannotatedChildNames();\n\n    // Handle this name first so that nested object literals get unrolled.\n    if (n.canCollapse() && canCollapseChildNames) {\n      updateObjLitOrFunctionDeclaration(n, alias);\n    }\n\n    if (n.props != null) {\n      for (Name p : n.props) {\n        // Recurse first so that saved node ancestries are intact when needed.\n        collapseDeclarationOfNameAndDescendants(\n            p, appendPropForAlias(alias, p.name));\n\n        if (!p.inExterns && canCollapseChildNames && p.declaration != null &&\n            p.declaration.node != null &&\n            p.declaration.node.getParent() != null &&\n            p.declaration.node.getParent().getType() == Token.ASSIGN) {\n          updateSimpleDeclaration(\n              appendPropForAlias(alias, p.name), p, p.declaration);\n        }\n      }\n    }\n  }", "javadoc_start_line": 433, "annotations_start_line": 441, "method_start_line": 441, "end_line": 464}, {"file_path": "/src/com/google/javascript/jscomp/CollapseProperties.java", "method_name": "updateSimpleDeclaration", "content": "  /**\n   * Updates the initial assignment to a collapsible property at global scope\n   * by changing it to a variable declaration (e.g. a.b = 1 -> var a$b = 1).\n   * The property's value may either be a primitive or an object literal or\n   * function whose properties aren't collapsible.\n   *\n   * @param alias The flattened property name (e.g. \"a$b\")\n   * @param refName The name for the reference being updated.\n   * @param ref An object containing information about the assignment getting\n   *     updated\n   */\n  private void updateSimpleDeclaration(String alias, Name refName, Ref ref) {\n    Node rvalue = ref.node.getNext();\n    Node parent = ref.node.getParent();\n    Node gramps = parent.getParent();\n    Node greatGramps = gramps.getParent();\n    Node greatGreatGramps = greatGramps.getParent();\n\n\n    // Create the new alias node.\n    Node nameNode = NodeUtil.newName(\n        compiler.getCodingConvention(), alias, gramps.getFirstChild(),\n        refName.fullName());\n    NodeUtil.copyNameAnnotations(ref.node.getLastChild(), nameNode);\n\n    if (gramps.getType() == Token.EXPR_RESULT) {\n      // BEFORE: a.b.c = ...;\n      //   exprstmt\n      //     assign\n      //       getprop\n      //         getprop\n      //           name a\n      //           string b\n      //         string c\n      //       NODE\n      // AFTER: var a$b$c = ...;\n      //   var\n      //     name a$b$c\n      //       NODE\n\n      // Remove the rvalue (NODE).\n      parent.removeChild(rvalue);\n      nameNode.addChildToFront(rvalue);\n\n      Node varNode = new Node(Token.VAR, nameNode);\n      greatGramps.replaceChild(gramps, varNode);\n    } else {\n      // This must be a complex assignment.\n      Preconditions.checkNotNull(ref.getTwin());\n\n      // BEFORE:\n      // ... (x.y = 3);\n      //\n      // AFTER:\n      // var x$y;\n      // ... (x$y = 3);\n\n      Node current = gramps;\n      Node currentParent = gramps.getParent();\n      for (; currentParent.getType() != Token.SCRIPT &&\n             currentParent.getType() != Token.BLOCK;\n           current = currentParent,\n           currentParent = currentParent.getParent()) {}\n\n      // Create a stub variable declaration right\n      // before the current statement.\n      Node stubVar = new Node(Token.VAR, nameNode.cloneTree())\n          .copyInformationFrom(nameNode);\n      currentParent.addChildBefore(stubVar, current);\n\n      parent.replaceChild(ref.node, nameNode);\n    }\n\n    compiler.reportCodeChange();\n  }", "javadoc_start_line": 466, "annotations_start_line": 477, "method_start_line": 477, "end_line": 540}]}, {"failing_test": {"className": " com.google.javascript.jscomp.CollapsePropertiesTest", "methodName": "testAliasCreatedForFunctionDepth1_3", "error": "junit.framework.AssertionFailedError", "message": ""}, "patched_method": {"file_path": "/src/com/google/javascript/jscomp/GlobalNamespace.java", "method_name": "canCollapseUnannotatedChildNames", "content": "    boolean canCollapseUnannotatedChildNames() {\n      if (type == Type.OTHER || globalSets != 1 || localSets != 0) {\n        return false;\n      }\n\n      // Don't try to collapse if the one global set is a twin reference.\n      // We could theoretically handle this case in CollapseProperties, but\n      // it's probably not worth the effort.\n      Preconditions.checkNotNull(declaration);\n      if (declaration.getTwin() != null) {\n        return false;\n      }\n\n      if (isClassOrEnum) {\n        return true;\n      }\n\n      // If this is a key of an aliased object literal, then it will be aliased\n      // later. So we won't be able to collapse its properties.\n      if (parent != null && parent.shouldKeepKeys()) {\n        return false;\n      }\n\n      // If this is aliased, then its properties can't be collapsed either.\n      if (type != Type.FUNCTION && aliasingGets > 0) {\n        return false;\n      }\n\n      return (parent == null || parent.canCollapseUnannotatedChildNames());\n    }", "javadoc_start_line": 896, "annotations_start_line": 896, "method_start_line": 896, "end_line": 925}, "steps": [{"file_path": "/src/com/google/javascript/jscomp/CollapseProperties.java", "method_name": "process", "content": "  public void process(Node externs, Node root) {\n    GlobalNamespace namespace;\n    if (collapsePropertiesOnExternTypes) {\n      namespace = new GlobalNamespace(compiler, externs, root);\n    } else {\n      namespace = new GlobalNamespace(compiler, root);\n    }\n\n    if (inlineAliases) {\n      inlineAliases(namespace);\n    }\n    nameMap = namespace.getNameIndex();\n    globalNames = namespace.getNameForest();\n    checkNamespaces();\n\n    for (Name n : globalNames) {\n      flattenReferencesToCollapsibleDescendantNames(n, n.name);\n    }\n\n    // We collapse property definitions after collapsing property references\n    // because this step can alter the parse tree above property references,\n    // invalidating the node ancestry stored with each reference.\n    for (Name n : globalNames) {\n      collapseDeclarationOfNameAndDescendants(n, n.name);\n    }\n  }", "javadoc_start_line": 116, "annotations_start_line": 115, "method_start_line": 116, "end_line": 141}, {"file_path": "/src/com/google/javascript/jscomp/CollapseProperties.java", "method_name": "collapseDeclarationOfNameAndDescendants", "content": "  /**\n   * Collapses definitions of the collapsible properties of a global name.\n   * Recurses on subnames that also represent JavaScript objects with\n   * collapsible properties.\n   *\n   * @param n A node representing a global name\n   * @param alias The flattened name for {@code n}\n   */\n  private void collapseDeclarationOfNameAndDescendants(Name n, String alias) {\n    boolean canCollapseChildNames = n.canCollapseUnannotatedChildNames();\n\n    // Handle this name first so that nested object literals get unrolled.\n    if (n.canCollapse() && canCollapseChildNames) {\n      updateObjLitOrFunctionDeclaration(n, alias);\n    }\n\n    if (n.props != null) {\n      for (Name p : n.props) {\n        // Recurse first so that saved node ancestries are intact when needed.\n        collapseDeclarationOfNameAndDescendants(\n            p, appendPropForAlias(alias, p.name));\n\n        if (!p.inExterns && canCollapseChildNames && p.declaration != null &&\n            p.declaration.node != null &&\n            p.declaration.node.getParent() != null &&\n            p.declaration.node.getParent().getType() == Token.ASSIGN) {\n          updateSimpleDeclaration(\n              appendPropForAlias(alias, p.name), p, p.declaration);\n        }\n      }\n    }\n  }", "javadoc_start_line": 433, "annotations_start_line": 441, "method_start_line": 441, "end_line": 464}, {"file_path": "/src/com/google/javascript/jscomp/CollapseProperties.java", "method_name": "collapseDeclarationOfNameAndDescendants", "content": "  /**\n   * Collapses definitions of the collapsible properties of a global name.\n   * Recurses on subnames that also represent JavaScript objects with\n   * collapsible properties.\n   *\n   * @param n A node representing a global name\n   * @param alias The flattened name for {@code n}\n   */\n  private void collapseDeclarationOfNameAndDescendants(Name n, String alias) {\n    boolean canCollapseChildNames = n.canCollapseUnannotatedChildNames();\n\n    // Handle this name first so that nested object literals get unrolled.\n    if (n.canCollapse() && canCollapseChildNames) {\n      updateObjLitOrFunctionDeclaration(n, alias);\n    }\n\n    if (n.props != null) {\n      for (Name p : n.props) {\n        // Recurse first so that saved node ancestries are intact when needed.\n        collapseDeclarationOfNameAndDescendants(\n            p, appendPropForAlias(alias, p.name));\n\n        if (!p.inExterns && canCollapseChildNames && p.declaration != null &&\n            p.declaration.node != null &&\n            p.declaration.node.getParent() != null &&\n            p.declaration.node.getParent().getType() == Token.ASSIGN) {\n          updateSimpleDeclaration(\n              appendPropForAlias(alias, p.name), p, p.declaration);\n        }\n      }\n    }\n  }", "javadoc_start_line": 433, "annotations_start_line": 441, "method_start_line": 441, "end_line": 464}]}, {"failing_test": {"className": " com.google.javascript.jscomp.CollapsePropertiesTest", "methodName": "testAliasCreatedForFunctionDepth1_3", "error": "junit.framework.AssertionFailedError", "message": ""}, "patched_method": {"file_path": "/src/com/google/javascript/jscomp/CollapseProperties.java", "method_name": "updateSimpleDeclaration", "content": "  /**\n   * Updates the initial assignment to a collapsible property at global scope\n   * by changing it to a variable declaration (e.g. a.b = 1 -> var a$b = 1).\n   * The property's value may either be a primitive or an object literal or\n   * function whose properties aren't collapsible.\n   *\n   * @param alias The flattened property name (e.g. \"a$b\")\n   * @param refName The name for the reference being updated.\n   * @param ref An object containing information about the assignment getting\n   *     updated\n   */\n  private void updateSimpleDeclaration(String alias, Name refName, Ref ref) {\n    Node rvalue = ref.node.getNext();\n    Node parent = ref.node.getParent();\n    Node gramps = parent.getParent();\n    Node greatGramps = gramps.getParent();\n    Node greatGreatGramps = greatGramps.getParent();\n\n\n    // Create the new alias node.\n    Node nameNode = NodeUtil.newName(\n        compiler.getCodingConvention(), alias, gramps.getFirstChild(),\n        refName.fullName());\n    NodeUtil.copyNameAnnotations(ref.node.getLastChild(), nameNode);\n\n    if (gramps.getType() == Token.EXPR_RESULT) {\n      // BEFORE: a.b.c = ...;\n      //   exprstmt\n      //     assign\n      //       getprop\n      //         getprop\n      //           name a\n      //           string b\n      //         string c\n      //       NODE\n      // AFTER: var a$b$c = ...;\n      //   var\n      //     name a$b$c\n      //       NODE\n\n      // Remove the rvalue (NODE).\n      parent.removeChild(rvalue);\n      nameNode.addChildToFront(rvalue);\n\n      Node varNode = new Node(Token.VAR, nameNode);\n      greatGramps.replaceChild(gramps, varNode);\n    } else {\n      // This must be a complex assignment.\n      Preconditions.checkNotNull(ref.getTwin());\n\n      // BEFORE:\n      // ... (x.y = 3);\n      //\n      // AFTER:\n      // var x$y;\n      // ... (x$y = 3);\n\n      Node current = gramps;\n      Node currentParent = gramps.getParent();\n      for (; currentParent.getType() != Token.SCRIPT &&\n             currentParent.getType() != Token.BLOCK;\n           current = currentParent,\n           currentParent = currentParent.getParent()) {}\n\n      // Create a stub variable declaration right\n      // before the current statement.\n      Node stubVar = new Node(Token.VAR, nameNode.cloneTree())\n          .copyInformationFrom(nameNode);\n      currentParent.addChildBefore(stubVar, current);\n\n      parent.replaceChild(ref.node, nameNode);\n    }\n\n    compiler.reportCodeChange();\n  }", "javadoc_start_line": 466, "annotations_start_line": 477, "method_start_line": 477, "end_line": 540}, "steps": [{"file_path": "/src/com/google/javascript/jscomp/CollapseProperties.java", "method_name": "process", "content": "  public void process(Node externs, Node root) {\n    GlobalNamespace namespace;\n    if (collapsePropertiesOnExternTypes) {\n      namespace = new GlobalNamespace(compiler, externs, root);\n    } else {\n      namespace = new GlobalNamespace(compiler, root);\n    }\n\n    if (inlineAliases) {\n      inlineAliases(namespace);\n    }\n    nameMap = namespace.getNameIndex();\n    globalNames = namespace.getNameForest();\n    checkNamespaces();\n\n    for (Name n : globalNames) {\n      flattenReferencesToCollapsibleDescendantNames(n, n.name);\n    }\n\n    // We collapse property definitions after collapsing property references\n    // because this step can alter the parse tree above property references,\n    // invalidating the node ancestry stored with each reference.\n    for (Name n : globalNames) {\n      collapseDeclarationOfNameAndDescendants(n, n.name);\n    }\n  }", "javadoc_start_line": 116, "annotations_start_line": 115, "method_start_line": 116, "end_line": 141}, {"file_path": "/src/com/google/javascript/jscomp/CollapseProperties.java", "method_name": "collapseDeclarationOfNameAndDescendants", "content": "  /**\n   * Collapses definitions of the collapsible properties of a global name.\n   * Recurses on subnames that also represent JavaScript objects with\n   * collapsible properties.\n   *\n   * @param n A node representing a global name\n   * @param alias The flattened name for {@code n}\n   */\n  private void collapseDeclarationOfNameAndDescendants(Name n, String alias) {\n    boolean canCollapseChildNames = n.canCollapseUnannotatedChildNames();\n\n    // Handle this name first so that nested object literals get unrolled.\n    if (n.canCollapse() && canCollapseChildNames) {\n      updateObjLitOrFunctionDeclaration(n, alias);\n    }\n\n    if (n.props != null) {\n      for (Name p : n.props) {\n        // Recurse first so that saved node ancestries are intact when needed.\n        collapseDeclarationOfNameAndDescendants(\n            p, appendPropForAlias(alias, p.name));\n\n        if (!p.inExterns && canCollapseChildNames && p.declaration != null &&\n            p.declaration.node != null &&\n            p.declaration.node.getParent() != null &&\n            p.declaration.node.getParent().getType() == Token.ASSIGN) {\n          updateSimpleDeclaration(\n              appendPropForAlias(alias, p.name), p, p.declaration);\n        }\n      }\n    }\n  }", "javadoc_start_line": 433, "annotations_start_line": 441, "method_start_line": 441, "end_line": 464}, {"file_path": "/src/com/google/javascript/jscomp/CollapseProperties.java", "method_name": "updateSimpleDeclaration", "content": "  /**\n   * Updates the initial assignment to a collapsible property at global scope\n   * by changing it to a variable declaration (e.g. a.b = 1 -> var a$b = 1).\n   * The property's value may either be a primitive or an object literal or\n   * function whose properties aren't collapsible.\n   *\n   * @param alias The flattened property name (e.g. \"a$b\")\n   * @param refName The name for the reference being updated.\n   * @param ref An object containing information about the assignment getting\n   *     updated\n   */\n  private void updateSimpleDeclaration(String alias, Name refName, Ref ref) {\n    Node rvalue = ref.node.getNext();\n    Node parent = ref.node.getParent();\n    Node gramps = parent.getParent();\n    Node greatGramps = gramps.getParent();\n    Node greatGreatGramps = greatGramps.getParent();\n\n\n    // Create the new alias node.\n    Node nameNode = NodeUtil.newName(\n        compiler.getCodingConvention(), alias, gramps.getFirstChild(),\n        refName.fullName());\n    NodeUtil.copyNameAnnotations(ref.node.getLastChild(), nameNode);\n\n    if (gramps.getType() == Token.EXPR_RESULT) {\n      // BEFORE: a.b.c = ...;\n      //   exprstmt\n      //     assign\n      //       getprop\n      //         getprop\n      //           name a\n      //           string b\n      //         string c\n      //       NODE\n      // AFTER: var a$b$c = ...;\n      //   var\n      //     name a$b$c\n      //       NODE\n\n      // Remove the rvalue (NODE).\n      parent.removeChild(rvalue);\n      nameNode.addChildToFront(rvalue);\n\n      Node varNode = new Node(Token.VAR, nameNode);\n      greatGramps.replaceChild(gramps, varNode);\n    } else {\n      // This must be a complex assignment.\n      Preconditions.checkNotNull(ref.getTwin());\n\n      // BEFORE:\n      // ... (x.y = 3);\n      //\n      // AFTER:\n      // var x$y;\n      // ... (x$y = 3);\n\n      Node current = gramps;\n      Node currentParent = gramps.getParent();\n      for (; currentParent.getType() != Token.SCRIPT &&\n             currentParent.getType() != Token.BLOCK;\n           current = currentParent,\n           currentParent = currentParent.getParent()) {}\n\n      // Create a stub variable declaration right\n      // before the current statement.\n      Node stubVar = new Node(Token.VAR, nameNode.cloneTree())\n          .copyInformationFrom(nameNode);\n      currentParent.addChildBefore(stubVar, current);\n\n      parent.replaceChild(ref.node, nameNode);\n    }\n\n    compiler.reportCodeChange();\n  }", "javadoc_start_line": 466, "annotations_start_line": 477, "method_start_line": 477, "end_line": 540}]}, {"failing_test": {"className": " com.google.javascript.jscomp.CollapsePropertiesTest", "methodName": "testAddPropertyToUncollapsibleNamedCtorInLocalScopeDepth1", "error": "junit.framework.AssertionFailedError", "message": ""}, "patched_method": {"file_path": "/src/com/google/javascript/jscomp/GlobalNamespace.java", "method_name": "canCollapseUnannotatedChildNames", "content": "    boolean canCollapseUnannotatedChildNames() {\n      if (type == Type.OTHER || globalSets != 1 || localSets != 0) {\n        return false;\n      }\n\n      // Don't try to collapse if the one global set is a twin reference.\n      // We could theoretically handle this case in CollapseProperties, but\n      // it's probably not worth the effort.\n      Preconditions.checkNotNull(declaration);\n      if (declaration.getTwin() != null) {\n        return false;\n      }\n\n      if (isClassOrEnum) {\n        return true;\n      }\n\n      // If this is a key of an aliased object literal, then it will be aliased\n      // later. So we won't be able to collapse its properties.\n      if (parent != null && parent.shouldKeepKeys()) {\n        return false;\n      }\n\n      // If this is aliased, then its properties can't be collapsed either.\n      if (type != Type.FUNCTION && aliasingGets > 0) {\n        return false;\n      }\n\n      return (parent == null || parent.canCollapseUnannotatedChildNames());\n    }", "javadoc_start_line": 896, "annotations_start_line": 896, "method_start_line": 896, "end_line": 925}, "steps": [{"file_path": "/src/com/google/javascript/jscomp/CollapseProperties.java", "method_name": "process", "content": "  public void process(Node externs, Node root) {\n    GlobalNamespace namespace;\n    if (collapsePropertiesOnExternTypes) {\n      namespace = new GlobalNamespace(compiler, externs, root);\n    } else {\n      namespace = new GlobalNamespace(compiler, root);\n    }\n\n    if (inlineAliases) {\n      inlineAliases(namespace);\n    }\n    nameMap = namespace.getNameIndex();\n    globalNames = namespace.getNameForest();\n    checkNamespaces();\n\n    for (Name n : globalNames) {\n      flattenReferencesToCollapsibleDescendantNames(n, n.name);\n    }\n\n    // We collapse property definitions after collapsing property references\n    // because this step can alter the parse tree above property references,\n    // invalidating the node ancestry stored with each reference.\n    for (Name n : globalNames) {\n      collapseDeclarationOfNameAndDescendants(n, n.name);\n    }\n  }", "javadoc_start_line": 116, "annotations_start_line": 115, "method_start_line": 116, "end_line": 141}, {"file_path": "/src/com/google/javascript/jscomp/CollapseProperties.java", "method_name": "collapseDeclarationOfNameAndDescendants", "content": "  /**\n   * Collapses definitions of the collapsible properties of a global name.\n   * Recurses on subnames that also represent JavaScript objects with\n   * collapsible properties.\n   *\n   * @param n A node representing a global name\n   * @param alias The flattened name for {@code n}\n   */\n  private void collapseDeclarationOfNameAndDescendants(Name n, String alias) {\n    boolean canCollapseChildNames = n.canCollapseUnannotatedChildNames();\n\n    // Handle this name first so that nested object literals get unrolled.\n    if (n.canCollapse() && canCollapseChildNames) {\n      updateObjLitOrFunctionDeclaration(n, alias);\n    }\n\n    if (n.props != null) {\n      for (Name p : n.props) {\n        // Recurse first so that saved node ancestries are intact when needed.\n        collapseDeclarationOfNameAndDescendants(\n            p, appendPropForAlias(alias, p.name));\n\n        if (!p.inExterns && canCollapseChildNames && p.declaration != null &&\n            p.declaration.node != null &&\n            p.declaration.node.getParent() != null &&\n            p.declaration.node.getParent().getType() == Token.ASSIGN) {\n          updateSimpleDeclaration(\n              appendPropForAlias(alias, p.name), p, p.declaration);\n        }\n      }\n    }\n  }", "javadoc_start_line": 433, "annotations_start_line": 441, "method_start_line": 441, "end_line": 464}]}, {"failing_test": {"className": " com.google.javascript.jscomp.CollapsePropertiesTest", "methodName": "testAddPropertyToUncollapsibleNamedCtorInLocalScopeDepth1", "error": "junit.framework.AssertionFailedError", "message": ""}, "patched_method": {"file_path": "/src/com/google/javascript/jscomp/CollapseProperties.java", "method_name": "updateSimpleDeclaration", "content": "  /**\n   * Updates the initial assignment to a collapsible property at global scope\n   * by changing it to a variable declaration (e.g. a.b = 1 -> var a$b = 1).\n   * The property's value may either be a primitive or an object literal or\n   * function whose properties aren't collapsible.\n   *\n   * @param alias The flattened property name (e.g. \"a$b\")\n   * @param refName The name for the reference being updated.\n   * @param ref An object containing information about the assignment getting\n   *     updated\n   */\n  private void updateSimpleDeclaration(String alias, Name refName, Ref ref) {\n    Node rvalue = ref.node.getNext();\n    Node parent = ref.node.getParent();\n    Node gramps = parent.getParent();\n    Node greatGramps = gramps.getParent();\n    Node greatGreatGramps = greatGramps.getParent();\n\n\n    // Create the new alias node.\n    Node nameNode = NodeUtil.newName(\n        compiler.getCodingConvention(), alias, gramps.getFirstChild(),\n        refName.fullName());\n    NodeUtil.copyNameAnnotations(ref.node.getLastChild(), nameNode);\n\n    if (gramps.getType() == Token.EXPR_RESULT) {\n      // BEFORE: a.b.c = ...;\n      //   exprstmt\n      //     assign\n      //       getprop\n      //         getprop\n      //           name a\n      //           string b\n      //         string c\n      //       NODE\n      // AFTER: var a$b$c = ...;\n      //   var\n      //     name a$b$c\n      //       NODE\n\n      // Remove the rvalue (NODE).\n      parent.removeChild(rvalue);\n      nameNode.addChildToFront(rvalue);\n\n      Node varNode = new Node(Token.VAR, nameNode);\n      greatGramps.replaceChild(gramps, varNode);\n    } else {\n      // This must be a complex assignment.\n      Preconditions.checkNotNull(ref.getTwin());\n\n      // BEFORE:\n      // ... (x.y = 3);\n      //\n      // AFTER:\n      // var x$y;\n      // ... (x$y = 3);\n\n      Node current = gramps;\n      Node currentParent = gramps.getParent();\n      for (; currentParent.getType() != Token.SCRIPT &&\n             currentParent.getType() != Token.BLOCK;\n           current = currentParent,\n           currentParent = currentParent.getParent()) {}\n\n      // Create a stub variable declaration right\n      // before the current statement.\n      Node stubVar = new Node(Token.VAR, nameNode.cloneTree())\n          .copyInformationFrom(nameNode);\n      currentParent.addChildBefore(stubVar, current);\n\n      parent.replaceChild(ref.node, nameNode);\n    }\n\n    compiler.reportCodeChange();\n  }", "javadoc_start_line": 466, "annotations_start_line": 477, "method_start_line": 477, "end_line": 540}, "steps": [], "generation_failure": {"error": "Failed to generate stacktrace", "error_message": "[Errno 2] No such file or directory: './projects/Closure/89/results/stacktrace-testAddPropertyToUncollapsibleNamedCtorInLocalScopeDepth1-updateSimpleDeclaration.csv'"}}, {"failing_test": {"className": " com.google.javascript.jscomp.CollapsePropertiesTest", "methodName": "testAddPropertyToUncollapsibleFunctionInLocalScopeDepth1", "error": "junit.framework.AssertionFailedError", "message": ""}, "patched_method": {"file_path": "/src/com/google/javascript/jscomp/GlobalNamespace.java", "method_name": "canCollapseUnannotatedChildNames", "content": "    boolean canCollapseUnannotatedChildNames() {\n      if (type == Type.OTHER || globalSets != 1 || localSets != 0) {\n        return false;\n      }\n\n      // Don't try to collapse if the one global set is a twin reference.\n      // We could theoretically handle this case in CollapseProperties, but\n      // it's probably not worth the effort.\n      Preconditions.checkNotNull(declaration);\n      if (declaration.getTwin() != null) {\n        return false;\n      }\n\n      if (isClassOrEnum) {\n        return true;\n      }\n\n      // If this is a key of an aliased object literal, then it will be aliased\n      // later. So we won't be able to collapse its properties.\n      if (parent != null && parent.shouldKeepKeys()) {\n        return false;\n      }\n\n      // If this is aliased, then its properties can't be collapsed either.\n      if (type != Type.FUNCTION && aliasingGets > 0) {\n        return false;\n      }\n\n      return (parent == null || parent.canCollapseUnannotatedChildNames());\n    }", "javadoc_start_line": 896, "annotations_start_line": 896, "method_start_line": 896, "end_line": 925}, "steps": [{"file_path": "/src/com/google/javascript/jscomp/CollapseProperties.java", "method_name": "process", "content": "  public void process(Node externs, Node root) {\n    GlobalNamespace namespace;\n    if (collapsePropertiesOnExternTypes) {\n      namespace = new GlobalNamespace(compiler, externs, root);\n    } else {\n      namespace = new GlobalNamespace(compiler, root);\n    }\n\n    if (inlineAliases) {\n      inlineAliases(namespace);\n    }\n    nameMap = namespace.getNameIndex();\n    globalNames = namespace.getNameForest();\n    checkNamespaces();\n\n    for (Name n : globalNames) {\n      flattenReferencesToCollapsibleDescendantNames(n, n.name);\n    }\n\n    // We collapse property definitions after collapsing property references\n    // because this step can alter the parse tree above property references,\n    // invalidating the node ancestry stored with each reference.\n    for (Name n : globalNames) {\n      collapseDeclarationOfNameAndDescendants(n, n.name);\n    }\n  }", "javadoc_start_line": 116, "annotations_start_line": 115, "method_start_line": 116, "end_line": 141}, {"file_path": "/src/com/google/javascript/jscomp/CollapseProperties.java", "method_name": "collapseDeclarationOfNameAndDescendants", "content": "  /**\n   * Collapses definitions of the collapsible properties of a global name.\n   * Recurses on subnames that also represent JavaScript objects with\n   * collapsible properties.\n   *\n   * @param n A node representing a global name\n   * @param alias The flattened name for {@code n}\n   */\n  private void collapseDeclarationOfNameAndDescendants(Name n, String alias) {\n    boolean canCollapseChildNames = n.canCollapseUnannotatedChildNames();\n\n    // Handle this name first so that nested object literals get unrolled.\n    if (n.canCollapse() && canCollapseChildNames) {\n      updateObjLitOrFunctionDeclaration(n, alias);\n    }\n\n    if (n.props != null) {\n      for (Name p : n.props) {\n        // Recurse first so that saved node ancestries are intact when needed.\n        collapseDeclarationOfNameAndDescendants(\n            p, appendPropForAlias(alias, p.name));\n\n        if (!p.inExterns && canCollapseChildNames && p.declaration != null &&\n            p.declaration.node != null &&\n            p.declaration.node.getParent() != null &&\n            p.declaration.node.getParent().getType() == Token.ASSIGN) {\n          updateSimpleDeclaration(\n              appendPropForAlias(alias, p.name), p, p.declaration);\n        }\n      }\n    }\n  }", "javadoc_start_line": 433, "annotations_start_line": 441, "method_start_line": 441, "end_line": 464}]}, {"failing_test": {"className": " com.google.javascript.jscomp.CollapsePropertiesTest", "methodName": "testAddPropertyToUncollapsibleFunctionInLocalScopeDepth1", "error": "junit.framework.AssertionFailedError", "message": ""}, "patched_method": {"file_path": "/src/com/google/javascript/jscomp/CollapseProperties.java", "method_name": "updateSimpleDeclaration", "content": "  /**\n   * Updates the initial assignment to a collapsible property at global scope\n   * by changing it to a variable declaration (e.g. a.b = 1 -> var a$b = 1).\n   * The property's value may either be a primitive or an object literal or\n   * function whose properties aren't collapsible.\n   *\n   * @param alias The flattened property name (e.g. \"a$b\")\n   * @param refName The name for the reference being updated.\n   * @param ref An object containing information about the assignment getting\n   *     updated\n   */\n  private void updateSimpleDeclaration(String alias, Name refName, Ref ref) {\n    Node rvalue = ref.node.getNext();\n    Node parent = ref.node.getParent();\n    Node gramps = parent.getParent();\n    Node greatGramps = gramps.getParent();\n    Node greatGreatGramps = greatGramps.getParent();\n\n\n    // Create the new alias node.\n    Node nameNode = NodeUtil.newName(\n        compiler.getCodingConvention(), alias, gramps.getFirstChild(),\n        refName.fullName());\n    NodeUtil.copyNameAnnotations(ref.node.getLastChild(), nameNode);\n\n    if (gramps.getType() == Token.EXPR_RESULT) {\n      // BEFORE: a.b.c = ...;\n      //   exprstmt\n      //     assign\n      //       getprop\n      //         getprop\n      //           name a\n      //           string b\n      //         string c\n      //       NODE\n      // AFTER: var a$b$c = ...;\n      //   var\n      //     name a$b$c\n      //       NODE\n\n      // Remove the rvalue (NODE).\n      parent.removeChild(rvalue);\n      nameNode.addChildToFront(rvalue);\n\n      Node varNode = new Node(Token.VAR, nameNode);\n      greatGramps.replaceChild(gramps, varNode);\n    } else {\n      // This must be a complex assignment.\n      Preconditions.checkNotNull(ref.getTwin());\n\n      // BEFORE:\n      // ... (x.y = 3);\n      //\n      // AFTER:\n      // var x$y;\n      // ... (x$y = 3);\n\n      Node current = gramps;\n      Node currentParent = gramps.getParent();\n      for (; currentParent.getType() != Token.SCRIPT &&\n             currentParent.getType() != Token.BLOCK;\n           current = currentParent,\n           currentParent = currentParent.getParent()) {}\n\n      // Create a stub variable declaration right\n      // before the current statement.\n      Node stubVar = new Node(Token.VAR, nameNode.cloneTree())\n          .copyInformationFrom(nameNode);\n      currentParent.addChildBefore(stubVar, current);\n\n      parent.replaceChild(ref.node, nameNode);\n    }\n\n    compiler.reportCodeChange();\n  }", "javadoc_start_line": 466, "annotations_start_line": 477, "method_start_line": 477, "end_line": 540}, "steps": [], "generation_failure": {"error": "Failed to generate stacktrace", "error_message": "[Errno 2] No such file or directory: './projects/Closure/89/results/stacktrace-testAddPropertyToUncollapsibleFunctionInLocalScopeDepth1-updateSimpleDeclaration.csv'"}}, {"failing_test": {"className": " com.google.javascript.jscomp.CollapsePropertiesTest", "methodName": "testAddPropertyToUncollapsibleFunctionInLocalScopeDepth2", "error": "junit.framework.AssertionFailedError", "message": ""}, "patched_method": {"file_path": "/src/com/google/javascript/jscomp/GlobalNamespace.java", "method_name": "canCollapseUnannotatedChildNames", "content": "    boolean canCollapseUnannotatedChildNames() {\n      if (type == Type.OTHER || globalSets != 1 || localSets != 0) {\n        return false;\n      }\n\n      // Don't try to collapse if the one global set is a twin reference.\n      // We could theoretically handle this case in CollapseProperties, but\n      // it's probably not worth the effort.\n      Preconditions.checkNotNull(declaration);\n      if (declaration.getTwin() != null) {\n        return false;\n      }\n\n      if (isClassOrEnum) {\n        return true;\n      }\n\n      // If this is a key of an aliased object literal, then it will be aliased\n      // later. So we won't be able to collapse its properties.\n      if (parent != null && parent.shouldKeepKeys()) {\n        return false;\n      }\n\n      // If this is aliased, then its properties can't be collapsed either.\n      if (type != Type.FUNCTION && aliasingGets > 0) {\n        return false;\n      }\n\n      return (parent == null || parent.canCollapseUnannotatedChildNames());\n    }", "javadoc_start_line": 896, "annotations_start_line": 896, "method_start_line": 896, "end_line": 925}, "steps": [{"file_path": "/src/com/google/javascript/jscomp/CollapseProperties.java", "method_name": "process", "content": "  public void process(Node externs, Node root) {\n    GlobalNamespace namespace;\n    if (collapsePropertiesOnExternTypes) {\n      namespace = new GlobalNamespace(compiler, externs, root);\n    } else {\n      namespace = new GlobalNamespace(compiler, root);\n    }\n\n    if (inlineAliases) {\n      inlineAliases(namespace);\n    }\n    nameMap = namespace.getNameIndex();\n    globalNames = namespace.getNameForest();\n    checkNamespaces();\n\n    for (Name n : globalNames) {\n      flattenReferencesToCollapsibleDescendantNames(n, n.name);\n    }\n\n    // We collapse property definitions after collapsing property references\n    // because this step can alter the parse tree above property references,\n    // invalidating the node ancestry stored with each reference.\n    for (Name n : globalNames) {\n      collapseDeclarationOfNameAndDescendants(n, n.name);\n    }\n  }", "javadoc_start_line": 116, "annotations_start_line": 115, "method_start_line": 116, "end_line": 141}, {"file_path": "/src/com/google/javascript/jscomp/CollapseProperties.java", "method_name": "collapseDeclarationOfNameAndDescendants", "content": "  /**\n   * Collapses definitions of the collapsible properties of a global name.\n   * Recurses on subnames that also represent JavaScript objects with\n   * collapsible properties.\n   *\n   * @param n A node representing a global name\n   * @param alias The flattened name for {@code n}\n   */\n  private void collapseDeclarationOfNameAndDescendants(Name n, String alias) {\n    boolean canCollapseChildNames = n.canCollapseUnannotatedChildNames();\n\n    // Handle this name first so that nested object literals get unrolled.\n    if (n.canCollapse() && canCollapseChildNames) {\n      updateObjLitOrFunctionDeclaration(n, alias);\n    }\n\n    if (n.props != null) {\n      for (Name p : n.props) {\n        // Recurse first so that saved node ancestries are intact when needed.\n        collapseDeclarationOfNameAndDescendants(\n            p, appendPropForAlias(alias, p.name));\n\n        if (!p.inExterns && canCollapseChildNames && p.declaration != null &&\n            p.declaration.node != null &&\n            p.declaration.node.getParent() != null &&\n            p.declaration.node.getParent().getType() == Token.ASSIGN) {\n          updateSimpleDeclaration(\n              appendPropForAlias(alias, p.name), p, p.declaration);\n        }\n      }\n    }\n  }", "javadoc_start_line": 433, "annotations_start_line": 441, "method_start_line": 441, "end_line": 464}]}, {"failing_test": {"className": " com.google.javascript.jscomp.CollapsePropertiesTest", "methodName": "testAddPropertyToUncollapsibleFunctionInLocalScopeDepth2", "error": "junit.framework.AssertionFailedError", "message": ""}, "patched_method": {"file_path": "/src/com/google/javascript/jscomp/CollapseProperties.java", "method_name": "updateSimpleDeclaration", "content": "  /**\n   * Updates the initial assignment to a collapsible property at global scope\n   * by changing it to a variable declaration (e.g. a.b = 1 -> var a$b = 1).\n   * The property's value may either be a primitive or an object literal or\n   * function whose properties aren't collapsible.\n   *\n   * @param alias The flattened property name (e.g. \"a$b\")\n   * @param refName The name for the reference being updated.\n   * @param ref An object containing information about the assignment getting\n   *     updated\n   */\n  private void updateSimpleDeclaration(String alias, Name refName, Ref ref) {\n    Node rvalue = ref.node.getNext();\n    Node parent = ref.node.getParent();\n    Node gramps = parent.getParent();\n    Node greatGramps = gramps.getParent();\n    Node greatGreatGramps = greatGramps.getParent();\n\n\n    // Create the new alias node.\n    Node nameNode = NodeUtil.newName(\n        compiler.getCodingConvention(), alias, gramps.getFirstChild(),\n        refName.fullName());\n    NodeUtil.copyNameAnnotations(ref.node.getLastChild(), nameNode);\n\n    if (gramps.getType() == Token.EXPR_RESULT) {\n      // BEFORE: a.b.c = ...;\n      //   exprstmt\n      //     assign\n      //       getprop\n      //         getprop\n      //           name a\n      //           string b\n      //         string c\n      //       NODE\n      // AFTER: var a$b$c = ...;\n      //   var\n      //     name a$b$c\n      //       NODE\n\n      // Remove the rvalue (NODE).\n      parent.removeChild(rvalue);\n      nameNode.addChildToFront(rvalue);\n\n      Node varNode = new Node(Token.VAR, nameNode);\n      greatGramps.replaceChild(gramps, varNode);\n    } else {\n      // This must be a complex assignment.\n      Preconditions.checkNotNull(ref.getTwin());\n\n      // BEFORE:\n      // ... (x.y = 3);\n      //\n      // AFTER:\n      // var x$y;\n      // ... (x$y = 3);\n\n      Node current = gramps;\n      Node currentParent = gramps.getParent();\n      for (; currentParent.getType() != Token.SCRIPT &&\n             currentParent.getType() != Token.BLOCK;\n           current = currentParent,\n           currentParent = currentParent.getParent()) {}\n\n      // Create a stub variable declaration right\n      // before the current statement.\n      Node stubVar = new Node(Token.VAR, nameNode.cloneTree())\n          .copyInformationFrom(nameNode);\n      currentParent.addChildBefore(stubVar, current);\n\n      parent.replaceChild(ref.node, nameNode);\n    }\n\n    compiler.reportCodeChange();\n  }", "javadoc_start_line": 466, "annotations_start_line": 477, "method_start_line": 477, "end_line": 540}, "steps": [], "generation_failure": {"error": "Failed to generate stacktrace", "error_message": "[Errno 2] No such file or directory: './projects/Closure/89/results/stacktrace-testAddPropertyToUncollapsibleFunctionInLocalScopeDepth2-updateSimpleDeclaration.csv'"}}, {"failing_test": {"className": " com.google.javascript.jscomp.CollapsePropertiesTest", "methodName": "testAliasCreatedForFunctionDepth2", "error": "junit.framework.AssertionFailedError", "message": ""}, "patched_method": {"file_path": "/src/com/google/javascript/jscomp/GlobalNamespace.java", "method_name": "canCollapseUnannotatedChildNames", "content": "    boolean canCollapseUnannotatedChildNames() {\n      if (type == Type.OTHER || globalSets != 1 || localSets != 0) {\n        return false;\n      }\n\n      // Don't try to collapse if the one global set is a twin reference.\n      // We could theoretically handle this case in CollapseProperties, but\n      // it's probably not worth the effort.\n      Preconditions.checkNotNull(declaration);\n      if (declaration.getTwin() != null) {\n        return false;\n      }\n\n      if (isClassOrEnum) {\n        return true;\n      }\n\n      // If this is a key of an aliased object literal, then it will be aliased\n      // later. So we won't be able to collapse its properties.\n      if (parent != null && parent.shouldKeepKeys()) {\n        return false;\n      }\n\n      // If this is aliased, then its properties can't be collapsed either.\n      if (type != Type.FUNCTION && aliasingGets > 0) {\n        return false;\n      }\n\n      return (parent == null || parent.canCollapseUnannotatedChildNames());\n    }", "javadoc_start_line": 896, "annotations_start_line": 896, "method_start_line": 896, "end_line": 925}, "steps": [{"file_path": "/src/com/google/javascript/jscomp/CollapseProperties.java", "method_name": "process", "content": "  public void process(Node externs, Node root) {\n    GlobalNamespace namespace;\n    if (collapsePropertiesOnExternTypes) {\n      namespace = new GlobalNamespace(compiler, externs, root);\n    } else {\n      namespace = new GlobalNamespace(compiler, root);\n    }\n\n    if (inlineAliases) {\n      inlineAliases(namespace);\n    }\n    nameMap = namespace.getNameIndex();\n    globalNames = namespace.getNameForest();\n    checkNamespaces();\n\n    for (Name n : globalNames) {\n      flattenReferencesToCollapsibleDescendantNames(n, n.name);\n    }\n\n    // We collapse property definitions after collapsing property references\n    // because this step can alter the parse tree above property references,\n    // invalidating the node ancestry stored with each reference.\n    for (Name n : globalNames) {\n      collapseDeclarationOfNameAndDescendants(n, n.name);\n    }\n  }", "javadoc_start_line": 116, "annotations_start_line": 115, "method_start_line": 116, "end_line": 141}, {"file_path": "/src/com/google/javascript/jscomp/CollapseProperties.java", "method_name": "collapseDeclarationOfNameAndDescendants", "content": "  /**\n   * Collapses definitions of the collapsible properties of a global name.\n   * Recurses on subnames that also represent JavaScript objects with\n   * collapsible properties.\n   *\n   * @param n A node representing a global name\n   * @param alias The flattened name for {@code n}\n   */\n  private void collapseDeclarationOfNameAndDescendants(Name n, String alias) {\n    boolean canCollapseChildNames = n.canCollapseUnannotatedChildNames();\n\n    // Handle this name first so that nested object literals get unrolled.\n    if (n.canCollapse() && canCollapseChildNames) {\n      updateObjLitOrFunctionDeclaration(n, alias);\n    }\n\n    if (n.props != null) {\n      for (Name p : n.props) {\n        // Recurse first so that saved node ancestries are intact when needed.\n        collapseDeclarationOfNameAndDescendants(\n            p, appendPropForAlias(alias, p.name));\n\n        if (!p.inExterns && canCollapseChildNames && p.declaration != null &&\n            p.declaration.node != null &&\n            p.declaration.node.getParent() != null &&\n            p.declaration.node.getParent().getType() == Token.ASSIGN) {\n          updateSimpleDeclaration(\n              appendPropForAlias(alias, p.name), p, p.declaration);\n        }\n      }\n    }\n  }", "javadoc_start_line": 433, "annotations_start_line": 441, "method_start_line": 441, "end_line": 464}, {"file_path": "/src/com/google/javascript/jscomp/CollapseProperties.java", "method_name": "collapseDeclarationOfNameAndDescendants", "content": "  /**\n   * Collapses definitions of the collapsible properties of a global name.\n   * Recurses on subnames that also represent JavaScript objects with\n   * collapsible properties.\n   *\n   * @param n A node representing a global name\n   * @param alias The flattened name for {@code n}\n   */\n  private void collapseDeclarationOfNameAndDescendants(Name n, String alias) {\n    boolean canCollapseChildNames = n.canCollapseUnannotatedChildNames();\n\n    // Handle this name first so that nested object literals get unrolled.\n    if (n.canCollapse() && canCollapseChildNames) {\n      updateObjLitOrFunctionDeclaration(n, alias);\n    }\n\n    if (n.props != null) {\n      for (Name p : n.props) {\n        // Recurse first so that saved node ancestries are intact when needed.\n        collapseDeclarationOfNameAndDescendants(\n            p, appendPropForAlias(alias, p.name));\n\n        if (!p.inExterns && canCollapseChildNames && p.declaration != null &&\n            p.declaration.node != null &&\n            p.declaration.node.getParent() != null &&\n            p.declaration.node.getParent().getType() == Token.ASSIGN) {\n          updateSimpleDeclaration(\n              appendPropForAlias(alias, p.name), p, p.declaration);\n        }\n      }\n    }\n  }", "javadoc_start_line": 433, "annotations_start_line": 441, "method_start_line": 441, "end_line": 464}]}, {"failing_test": {"className": " com.google.javascript.jscomp.CollapsePropertiesTest", "methodName": "testAliasCreatedForFunctionDepth2", "error": "junit.framework.AssertionFailedError", "message": ""}, "patched_method": {"file_path": "/src/com/google/javascript/jscomp/CollapseProperties.java", "method_name": "updateSimpleDeclaration", "content": "  /**\n   * Updates the initial assignment to a collapsible property at global scope\n   * by changing it to a variable declaration (e.g. a.b = 1 -> var a$b = 1).\n   * The property's value may either be a primitive or an object literal or\n   * function whose properties aren't collapsible.\n   *\n   * @param alias The flattened property name (e.g. \"a$b\")\n   * @param refName The name for the reference being updated.\n   * @param ref An object containing information about the assignment getting\n   *     updated\n   */\n  private void updateSimpleDeclaration(String alias, Name refName, Ref ref) {\n    Node rvalue = ref.node.getNext();\n    Node parent = ref.node.getParent();\n    Node gramps = parent.getParent();\n    Node greatGramps = gramps.getParent();\n    Node greatGreatGramps = greatGramps.getParent();\n\n\n    // Create the new alias node.\n    Node nameNode = NodeUtil.newName(\n        compiler.getCodingConvention(), alias, gramps.getFirstChild(),\n        refName.fullName());\n    NodeUtil.copyNameAnnotations(ref.node.getLastChild(), nameNode);\n\n    if (gramps.getType() == Token.EXPR_RESULT) {\n      // BEFORE: a.b.c = ...;\n      //   exprstmt\n      //     assign\n      //       getprop\n      //         getprop\n      //           name a\n      //           string b\n      //         string c\n      //       NODE\n      // AFTER: var a$b$c = ...;\n      //   var\n      //     name a$b$c\n      //       NODE\n\n      // Remove the rvalue (NODE).\n      parent.removeChild(rvalue);\n      nameNode.addChildToFront(rvalue);\n\n      Node varNode = new Node(Token.VAR, nameNode);\n      greatGramps.replaceChild(gramps, varNode);\n    } else {\n      // This must be a complex assignment.\n      Preconditions.checkNotNull(ref.getTwin());\n\n      // BEFORE:\n      // ... (x.y = 3);\n      //\n      // AFTER:\n      // var x$y;\n      // ... (x$y = 3);\n\n      Node current = gramps;\n      Node currentParent = gramps.getParent();\n      for (; currentParent.getType() != Token.SCRIPT &&\n             currentParent.getType() != Token.BLOCK;\n           current = currentParent,\n           currentParent = currentParent.getParent()) {}\n\n      // Create a stub variable declaration right\n      // before the current statement.\n      Node stubVar = new Node(Token.VAR, nameNode.cloneTree())\n          .copyInformationFrom(nameNode);\n      currentParent.addChildBefore(stubVar, current);\n\n      parent.replaceChild(ref.node, nameNode);\n    }\n\n    compiler.reportCodeChange();\n  }", "javadoc_start_line": 466, "annotations_start_line": 477, "method_start_line": 477, "end_line": 540}, "steps": [{"file_path": "/src/com/google/javascript/jscomp/CollapseProperties.java", "method_name": "process", "content": "  public void process(Node externs, Node root) {\n    GlobalNamespace namespace;\n    if (collapsePropertiesOnExternTypes) {\n      namespace = new GlobalNamespace(compiler, externs, root);\n    } else {\n      namespace = new GlobalNamespace(compiler, root);\n    }\n\n    if (inlineAliases) {\n      inlineAliases(namespace);\n    }\n    nameMap = namespace.getNameIndex();\n    globalNames = namespace.getNameForest();\n    checkNamespaces();\n\n    for (Name n : globalNames) {\n      flattenReferencesToCollapsibleDescendantNames(n, n.name);\n    }\n\n    // We collapse property definitions after collapsing property references\n    // because this step can alter the parse tree above property references,\n    // invalidating the node ancestry stored with each reference.\n    for (Name n : globalNames) {\n      collapseDeclarationOfNameAndDescendants(n, n.name);\n    }\n  }", "javadoc_start_line": 116, "annotations_start_line": 115, "method_start_line": 116, "end_line": 141}, {"file_path": "/src/com/google/javascript/jscomp/CollapseProperties.java", "method_name": "collapseDeclarationOfNameAndDescendants", "content": "  /**\n   * Collapses definitions of the collapsible properties of a global name.\n   * Recurses on subnames that also represent JavaScript objects with\n   * collapsible properties.\n   *\n   * @param n A node representing a global name\n   * @param alias The flattened name for {@code n}\n   */\n  private void collapseDeclarationOfNameAndDescendants(Name n, String alias) {\n    boolean canCollapseChildNames = n.canCollapseUnannotatedChildNames();\n\n    // Handle this name first so that nested object literals get unrolled.\n    if (n.canCollapse() && canCollapseChildNames) {\n      updateObjLitOrFunctionDeclaration(n, alias);\n    }\n\n    if (n.props != null) {\n      for (Name p : n.props) {\n        // Recurse first so that saved node ancestries are intact when needed.\n        collapseDeclarationOfNameAndDescendants(\n            p, appendPropForAlias(alias, p.name));\n\n        if (!p.inExterns && canCollapseChildNames && p.declaration != null &&\n            p.declaration.node != null &&\n            p.declaration.node.getParent() != null &&\n            p.declaration.node.getParent().getType() == Token.ASSIGN) {\n          updateSimpleDeclaration(\n              appendPropForAlias(alias, p.name), p, p.declaration);\n        }\n      }\n    }\n  }", "javadoc_start_line": 433, "annotations_start_line": 441, "method_start_line": 441, "end_line": 464}, {"file_path": "/src/com/google/javascript/jscomp/CollapseProperties.java", "method_name": "collapseDeclarationOfNameAndDescendants", "content": "  /**\n   * Collapses definitions of the collapsible properties of a global name.\n   * Recurses on subnames that also represent JavaScript objects with\n   * collapsible properties.\n   *\n   * @param n A node representing a global name\n   * @param alias The flattened name for {@code n}\n   */\n  private void collapseDeclarationOfNameAndDescendants(Name n, String alias) {\n    boolean canCollapseChildNames = n.canCollapseUnannotatedChildNames();\n\n    // Handle this name first so that nested object literals get unrolled.\n    if (n.canCollapse() && canCollapseChildNames) {\n      updateObjLitOrFunctionDeclaration(n, alias);\n    }\n\n    if (n.props != null) {\n      for (Name p : n.props) {\n        // Recurse first so that saved node ancestries are intact when needed.\n        collapseDeclarationOfNameAndDescendants(\n            p, appendPropForAlias(alias, p.name));\n\n        if (!p.inExterns && canCollapseChildNames && p.declaration != null &&\n            p.declaration.node != null &&\n            p.declaration.node.getParent() != null &&\n            p.declaration.node.getParent().getType() == Token.ASSIGN) {\n          updateSimpleDeclaration(\n              appendPropForAlias(alias, p.name), p, p.declaration);\n        }\n      }\n    }\n  }", "javadoc_start_line": 433, "annotations_start_line": 441, "method_start_line": 441, "end_line": 464}, {"file_path": "/src/com/google/javascript/jscomp/CollapseProperties.java", "method_name": "updateSimpleDeclaration", "content": "  /**\n   * Updates the initial assignment to a collapsible property at global scope\n   * by changing it to a variable declaration (e.g. a.b = 1 -> var a$b = 1).\n   * The property's value may either be a primitive or an object literal or\n   * function whose properties aren't collapsible.\n   *\n   * @param alias The flattened property name (e.g. \"a$b\")\n   * @param refName The name for the reference being updated.\n   * @param ref An object containing information about the assignment getting\n   *     updated\n   */\n  private void updateSimpleDeclaration(String alias, Name refName, Ref ref) {\n    Node rvalue = ref.node.getNext();\n    Node parent = ref.node.getParent();\n    Node gramps = parent.getParent();\n    Node greatGramps = gramps.getParent();\n    Node greatGreatGramps = greatGramps.getParent();\n\n\n    // Create the new alias node.\n    Node nameNode = NodeUtil.newName(\n        compiler.getCodingConvention(), alias, gramps.getFirstChild(),\n        refName.fullName());\n    NodeUtil.copyNameAnnotations(ref.node.getLastChild(), nameNode);\n\n    if (gramps.getType() == Token.EXPR_RESULT) {\n      // BEFORE: a.b.c = ...;\n      //   exprstmt\n      //     assign\n      //       getprop\n      //         getprop\n      //           name a\n      //           string b\n      //         string c\n      //       NODE\n      // AFTER: var a$b$c = ...;\n      //   var\n      //     name a$b$c\n      //       NODE\n\n      // Remove the rvalue (NODE).\n      parent.removeChild(rvalue);\n      nameNode.addChildToFront(rvalue);\n\n      Node varNode = new Node(Token.VAR, nameNode);\n      greatGramps.replaceChild(gramps, varNode);\n    } else {\n      // This must be a complex assignment.\n      Preconditions.checkNotNull(ref.getTwin());\n\n      // BEFORE:\n      // ... (x.y = 3);\n      //\n      // AFTER:\n      // var x$y;\n      // ... (x$y = 3);\n\n      Node current = gramps;\n      Node currentParent = gramps.getParent();\n      for (; currentParent.getType() != Token.SCRIPT &&\n             currentParent.getType() != Token.BLOCK;\n           current = currentParent,\n           currentParent = currentParent.getParent()) {}\n\n      // Create a stub variable declaration right\n      // before the current statement.\n      Node stubVar = new Node(Token.VAR, nameNode.cloneTree())\n          .copyInformationFrom(nameNode);\n      currentParent.addChildBefore(stubVar, current);\n\n      parent.replaceChild(ref.node, nameNode);\n    }\n\n    compiler.reportCodeChange();\n  }", "javadoc_start_line": 466, "annotations_start_line": 477, "method_start_line": 477, "end_line": 540}]}], "project": {"name": "Closure", "version": 89}}