{"tours": [{"failing_test": {"className": " com.google.javascript.jscomp.ProcessCommonJSModulesTest", "methodName": "testGuessModuleName", "error": "junit.framework.ComparisonFailure", "message": "expected:<module$[]baz> but was:<module$[foo\\]baz>"}, "patched_method": {"file_path": "/src/com/google/javascript/jscomp/ProcessCommonJSModules.java", "method_name": "normalizeSourceName", "content": "  private String normalizeSourceName(String filename) {\n    // The DOS command shell will normalize \"/\" to \"\\\", so we have to\n    // wrestle it back.\n\n    if (filename.indexOf(filenamePrefix) == 0) {\n      filename = filename.substring(filenamePrefix.length());\n    }\n\n    return filename;\n  }", "javadoc_start_line": 116, "annotations_start_line": 116, "method_start_line": 116, "end_line": 125}, "steps": [{"file_path": "/src/com/google/javascript/jscomp/ProcessCommonJSModules.java", "method_name": "guessCJSModuleName", "content": "  String guessCJSModuleName(String filename) {\n    return toModuleName(normalizeSourceName(filename));\n  }", "javadoc_start_line": 71, "annotations_start_line": 71, "method_start_line": 71, "end_line": 73}, {"file_path": "/src/com/google/javascript/jscomp/ProcessCommonJSModules.java", "method_name": "normalizeSourceName", "content": "  private String normalizeSourceName(String filename) {\n    // The DOS command shell will normalize \"/\" to \"\\\", so we have to\n    // wrestle it back.\n\n    if (filename.indexOf(filenamePrefix) == 0) {\n      filename = filename.substring(filenamePrefix.length());\n    }\n\n    return filename;\n  }", "javadoc_start_line": 116, "annotations_start_line": 116, "method_start_line": 116, "end_line": 125}]}, {"failing_test": {"className": " com.google.javascript.jscomp.ProcessCommonJSModulesTest", "methodName": "testGuessModuleName", "error": "junit.framework.ComparisonFailure", "message": "expected:<module$[]baz> but was:<module$[foo\\]baz>"}, "patched_method": {"file_path": "/src/com/google/javascript/jscomp/ProcessCommonJSModules.java", "method_name": "visitScript", "content": "    /**\n     * Emit goog.provide and add suffix to all global vars to avoid conflicts\n     * with other modules.\n     */\n    private void visitScript(NodeTraversal t, Node script) {\n      Preconditions.checkArgument(scriptNodeCount == 1,\n          \"ProcessCommonJSModules supports only one invocation per \" +\n          \"CompilerInput / script node\");\n      String moduleName = guessCJSModuleName(normalizeSourceName(script.getSourceFileName()));\n      script.addChildToFront(IR.var(IR.name(moduleName), IR.objectlit())\n          .copyInformationFromForTree(script));\n      if (reportDependencies) {\n        CompilerInput ci = t.getInput();\n        ci.addProvide(moduleName);\n        JSModule m = new JSModule(moduleName);\n        m.addAndOverrideModule(ci);\n        module = m;\n      }\n      script.addChildToFront(IR.exprResult(\n          IR.call(IR.getprop(IR.name(\"goog\"), IR.string(\"provide\")),\n              IR.string(moduleName))).copyInformationFromForTree(script));\n\n      emitOptionalModuleExportsOverride(script, moduleName);\n\n      // Rename vars to not conflict in global scope.\n      NodeTraversal.traverse(compiler, script, new SuffixVarsCallback(\n          moduleName));\n\n      compiler.reportCodeChange();\n    }", "javadoc_start_line": 175, "annotations_start_line": 179, "method_start_line": 179, "end_line": 204}, "steps": [], "generation_failure": {"error": "Failed to generate stacktrace", "error_message": "[Errno 2] No such file or directory: './projects/Closure/9/results/stacktrace-testGuessModuleName-visitScript.csv'"}}], "project": {"name": "Closure", "version": 9}}