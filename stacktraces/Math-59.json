{"tours": [{"failing_test": {"className": " org.apache.commons.math.util.FastMathTest", "methodName": "testMinMaxFloat", "error": "junit.framework.AssertionFailedError", "message": "max(50.0, -50.0) expected:<50.0> but was:<-50.0>"}, "patched_method": {"file_path": "/src/main/java/org/apache/commons/math/util/FastMath.java", "method_name": "max", "content": "    /** Compute the maximum of two values\n     * @param a first value\n     * @param b second value\n     * @return b if a is lesser or equal to b, a otherwise\n     */\n    public static float max(final float a, final float b) {\n        return (a <= b) ? b : (Float.isNaN(a + b) ? Float.NaN : b);\n    }", "javadoc_start_line": 3476, "annotations_start_line": 3481, "method_start_line": 3481, "end_line": 3483}, "steps": [{"file_path": "/src/test/java/org/apache/commons/math/util/FastMathTest.java", "method_name": "testMinMaxFloat", "content": "    public void testMinMaxFloat() {\n        float[][] pairs = {\n            { -50.0f, 50.0f },\n            {  Float.POSITIVE_INFINITY, 1.0f },\n            {  Float.NEGATIVE_INFINITY, 1.0f },\n            {  Float.NaN, 1.0f },\n            {  Float.POSITIVE_INFINITY, 0.0f },\n            {  Float.NEGATIVE_INFINITY, 0.0f },\n            {  Float.NaN, 0.0f },\n            {  Float.NaN, Float.NEGATIVE_INFINITY },\n            {  Float.NaN, Float.POSITIVE_INFINITY }\n        };\n        for (float[] pair : pairs) {\n            Assert.assertEquals(\"min(\" + pair[0] + \", \" + pair[1] + \")\",\n                                Math.min(pair[0], pair[1]),\n                                FastMath.min(pair[0], pair[1]),\n                                MathUtils.EPSILON);\n            Assert.assertEquals(\"min(\" + pair[1] + \", \" + pair[0] + \")\",\n                                Math.min(pair[1], pair[0]),\n                                FastMath.min(pair[1], pair[0]),\n                                MathUtils.EPSILON);\n            Assert.assertEquals(\"max(\" + pair[0] + \", \" + pair[1] + \")\",\n                                Math.max(pair[0], pair[1]),\n                                FastMath.max(pair[0], pair[1]),\n                                MathUtils.EPSILON);\n            Assert.assertEquals(\"max(\" + pair[1] + \", \" + pair[0] + \")\",\n                                Math.max(pair[1], pair[0]),\n                                FastMath.max(pair[1], pair[0]),\n                                MathUtils.EPSILON);\n        }\n    }", "javadoc_start_line": 78, "annotations_start_line": 77, "method_start_line": 78, "end_line": 108}, {"file_path": "/src/main/java/org/apache/commons/math/util/FastMath.java", "method_name": "max", "content": "    /** Compute the maximum of two values\n     * @param a first value\n     * @param b second value\n     * @return b if a is lesser or equal to b, a otherwise\n     */\n    public static float max(final float a, final float b) {\n        return (a <= b) ? b : (Float.isNaN(a + b) ? Float.NaN : b);\n    }", "javadoc_start_line": 3476, "annotations_start_line": 3481, "method_start_line": 3481, "end_line": 3483}]}], "project": {"name": "Math", "version": 59}}