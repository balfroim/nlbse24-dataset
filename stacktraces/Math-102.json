{"tours": [{"failing_test": {"className": " org.apache.commons.math.stat.inference.ChiSquareFactoryTest", "methodName": "testChiSquareLargeTestStatistic", "error": "junit.framework.AssertionFailedError", "message": "chi-square test statistic expected:<114875.90421929007> but was:<3624883.3429077636>"}, "patched_method": {"file_path": "/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java", "method_name": "chiSquare", "content": "     /**\n     * {@inheritDoc}\n     * <p><strong>Note: </strong>This implementation rescales the \n     * <code>expected</code> array if necessary to ensure that the sum of the\n     * expected and observed counts are equal.</p>\n     * \n     * @param observed array of observed frequency counts\n     * @param expected array of expected frequency counts\n     * @return chi-square test statistic\n     * @throws IllegalArgumentException if preconditions are not met\n     * or length is less than 2\n     */\n    public double chiSquare(double[] expected, long[] observed)\n        throws IllegalArgumentException {\n        if ((expected.length < 2) || (expected.length != observed.length)) {\n            throw new IllegalArgumentException(\n                    \"observed, expected array lengths incorrect\");\n        }\n        if (!isPositive(expected) || !isNonNegative(observed)) {\n            throw new IllegalArgumentException(\n                \"observed counts must be non-negative and expected counts must be postive\");\n        }\n        double sumSq = 0.0d;\n        double dev = 0.0d;\n        for (int i = 0; i < observed.length; i++) {\n                dev = ((double) observed[i] - expected[i]);\n                sumSq += dev * dev / expected[i];\n        }\n        return sumSq;\n    }", "javadoc_start_line": 52, "annotations_start_line": 64, "method_start_line": 65, "end_line": 81}, "steps": [{"file_path": "/src/test/org/apache/commons/math/stat/inference/TestUtilsTest.java", "method_name": "testChiSquareLargeTestStatistic", "content": "    public void testChiSquareLargeTestStatistic() throws Exception {\n        double[] exp = new double[] {\n                3389119.5, 649136.6, 285745.4, 25357364.76, 11291189.78, 543628.0, \n                232921.0, 437665.75\n        };\n\n        long[] obs = new long[] {\n                2372383, 584222, 257170, 17750155, 7903832, 489265, 209628, 393899\n        };\n        org.apache.commons.math.stat.inference.ChiSquareTestImpl csti =\n            new org.apache.commons.math.stat.inference.ChiSquareTestImpl(); \n        double cst = csti.chiSquareTest(exp, obs); \n        assertEquals(\"chi-square p-value\", 0.0, cst, 1E-3);\n        assertEquals( \"chi-square test statistic\", \n                114875.90421929007, TestUtils.chiSquare(exp, obs), 1E-9);\n    }", "javadoc_start_line": 168, "annotations_start_line": 168, "method_start_line": 168, "end_line": 183}, {"file_path": "/src/java/org/apache/commons/math/stat/inference/TestUtils.java", "method_name": "chiSquare", "content": "    /**\n     * @see org.apache.commons.math.stat.inference.ChiSquareTest#chiSquare(double[], long[])\n     */\n    public static double chiSquare(double[] expected, long[] observed)\n        throws IllegalArgumentException {\n        return chiSquareTest.chiSquare(expected, observed);\n    }", "javadoc_start_line": 273, "annotations_start_line": 276, "method_start_line": 277, "end_line": 279}]}, {"failing_test": {"className": " org.apache.commons.math.stat.inference.ChiSquareFactoryTest", "methodName": "testChiSquare", "error": "junit.framework.AssertionFailedError", "message": "chi-square test statistic expected:<9.023307936427388> but was:<16.413107036160778>"}, "patched_method": {"file_path": "/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java", "method_name": "chiSquare", "content": "     /**\n     * {@inheritDoc}\n     * <p><strong>Note: </strong>This implementation rescales the \n     * <code>expected</code> array if necessary to ensure that the sum of the\n     * expected and observed counts are equal.</p>\n     * \n     * @param observed array of observed frequency counts\n     * @param expected array of expected frequency counts\n     * @return chi-square test statistic\n     * @throws IllegalArgumentException if preconditions are not met\n     * or length is less than 2\n     */\n    public double chiSquare(double[] expected, long[] observed)\n        throws IllegalArgumentException {\n        if ((expected.length < 2) || (expected.length != observed.length)) {\n            throw new IllegalArgumentException(\n                    \"observed, expected array lengths incorrect\");\n        }\n        if (!isPositive(expected) || !isNonNegative(observed)) {\n            throw new IllegalArgumentException(\n                \"observed counts must be non-negative and expected counts must be postive\");\n        }\n        double sumSq = 0.0d;\n        double dev = 0.0d;\n        for (int i = 0; i < observed.length; i++) {\n                dev = ((double) observed[i] - expected[i]);\n                sumSq += dev * dev / expected[i];\n        }\n        return sumSq;\n    }", "javadoc_start_line": 52, "annotations_start_line": 64, "method_start_line": 65, "end_line": 81}, "steps": [{"file_path": "/src/test/org/apache/commons/math/stat/inference/TestUtilsTest.java", "method_name": "testChiSquare", "content": "    public void testChiSquare() throws Exception {\n        \n        // Target values computed using R version 1.8.1 \n        // Some assembly required ;-)  \n        //      Use sum((obs - exp)^2/exp) for the chi-square statistic and\n        //      1 - pchisq(sum((obs - exp)^2/exp), length(obs) - 1) for the p-value\n        \n        long[] observed = {10, 9, 11};\n        double[] expected = {10, 10, 10};\n        assertEquals(\"chi-square statistic\", 0.2,  TestUtils.chiSquare(expected, observed), 10E-12);\n        assertEquals(\"chi-square p-value\", 0.904837418036, TestUtils.chiSquareTest(expected, observed), 1E-10);\n        \n        long[] observed1 = { 500, 623, 72, 70, 31 };\n        double[] expected1 = { 485, 541, 82, 61, 37 };\n        assertEquals( \"chi-square test statistic\", 9.023307936427388, TestUtils.chiSquare(expected1, observed1), 1E-10);\n        assertEquals(\"chi-square p-value\", 0.06051952647453607, TestUtils.chiSquareTest(expected1, observed1), 1E-9);\n        assertTrue(\"chi-square test reject\", TestUtils.chiSquareTest(expected1, observed1, 0.07));\n        assertTrue(\"chi-square test accept\", !TestUtils.chiSquareTest(expected1, observed1, 0.05));\n\n        try {\n            TestUtils.chiSquareTest(expected1, observed1, 95);\n            fail(\"alpha out of range, IllegalArgumentException expected\");\n        } catch (IllegalArgumentException ex) {\n            // expected\n        }  \n        \n        long[] tooShortObs = { 0 };\n        double[] tooShortEx = { 1 };\n        try {\n            TestUtils.chiSquare(tooShortEx, tooShortObs);\n            fail(\"arguments too short, IllegalArgumentException expected\");\n        } catch (IllegalArgumentException ex) {\n            // expected\n        }\n\n        // unmatched arrays\n        long[] unMatchedObs = { 0, 1, 2, 3 };\n        double[] unMatchedEx = { 1, 1, 2 };\n        try {\n            TestUtils.chiSquare(unMatchedEx, unMatchedObs);\n            fail(\"arrays have different lengths, IllegalArgumentException expected\");\n        } catch (IllegalArgumentException ex) {\n            // expected\n        }\n        \n        // 0 expected count\n        expected[0] = 0;\n        try {\n            TestUtils.chiSquareTest(expected, observed, .01);\n            fail(\"bad expected count, IllegalArgumentException expected\");\n        } catch (IllegalArgumentException ex) {\n            // expected\n        } \n        \n        // negative observed count\n        expected[0] = 1;\n        observed[0] = -1;\n        try {\n            TestUtils.chiSquareTest(expected, observed, .01);\n            fail(\"bad expected count, IllegalArgumentException expected\");\n        } catch (IllegalArgumentException ex) {\n            // expected\n        } \n        \n    }", "javadoc_start_line": 44, "annotations_start_line": 44, "method_start_line": 44, "end_line": 108}, {"file_path": "/src/java/org/apache/commons/math/stat/inference/TestUtils.java", "method_name": "chiSquare", "content": "    /**\n     * @see org.apache.commons.math.stat.inference.ChiSquareTest#chiSquare(double[], long[])\n     */\n    public static double chiSquare(double[] expected, long[] observed)\n        throws IllegalArgumentException {\n        return chiSquareTest.chiSquare(expected, observed);\n    }", "javadoc_start_line": 273, "annotations_start_line": 276, "method_start_line": 277, "end_line": 279}]}, {"failing_test": {"className": " org.apache.commons.math.stat.inference.ChiSquareTestTest", "methodName": "testChiSquareLargeTestStatistic", "error": "junit.framework.AssertionFailedError", "message": "chi-square test statistic expected:<114875.90421929007> but was:<3624883.3429077636>"}, "patched_method": {"file_path": "/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java", "method_name": "chiSquare", "content": "     /**\n     * {@inheritDoc}\n     * <p><strong>Note: </strong>This implementation rescales the \n     * <code>expected</code> array if necessary to ensure that the sum of the\n     * expected and observed counts are equal.</p>\n     * \n     * @param observed array of observed frequency counts\n     * @param expected array of expected frequency counts\n     * @return chi-square test statistic\n     * @throws IllegalArgumentException if preconditions are not met\n     * or length is less than 2\n     */\n    public double chiSquare(double[] expected, long[] observed)\n        throws IllegalArgumentException {\n        if ((expected.length < 2) || (expected.length != observed.length)) {\n            throw new IllegalArgumentException(\n                    \"observed, expected array lengths incorrect\");\n        }\n        if (!isPositive(expected) || !isNonNegative(observed)) {\n            throw new IllegalArgumentException(\n                \"observed counts must be non-negative and expected counts must be postive\");\n        }\n        double sumSq = 0.0d;\n        double dev = 0.0d;\n        for (int i = 0; i < observed.length; i++) {\n                dev = ((double) observed[i] - expected[i]);\n                sumSq += dev * dev / expected[i];\n        }\n        return sumSq;\n    }", "javadoc_start_line": 52, "annotations_start_line": 64, "method_start_line": 65, "end_line": 81}, "steps": [{"file_path": "/src/test/org/apache/commons/math/stat/inference/TestUtilsTest.java", "method_name": "testChiSquareLargeTestStatistic", "content": "    public void testChiSquareLargeTestStatistic() throws Exception {\n        double[] exp = new double[] {\n                3389119.5, 649136.6, 285745.4, 25357364.76, 11291189.78, 543628.0, \n                232921.0, 437665.75\n        };\n\n        long[] obs = new long[] {\n                2372383, 584222, 257170, 17750155, 7903832, 489265, 209628, 393899\n        };\n        org.apache.commons.math.stat.inference.ChiSquareTestImpl csti =\n            new org.apache.commons.math.stat.inference.ChiSquareTestImpl(); \n        double cst = csti.chiSquareTest(exp, obs); \n        assertEquals(\"chi-square p-value\", 0.0, cst, 1E-3);\n        assertEquals( \"chi-square test statistic\", \n                114875.90421929007, TestUtils.chiSquare(exp, obs), 1E-9);\n    }", "javadoc_start_line": 168, "annotations_start_line": 168, "method_start_line": 168, "end_line": 183}, {"file_path": "/src/java/org/apache/commons/math/stat/inference/TestUtils.java", "method_name": "chiSquare", "content": "    /**\n     * @see org.apache.commons.math.stat.inference.ChiSquareTest#chiSquare(double[], long[])\n     */\n    public static double chiSquare(double[] expected, long[] observed)\n        throws IllegalArgumentException {\n        return chiSquareTest.chiSquare(expected, observed);\n    }", "javadoc_start_line": 273, "annotations_start_line": 276, "method_start_line": 277, "end_line": 279}]}, {"failing_test": {"className": " org.apache.commons.math.stat.inference.ChiSquareTestTest", "methodName": "testChiSquare", "error": "junit.framework.AssertionFailedError", "message": "chi-square test statistic expected:<9.023307936427388> but was:<16.413107036160778>"}, "patched_method": {"file_path": "/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java", "method_name": "chiSquare", "content": "     /**\n     * {@inheritDoc}\n     * <p><strong>Note: </strong>This implementation rescales the \n     * <code>expected</code> array if necessary to ensure that the sum of the\n     * expected and observed counts are equal.</p>\n     * \n     * @param observed array of observed frequency counts\n     * @param expected array of expected frequency counts\n     * @return chi-square test statistic\n     * @throws IllegalArgumentException if preconditions are not met\n     * or length is less than 2\n     */\n    public double chiSquare(double[] expected, long[] observed)\n        throws IllegalArgumentException {\n        if ((expected.length < 2) || (expected.length != observed.length)) {\n            throw new IllegalArgumentException(\n                    \"observed, expected array lengths incorrect\");\n        }\n        if (!isPositive(expected) || !isNonNegative(observed)) {\n            throw new IllegalArgumentException(\n                \"observed counts must be non-negative and expected counts must be postive\");\n        }\n        double sumSq = 0.0d;\n        double dev = 0.0d;\n        for (int i = 0; i < observed.length; i++) {\n                dev = ((double) observed[i] - expected[i]);\n                sumSq += dev * dev / expected[i];\n        }\n        return sumSq;\n    }", "javadoc_start_line": 52, "annotations_start_line": 64, "method_start_line": 65, "end_line": 81}, "steps": [{"file_path": "/src/test/org/apache/commons/math/stat/inference/TestUtilsTest.java", "method_name": "testChiSquare", "content": "    public void testChiSquare() throws Exception {\n        \n        // Target values computed using R version 1.8.1 \n        // Some assembly required ;-)  \n        //      Use sum((obs - exp)^2/exp) for the chi-square statistic and\n        //      1 - pchisq(sum((obs - exp)^2/exp), length(obs) - 1) for the p-value\n        \n        long[] observed = {10, 9, 11};\n        double[] expected = {10, 10, 10};\n        assertEquals(\"chi-square statistic\", 0.2,  TestUtils.chiSquare(expected, observed), 10E-12);\n        assertEquals(\"chi-square p-value\", 0.904837418036, TestUtils.chiSquareTest(expected, observed), 1E-10);\n        \n        long[] observed1 = { 500, 623, 72, 70, 31 };\n        double[] expected1 = { 485, 541, 82, 61, 37 };\n        assertEquals( \"chi-square test statistic\", 9.023307936427388, TestUtils.chiSquare(expected1, observed1), 1E-10);\n        assertEquals(\"chi-square p-value\", 0.06051952647453607, TestUtils.chiSquareTest(expected1, observed1), 1E-9);\n        assertTrue(\"chi-square test reject\", TestUtils.chiSquareTest(expected1, observed1, 0.07));\n        assertTrue(\"chi-square test accept\", !TestUtils.chiSquareTest(expected1, observed1, 0.05));\n\n        try {\n            TestUtils.chiSquareTest(expected1, observed1, 95);\n            fail(\"alpha out of range, IllegalArgumentException expected\");\n        } catch (IllegalArgumentException ex) {\n            // expected\n        }  \n        \n        long[] tooShortObs = { 0 };\n        double[] tooShortEx = { 1 };\n        try {\n            TestUtils.chiSquare(tooShortEx, tooShortObs);\n            fail(\"arguments too short, IllegalArgumentException expected\");\n        } catch (IllegalArgumentException ex) {\n            // expected\n        }\n\n        // unmatched arrays\n        long[] unMatchedObs = { 0, 1, 2, 3 };\n        double[] unMatchedEx = { 1, 1, 2 };\n        try {\n            TestUtils.chiSquare(unMatchedEx, unMatchedObs);\n            fail(\"arrays have different lengths, IllegalArgumentException expected\");\n        } catch (IllegalArgumentException ex) {\n            // expected\n        }\n        \n        // 0 expected count\n        expected[0] = 0;\n        try {\n            TestUtils.chiSquareTest(expected, observed, .01);\n            fail(\"bad expected count, IllegalArgumentException expected\");\n        } catch (IllegalArgumentException ex) {\n            // expected\n        } \n        \n        // negative observed count\n        expected[0] = 1;\n        observed[0] = -1;\n        try {\n            TestUtils.chiSquareTest(expected, observed, .01);\n            fail(\"bad expected count, IllegalArgumentException expected\");\n        } catch (IllegalArgumentException ex) {\n            // expected\n        } \n        \n    }", "javadoc_start_line": 44, "annotations_start_line": 44, "method_start_line": 44, "end_line": 108}, {"file_path": "/src/java/org/apache/commons/math/stat/inference/TestUtils.java", "method_name": "chiSquare", "content": "    /**\n     * @see org.apache.commons.math.stat.inference.ChiSquareTest#chiSquare(double[], long[])\n     */\n    public static double chiSquare(double[] expected, long[] observed)\n        throws IllegalArgumentException {\n        return chiSquareTest.chiSquare(expected, observed);\n    }", "javadoc_start_line": 273, "annotations_start_line": 276, "method_start_line": 277, "end_line": 279}]}, {"failing_test": {"className": " org.apache.commons.math.stat.inference.TestUtilsTest", "methodName": "testChiSquareLargeTestStatistic", "error": "junit.framework.AssertionFailedError", "message": "chi-square test statistic expected:<114875.90421929007> but was:<3624883.3429077636>"}, "patched_method": {"file_path": "/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java", "method_name": "chiSquare", "content": "     /**\n     * {@inheritDoc}\n     * <p><strong>Note: </strong>This implementation rescales the \n     * <code>expected</code> array if necessary to ensure that the sum of the\n     * expected and observed counts are equal.</p>\n     * \n     * @param observed array of observed frequency counts\n     * @param expected array of expected frequency counts\n     * @return chi-square test statistic\n     * @throws IllegalArgumentException if preconditions are not met\n     * or length is less than 2\n     */\n    public double chiSquare(double[] expected, long[] observed)\n        throws IllegalArgumentException {\n        if ((expected.length < 2) || (expected.length != observed.length)) {\n            throw new IllegalArgumentException(\n                    \"observed, expected array lengths incorrect\");\n        }\n        if (!isPositive(expected) || !isNonNegative(observed)) {\n            throw new IllegalArgumentException(\n                \"observed counts must be non-negative and expected counts must be postive\");\n        }\n        double sumSq = 0.0d;\n        double dev = 0.0d;\n        for (int i = 0; i < observed.length; i++) {\n                dev = ((double) observed[i] - expected[i]);\n                sumSq += dev * dev / expected[i];\n        }\n        return sumSq;\n    }", "javadoc_start_line": 52, "annotations_start_line": 64, "method_start_line": 65, "end_line": 81}, "steps": [{"file_path": "/src/test/org/apache/commons/math/stat/inference/TestUtilsTest.java", "method_name": "testChiSquareLargeTestStatistic", "content": "    public void testChiSquareLargeTestStatistic() throws Exception {\n        double[] exp = new double[] {\n                3389119.5, 649136.6, 285745.4, 25357364.76, 11291189.78, 543628.0, \n                232921.0, 437665.75\n        };\n\n        long[] obs = new long[] {\n                2372383, 584222, 257170, 17750155, 7903832, 489265, 209628, 393899\n        };\n        org.apache.commons.math.stat.inference.ChiSquareTestImpl csti =\n            new org.apache.commons.math.stat.inference.ChiSquareTestImpl(); \n        double cst = csti.chiSquareTest(exp, obs); \n        assertEquals(\"chi-square p-value\", 0.0, cst, 1E-3);\n        assertEquals( \"chi-square test statistic\", \n                114875.90421929007, TestUtils.chiSquare(exp, obs), 1E-9);\n    }", "javadoc_start_line": 168, "annotations_start_line": 168, "method_start_line": 168, "end_line": 183}, {"file_path": "/src/java/org/apache/commons/math/stat/inference/TestUtils.java", "method_name": "chiSquare", "content": "    /**\n     * @see org.apache.commons.math.stat.inference.ChiSquareTest#chiSquare(double[], long[])\n     */\n    public static double chiSquare(double[] expected, long[] observed)\n        throws IllegalArgumentException {\n        return chiSquareTest.chiSquare(expected, observed);\n    }", "javadoc_start_line": 273, "annotations_start_line": 276, "method_start_line": 277, "end_line": 279}]}, {"failing_test": {"className": " org.apache.commons.math.stat.inference.TestUtilsTest", "methodName": "testChiSquare", "error": "junit.framework.AssertionFailedError", "message": "chi-square test statistic expected:<9.023307936427388> but was:<16.413107036160778>"}, "patched_method": {"file_path": "/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java", "method_name": "chiSquare", "content": "     /**\n     * {@inheritDoc}\n     * <p><strong>Note: </strong>This implementation rescales the \n     * <code>expected</code> array if necessary to ensure that the sum of the\n     * expected and observed counts are equal.</p>\n     * \n     * @param observed array of observed frequency counts\n     * @param expected array of expected frequency counts\n     * @return chi-square test statistic\n     * @throws IllegalArgumentException if preconditions are not met\n     * or length is less than 2\n     */\n    public double chiSquare(double[] expected, long[] observed)\n        throws IllegalArgumentException {\n        if ((expected.length < 2) || (expected.length != observed.length)) {\n            throw new IllegalArgumentException(\n                    \"observed, expected array lengths incorrect\");\n        }\n        if (!isPositive(expected) || !isNonNegative(observed)) {\n            throw new IllegalArgumentException(\n                \"observed counts must be non-negative and expected counts must be postive\");\n        }\n        double sumSq = 0.0d;\n        double dev = 0.0d;\n        for (int i = 0; i < observed.length; i++) {\n                dev = ((double) observed[i] - expected[i]);\n                sumSq += dev * dev / expected[i];\n        }\n        return sumSq;\n    }", "javadoc_start_line": 52, "annotations_start_line": 64, "method_start_line": 65, "end_line": 81}, "steps": [{"file_path": "/src/test/org/apache/commons/math/stat/inference/TestUtilsTest.java", "method_name": "testChiSquare", "content": "    public void testChiSquare() throws Exception {\n        \n        // Target values computed using R version 1.8.1 \n        // Some assembly required ;-)  \n        //      Use sum((obs - exp)^2/exp) for the chi-square statistic and\n        //      1 - pchisq(sum((obs - exp)^2/exp), length(obs) - 1) for the p-value\n        \n        long[] observed = {10, 9, 11};\n        double[] expected = {10, 10, 10};\n        assertEquals(\"chi-square statistic\", 0.2,  TestUtils.chiSquare(expected, observed), 10E-12);\n        assertEquals(\"chi-square p-value\", 0.904837418036, TestUtils.chiSquareTest(expected, observed), 1E-10);\n        \n        long[] observed1 = { 500, 623, 72, 70, 31 };\n        double[] expected1 = { 485, 541, 82, 61, 37 };\n        assertEquals( \"chi-square test statistic\", 9.023307936427388, TestUtils.chiSquare(expected1, observed1), 1E-10);\n        assertEquals(\"chi-square p-value\", 0.06051952647453607, TestUtils.chiSquareTest(expected1, observed1), 1E-9);\n        assertTrue(\"chi-square test reject\", TestUtils.chiSquareTest(expected1, observed1, 0.07));\n        assertTrue(\"chi-square test accept\", !TestUtils.chiSquareTest(expected1, observed1, 0.05));\n\n        try {\n            TestUtils.chiSquareTest(expected1, observed1, 95);\n            fail(\"alpha out of range, IllegalArgumentException expected\");\n        } catch (IllegalArgumentException ex) {\n            // expected\n        }  \n        \n        long[] tooShortObs = { 0 };\n        double[] tooShortEx = { 1 };\n        try {\n            TestUtils.chiSquare(tooShortEx, tooShortObs);\n            fail(\"arguments too short, IllegalArgumentException expected\");\n        } catch (IllegalArgumentException ex) {\n            // expected\n        }\n\n        // unmatched arrays\n        long[] unMatchedObs = { 0, 1, 2, 3 };\n        double[] unMatchedEx = { 1, 1, 2 };\n        try {\n            TestUtils.chiSquare(unMatchedEx, unMatchedObs);\n            fail(\"arrays have different lengths, IllegalArgumentException expected\");\n        } catch (IllegalArgumentException ex) {\n            // expected\n        }\n        \n        // 0 expected count\n        expected[0] = 0;\n        try {\n            TestUtils.chiSquareTest(expected, observed, .01);\n            fail(\"bad expected count, IllegalArgumentException expected\");\n        } catch (IllegalArgumentException ex) {\n            // expected\n        } \n        \n        // negative observed count\n        expected[0] = 1;\n        observed[0] = -1;\n        try {\n            TestUtils.chiSquareTest(expected, observed, .01);\n            fail(\"bad expected count, IllegalArgumentException expected\");\n        } catch (IllegalArgumentException ex) {\n            // expected\n        } \n        \n    }", "javadoc_start_line": 44, "annotations_start_line": 44, "method_start_line": 44, "end_line": 108}, {"file_path": "/src/java/org/apache/commons/math/stat/inference/TestUtils.java", "method_name": "chiSquare", "content": "    /**\n     * @see org.apache.commons.math.stat.inference.ChiSquareTest#chiSquare(double[], long[])\n     */\n    public static double chiSquare(double[] expected, long[] observed)\n        throws IllegalArgumentException {\n        return chiSquareTest.chiSquare(expected, observed);\n    }", "javadoc_start_line": 273, "annotations_start_line": 276, "method_start_line": 277, "end_line": 279}]}], "project": {"name": "Math", "version": 102}}