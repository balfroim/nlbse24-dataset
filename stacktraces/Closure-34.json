{"tours": [{"failing_test": {"className": " com.google.javascript.jscomp.CodePrinterTest", "methodName": "testManyAdds", "error": "java.lang.StackOverflowError", "message": ""}, "patched_method": {"file_path": "/src/com/google/javascript/jscomp/CodeGenerator.java", "method_name": "add", "content": "  void add(Node n, Context context) {\n    if (!cc.continueProcessing()) {\n      return;\n    }\n\n    int type = n.getType();\n    String opstr = NodeUtil.opToStr(type);\n    int childCount = n.getChildCount();\n    Node first = n.getFirstChild();\n    Node last = n.getLastChild();\n\n    // Handle all binary operators\n    if (opstr != null && first != last) {\n      Preconditions.checkState(\n          childCount == 2,\n          \"Bad binary operator \\\"%s\\\": expected 2 arguments but got %s\",\n          opstr, childCount);\n      int p = NodeUtil.precedence(type);\n\n      // For right-hand-side of operations, only pass context if it's\n      // the IN_FOR_INIT_CLAUSE one.\n      Context rhsContext = getContextForNoInOperator(context);\n\n      // Handle associativity.\n      // e.g. if the parse tree is a * (b * c),\n      // we can simply generate a * b * c.\n      if (last.getType() == type &&\n          NodeUtil.isAssociative(type)) {\n        addExpr(first, p, context);\n        cc.addOp(opstr, true);\n        addExpr(last, p, rhsContext);\n      } else if (NodeUtil.isAssignmentOp(n) && NodeUtil.isAssignmentOp(last)) {\n        // Assignments are the only right-associative binary operators\n        addExpr(first, p, context);\n        cc.addOp(opstr, true);\n        addExpr(last, p, rhsContext);\n      } else {\n        addExpr(first, p, context);\n        cc.addOp(opstr, true);\n        addExpr(last, p + 1, rhsContext);\n      }\n      return;\n    }\n\n    cc.startSourceMapping(n);\n\n    switch (type) {\n      case Token.TRY: {\n        Preconditions.checkState(first.getNext().isBlock() &&\n                !first.getNext().hasMoreThanOneChild());\n        Preconditions.checkState(childCount >= 2 && childCount <= 3);\n\n        add(\"try\");\n        add(first, Context.PRESERVE_BLOCK);\n\n        // second child contains the catch block, or nothing if there\n        // isn't a catch block\n        Node catchblock = first.getNext().getFirstChild();\n        if (catchblock != null) {\n          add(catchblock);\n        }\n\n        if (childCount == 3) {\n          add(\"finally\");\n          add(last, Context.PRESERVE_BLOCK);\n        }\n        break;\n      }\n\n      case Token.CATCH:\n        Preconditions.checkState(childCount == 2);\n        add(\"catch(\");\n        add(first);\n        add(\")\");\n        add(last, Context.PRESERVE_BLOCK);\n        break;\n\n      case Token.THROW:\n        Preconditions.checkState(childCount == 1);\n        add(\"throw\");\n        add(first);\n\n        // Must have a ';' after a throw statement, otherwise safari can't\n        // parse this.\n        cc.endStatement(true);\n        break;\n\n      case Token.RETURN:\n        add(\"return\");\n        if (childCount == 1) {\n          add(first);\n        } else {\n          Preconditions.checkState(childCount == 0);\n        }\n        cc.endStatement();\n        break;\n\n      case Token.VAR:\n        if (first != null) {\n          add(\"var \");\n          addList(first, false, getContextForNoInOperator(context));\n        }\n        break;\n\n      case Token.LABEL_NAME:\n        Preconditions.checkState(!n.getString().isEmpty());\n        addIdentifier(n.getString());\n        break;\n\n      case Token.NAME:\n        if (first == null || first.isEmpty()) {\n          addIdentifier(n.getString());\n        } else {\n          Preconditions.checkState(childCount == 1);\n          addIdentifier(n.getString());\n          cc.addOp(\"=\", true);\n          if (first.isComma()) {\n            addExpr(first, NodeUtil.precedence(Token.ASSIGN), Context.OTHER);\n          } else {\n            // Add expression, consider nearby code at lowest level of\n            // precedence.\n            addExpr(first, 0, getContextForNoInOperator(context));\n          }\n        }\n        break;\n\n      case Token.ARRAYLIT:\n        add(\"[\");\n        addArrayList(first);\n        add(\"]\");\n        break;\n\n      case Token.PARAM_LIST:\n        add(\"(\");\n        addList(first);\n        add(\")\");\n        break;\n\n      case Token.COMMA:\n        Preconditions.checkState(childCount == 2);\n        unrollBinaryOperator(n, Token.COMMA, \",\", context, Context.OTHER, 0, 0);\n        break;\n\n      case Token.NUMBER:\n        Preconditions.checkState(childCount == 0);\n        cc.addNumber(n.getDouble());\n        break;\n\n      case Token.TYPEOF:\n      case Token.VOID:\n      case Token.NOT:\n      case Token.BITNOT:\n      case Token.POS: {\n        // All of these unary operators are right-associative\n        Preconditions.checkState(childCount == 1);\n        cc.addOp(NodeUtil.opToStrNoFail(type), false);\n        addExpr(first, NodeUtil.precedence(type), Context.OTHER);\n        break;\n      }\n\n      case Token.NEG: {\n        Preconditions.checkState(childCount == 1);\n\n        // It's important to our sanity checker that the code\n        // we print produces the same AST as the code we parse back.\n        // NEG is a weird case because Rhino parses \"- -2\" as \"2\".\n        if (n.getFirstChild().isNumber()) {\n          cc.addNumber(-n.getFirstChild().getDouble());\n        } else {\n          cc.addOp(NodeUtil.opToStrNoFail(type), false);\n          addExpr(first, NodeUtil.precedence(type), Context.OTHER);\n        }\n\n        break;\n      }\n\n      case Token.HOOK: {\n        Preconditions.checkState(childCount == 3);\n        int p = NodeUtil.precedence(type);\n        addExpr(first, p + 1, context);\n        cc.addOp(\"?\", true);\n        addExpr(first.getNext(), 1, Context.OTHER);\n        cc.addOp(\":\", true);\n        addExpr(last, 1, Context.OTHER);\n        break;\n      }\n\n      case Token.REGEXP:\n        if (!first.isString() ||\n            !last.isString()) {\n          throw new Error(\"Expected children to be strings\");\n        }\n\n        String regexp = regexpEscape(first.getString(), outputCharsetEncoder);\n\n        // I only use one .add because whitespace matters\n        if (childCount == 2) {\n          add(regexp + last.getString());\n        } else {\n          Preconditions.checkState(childCount == 1);\n          add(regexp);\n        }\n        break;\n\n      case Token.FUNCTION:\n        if (n.getClass() != Node.class) {\n          throw new Error(\"Unexpected Node subclass.\");\n        }\n        Preconditions.checkState(childCount == 3);\n        boolean funcNeedsParens = (context == Context.START_OF_EXPR);\n        if (funcNeedsParens) {\n          add(\"(\");\n        }\n\n        add(\"function\");\n        add(first);\n\n        add(first.getNext());\n        add(last, Context.PRESERVE_BLOCK);\n        cc.endFunction(context == Context.STATEMENT);\n\n        if (funcNeedsParens) {\n          add(\")\");\n        }\n        break;\n\n      case Token.GETTER_DEF:\n      case Token.SETTER_DEF:\n        Preconditions.checkState(n.getParent().isObjectLit());\n        Preconditions.checkState(childCount == 1);\n        Preconditions.checkState(first.isFunction());\n\n        // Get methods are unnamed\n        Preconditions.checkState(first.getFirstChild().getString().isEmpty());\n        if (type == Token.GETTER_DEF) {\n          // Get methods have no parameters.\n          Preconditions.checkState(!first.getChildAtIndex(1).hasChildren());\n          add(\"get \");\n        } else {\n          // Set methods have one parameter.\n          Preconditions.checkState(first.getChildAtIndex(1).hasOneChild());\n          add(\"set \");\n        }\n\n        // The name is on the GET or SET node.\n        String name = n.getString();\n        Node fn = first;\n        Node parameters = fn.getChildAtIndex(1);\n        Node body = fn.getLastChild();\n\n        // Add the property name.\n        if (!n.isQuotedString() &&\n            TokenStream.isJSIdentifier(name) &&\n            // do not encode literally any non-literal characters that were\n            // unicode escaped.\n            NodeUtil.isLatin(name)) {\n          add(name);\n        } else {\n          // Determine if the string is a simple number.\n          double d = getSimpleNumber(name);\n          if (!Double.isNaN(d)) {\n            cc.addNumber(d);\n          } else {\n            addJsString(n);\n          }\n        }\n\n        add(parameters);\n        add(body, Context.PRESERVE_BLOCK);\n        break;\n\n      case Token.SCRIPT:\n      case Token.BLOCK: {\n        if (n.getClass() != Node.class) {\n          throw new Error(\"Unexpected Node subclass.\");\n        }\n        boolean preserveBlock = context == Context.PRESERVE_BLOCK;\n        if (preserveBlock) {\n          cc.beginBlock();\n        }\n\n        boolean preferLineBreaks =\n            type == Token.SCRIPT ||\n            (type == Token.BLOCK &&\n                !preserveBlock &&\n                n.getParent() != null &&\n                n.getParent().isScript());\n        for (Node c = first; c != null; c = c.getNext()) {\n          add(c, Context.STATEMENT);\n\n          // VAR doesn't include ';' since it gets used in expressions\n          if (c.isVar()) {\n            cc.endStatement();\n          }\n\n          if (c.isFunction()) {\n            cc.maybeLineBreak();\n          }\n\n          // Prefer to break lines in between top-level statements\n          // because top level statements are more homogeneous.\n          if (preferLineBreaks) {\n            cc.notePreferredLineBreak();\n          }\n        }\n        if (preserveBlock) {\n          cc.endBlock(cc.breakAfterBlockFor(n, context == Context.STATEMENT));\n        }\n        break;\n      }\n\n      case Token.FOR:\n        if (childCount == 4) {\n          add(\"for(\");\n          if (first.isVar()) {\n            add(first, Context.IN_FOR_INIT_CLAUSE);\n          } else {\n            addExpr(first, 0, Context.IN_FOR_INIT_CLAUSE);\n          }\n          add(\";\");\n          add(first.getNext());\n          add(\";\");\n          add(first.getNext().getNext());\n          add(\")\");\n          addNonEmptyStatement(\n              last, getContextForNonEmptyExpression(context), false);\n        } else {\n          Preconditions.checkState(childCount == 3);\n          add(\"for(\");\n          add(first);\n          add(\"in\");\n          add(first.getNext());\n          add(\")\");\n          addNonEmptyStatement(\n              last, getContextForNonEmptyExpression(context), false);\n        }\n        break;\n\n      case Token.DO:\n        Preconditions.checkState(childCount == 2);\n        add(\"do\");\n        addNonEmptyStatement(first, Context.OTHER, false);\n        add(\"while(\");\n        add(last);\n        add(\")\");\n        cc.endStatement();\n        break;\n\n      case Token.WHILE:\n        Preconditions.checkState(childCount == 2);\n        add(\"while(\");\n        add(first);\n        add(\")\");\n        addNonEmptyStatement(\n            last, getContextForNonEmptyExpression(context), false);\n        break;\n\n      case Token.EMPTY:\n        Preconditions.checkState(childCount == 0);\n        break;\n\n      case Token.GETPROP: {\n        Preconditions.checkState(\n            childCount == 2,\n            \"Bad GETPROP: expected 2 children, but got %s\", childCount);\n        Preconditions.checkState(\n            last.isString(),\n            \"Bad GETPROP: RHS should be STRING\");\n        boolean needsParens = (first.isNumber());\n        if (needsParens) {\n          add(\"(\");\n        }\n        addExpr(first, NodeUtil.precedence(type), context);\n        if (needsParens) {\n          add(\")\");\n        }\n        add(\".\");\n        addIdentifier(last.getString());\n        break;\n      }\n\n      case Token.GETELEM:\n        Preconditions.checkState(\n            childCount == 2,\n            \"Bad GETELEM: expected 2 children but got %s\", childCount);\n        addExpr(first, NodeUtil.precedence(type), context);\n        add(\"[\");\n        add(first.getNext());\n        add(\"]\");\n        break;\n\n      case Token.WITH:\n        Preconditions.checkState(childCount == 2);\n        add(\"with(\");\n        add(first);\n        add(\")\");\n        addNonEmptyStatement(\n            last, getContextForNonEmptyExpression(context), false);\n        break;\n\n      case Token.INC:\n      case Token.DEC: {\n        Preconditions.checkState(childCount == 1);\n        String o = type == Token.INC ? \"++\" : \"--\";\n        int postProp = n.getIntProp(Node.INCRDECR_PROP);\n        // A non-zero post-prop value indicates a post inc/dec, default of zero\n        // is a pre-inc/dec.\n        if (postProp != 0) {\n          addExpr(first, NodeUtil.precedence(type), context);\n          cc.addOp(o, false);\n        } else {\n          cc.addOp(o, false);\n          add(first);\n        }\n        break;\n      }\n\n      case Token.CALL:\n        // We have two special cases here:\n        // 1) If the left hand side of the call is a direct reference to eval,\n        // then it must have a DIRECT_EVAL annotation. If it does not, then\n        // that means it was originally an indirect call to eval, and that\n        // indirectness must be preserved.\n        // 2) If the left hand side of the call is a property reference,\n        // then the call must not a FREE_CALL annotation. If it does, then\n        // that means it was originally an call without an explicit this and\n        // that must be preserved.\n        if (isIndirectEval(first)\n            || n.getBooleanProp(Node.FREE_CALL) && NodeUtil.isGet(first)) {\n          add(\"(0,\");\n          addExpr(first, NodeUtil.precedence(Token.COMMA), Context.OTHER);\n          add(\")\");\n        } else {\n          addExpr(first, NodeUtil.precedence(type), context);\n        }\n        add(\"(\");\n        addList(first.getNext());\n        add(\")\");\n        break;\n\n      case Token.IF:\n        boolean hasElse = childCount == 3;\n        boolean ambiguousElseClause =\n            context == Context.BEFORE_DANGLING_ELSE && !hasElse;\n        if (ambiguousElseClause) {\n          cc.beginBlock();\n        }\n\n        add(\"if(\");\n        add(first);\n        add(\")\");\n\n        if (hasElse) {\n          addNonEmptyStatement(\n              first.getNext(), Context.BEFORE_DANGLING_ELSE, false);\n          add(\"else\");\n          addNonEmptyStatement(\n              last, getContextForNonEmptyExpression(context), false);\n        } else {\n          addNonEmptyStatement(first.getNext(), Context.OTHER, false);\n          Preconditions.checkState(childCount == 2);\n        }\n\n        if (ambiguousElseClause) {\n          cc.endBlock();\n        }\n        break;\n\n      case Token.NULL:\n        Preconditions.checkState(childCount == 0);\n        add(\"null\");\n        break;\n\n      case Token.THIS:\n        Preconditions.checkState(childCount == 0);\n        add(\"this\");\n        break;\n\n      case Token.FALSE:\n        Preconditions.checkState(childCount == 0);\n        add(\"false\");\n        break;\n\n      case Token.TRUE:\n        Preconditions.checkState(childCount == 0);\n        add(\"true\");\n        break;\n\n      case Token.CONTINUE:\n        Preconditions.checkState(childCount <= 1);\n        add(\"continue\");\n        if (childCount == 1) {\n          if (!first.isLabelName()) {\n            throw new Error(\"Unexpected token type. Should be LABEL_NAME.\");\n          }\n          add(\" \");\n          add(first);\n        }\n        cc.endStatement();\n        break;\n\n      case Token.DEBUGGER:\n        Preconditions.checkState(childCount == 0);\n        add(\"debugger\");\n        cc.endStatement();\n        break;\n\n      case Token.BREAK:\n        Preconditions.checkState(childCount <= 1);\n        add(\"break\");\n        if (childCount == 1) {\n          if (!first.isLabelName()) {\n            throw new Error(\"Unexpected token type. Should be LABEL_NAME.\");\n          }\n          add(\" \");\n          add(first);\n        }\n        cc.endStatement();\n        break;\n\n      case Token.EXPR_RESULT:\n        Preconditions.checkState(childCount == 1);\n        add(first, Context.START_OF_EXPR);\n        cc.endStatement();\n        break;\n\n      case Token.NEW:\n        add(\"new \");\n        int precedence = NodeUtil.precedence(type);\n\n        // If the first child contains a CALL, then claim higher precedence\n        // to force parentheses. Otherwise, when parsed, NEW will bind to the\n        // first viable parentheses (don't traverse into functions).\n        if (NodeUtil.containsType(\n            first, Token.CALL, NodeUtil.MATCH_NOT_FUNCTION)) {\n          precedence = NodeUtil.precedence(first.getType()) + 1;\n        }\n        addExpr(first, precedence, Context.OTHER);\n\n        // '()' is optional when no arguments are present\n        Node next = first.getNext();\n        if (next != null) {\n          add(\"(\");\n          addList(next);\n          add(\")\");\n        }\n        break;\n\n      case Token.STRING:\n        if (childCount !=\n            ((n.getParent() != null &&\n              n.getParent().isObjectLit()) ? 1 : 0)) {\n          throw new IllegalStateException(\n              \"Unexpected String children: \" + n.getParent().toStringTree());\n        }\n        addJsString(n);\n        break;\n\n      case Token.DELPROP:\n        Preconditions.checkState(childCount == 1);\n        add(\"delete \");\n        add(first);\n        break;\n\n      case Token.OBJECTLIT: {\n        boolean needsParens = (context == Context.START_OF_EXPR);\n        if (needsParens) {\n          add(\"(\");\n        }\n        add(\"{\");\n        for (Node c = first; c != null; c = c.getNext()) {\n          if (c != first) {\n            cc.listSeparator();\n          }\n\n          if (c.isGetterDef() || c.isSetterDef()) {\n            add(c);\n          } else {\n            Preconditions.checkState(c.isString());\n            String key = c.getString();\n            // Object literal property names don't have to be quoted if they\n            // are not JavaScript keywords\n            if (!c.isQuotedString() &&\n                !TokenStream.isKeyword(key) &&\n                TokenStream.isJSIdentifier(key) &&\n                // do not encode literally any non-literal characters that\n                // were unicode escaped.\n                NodeUtil.isLatin(key)) {\n              add(key);\n            } else {\n              // Determine if the string is a simple number.\n              double d = getSimpleNumber(key);\n              if (!Double.isNaN(d)) {\n                cc.addNumber(d);\n              } else {\n                addExpr(c, 1, Context.OTHER);\n              }\n            }\n            add(\":\");\n            addExpr(c.getFirstChild(), 1, Context.OTHER);\n          }\n        }\n        add(\"}\");\n        if (needsParens) {\n          add(\")\");\n        }\n        break;\n      }\n\n      case Token.SWITCH:\n        add(\"switch(\");\n        add(first);\n        add(\")\");\n        cc.beginBlock();\n        addAllSiblings(first.getNext());\n        cc.endBlock(context == Context.STATEMENT);\n        break;\n\n      case Token.CASE:\n        Preconditions.checkState(childCount == 2);\n        add(\"case \");\n        add(first);\n        addCaseBody(last);\n        break;\n\n      case Token.DEFAULT_CASE:\n        Preconditions.checkState(childCount == 1);\n        add(\"default\");\n        addCaseBody(first);\n        break;\n\n      case Token.LABEL:\n        Preconditions.checkState(childCount == 2);\n        if (!first.isLabelName()) {\n          throw new Error(\"Unexpected token type. Should be LABEL_NAME.\");\n        }\n        add(first);\n        add(\":\");\n        addNonEmptyStatement(\n            last, getContextForNonEmptyExpression(context), true);\n        break;\n\n      default:\n        throw new Error(\"Unknown type \" + type + \"\\n\" + n.toStringTree());\n    }\n\n    cc.endSourceMapping(n);\n  }", "javadoc_start_line": 85, "annotations_start_line": 85, "method_start_line": 85, "end_line": 732}, "steps": [{"file_path": "/src/com/google/javascript/jscomp/CodePrinter.java", "method_name": "CodePrinter", "content": "class CodePrinter {", "javadoc_start_line": 35, "annotations_start_line": 35, "method_start_line": 35, "end_line": 35}, {"file_path": "/src/com/google/javascript/jscomp/CodePrinter.java", "method_name": "<clinit>", "content": "class CodePrinter {", "javadoc_start_line": 35, "annotations_start_line": 35, "method_start_line": 35, "end_line": 35}, {"file_path": "/src/com/google/javascript/jscomp/CodePrinter.java", "method_name": "toSource", "content": "  /**\n   * Converts a tree to js code\n   */\n  private static String toSource(Node root, Format outputFormat,\n                                 boolean lineBreak,  boolean preferEndOfFileBreak,\n                                 int lineLengthThreshold,\n                                 SourceMap sourceMap,\n                                 SourceMap.DetailLevel sourceMapDetailLevel,\n                                 Charset outputCharset,\n                                 boolean tagAsStrict) {\n    Preconditions.checkState(sourceMapDetailLevel != null);\n\n    boolean createSourceMap = (sourceMap != null);\n    MappedCodePrinter mcp =\n        outputFormat == Format.COMPACT\n        ? new CompactCodePrinter(\n            lineBreak, preferEndOfFileBreak, lineLengthThreshold,\n            createSourceMap, sourceMapDetailLevel)\n        : new PrettyCodePrinter(\n            lineLengthThreshold, createSourceMap, sourceMapDetailLevel);\n    CodeGenerator cg =\n        outputFormat == Format.TYPED\n        ? new TypedCodeGenerator(mcp, outputCharset)\n        : new CodeGenerator(mcp, outputCharset);\n\n    if (tagAsStrict) {\n      cg.tagAsStrict();\n    }\n\n    cg.add(root);\n    mcp.endFile();\n\n    String code = mcp.getCode();\n\n    if (createSourceMap) {\n      mcp.generateSourceMap(sourceMap);\n    }\n\n    return code;\n  }", "javadoc_start_line": 681, "annotations_start_line": 684, "method_start_line": 690, "end_line": 720}, {"file_path": "/src/com/google/javascript/jscomp/CodeGenerator.java", "method_name": "add", "content": "  void add(Node n) {\n    add(n, Context.OTHER);\n  }", "javadoc_start_line": 81, "annotations_start_line": 81, "method_start_line": 81, "end_line": 83}]}, {"failing_test": {"className": " com.google.javascript.jscomp.CodePrinterTest", "methodName": "testManyAdds", "error": "java.lang.StackOverflowError", "message": ""}, "patched_method": {"file_path": "/src/com/google/javascript/jscomp/CodePrinter.java", "method_name": "appendOp", "content": "    void appendOp(String op, boolean binOp) {\n      if (binOp) {\n        if (getLastChar() != ' ') {\n          append(\" \");\n        }\n        append(op);\n        append(\" \");\n      } else {\n        append(op);\n      }\n    }", "javadoc_start_line": 332, "annotations_start_line": 331, "method_start_line": 332, "end_line": 342}, "steps": [], "generation_failure": {"error": "Failed to generate stacktrace", "error_message": "[Errno 2] No such file or directory: './projects/Closure/34/results/stacktrace-testManyAdds-appendOp.csv'"}}, {"failing_test": {"className": " com.google.javascript.jscomp.CodePrinterTest", "methodName": "testManyAdds", "error": "java.lang.StackOverflowError", "message": ""}, "patched_method": {"file_path": "/lib/rhino/src/org/mozilla/javascript/CodeGenerator.java", "method_name": "compile", "content": "    public InterpreterData compile(CompilerEnvirons compilerEnv,\n                                   ScriptNode tree,\n                                   String encodedSource,\n                                   boolean returnFunction)\n    {\n        this.compilerEnv = compilerEnv;\n\n        if (Token.printTrees) {\n            System.out.println(\"before transform:\");\n            System.out.println(tree.toStringTree(tree));\n        }\n\n        new NodeTransformer().transform(tree);\n\n        if (Token.printTrees) {\n            System.out.println(\"after transform:\");\n            System.out.println(tree.toStringTree(tree));\n        }\n\n        if (returnFunction) {\n            scriptOrFn = tree.getFunctionNode(0);\n        } else {\n            scriptOrFn = tree;\n        }\n        itsData = new InterpreterData(compilerEnv.getLanguageVersion(),\n                                      scriptOrFn.getSourceName(),\n                                      encodedSource,\n                                      ((AstRoot)tree).isInStrictMode());\n        itsData.topLevel = true;\n\n        if (returnFunction) {\n            generateFunctionICode();\n        } else {\n            generateICodeFromTree(scriptOrFn);\n        }\n        return itsData;\n    }", "javadoc_start_line": 91, "annotations_start_line": 91, "method_start_line": 95, "end_line": 127}, "steps": [], "generation_failure": {"error": "Failed to generate stacktrace", "error_message": "Command failed: defects4j test -w ./projects/Closure/34\nRunning ant (compile.tests)................................................ FAIL\nExecuted command:  cd /home/balfroim/Documents/Shomidacode/script/projects/Closure/34 && /home/balfroim/Documents/Defect4J/defects4j/major/bin/ant -f /home/balfroim/Documents/Defect4J/defects4j/framework/projects/defects4j.build.xml -Dd4j.home=/home/balfroim/Documents/Defect4J/defects4j -Dd4j.dir.projects=/home/balfroim/Documents/Defect4J/defects4j/framework/projects -Dbasedir=/home/balfroim/Documents/Shomidacode/script/projects/Closure/34 -Dbuild.compiler=javac1.7  compile.tests 2>&1\nOpenJDK 64-Bit Server VM warning: ignoring option MaxPermSize=1G; support was removed in 8.0\nBuildfile: /home/balfroim/Documents/Defect4J/defects4j/framework/projects/defects4j.build.xml\n\nrhino:\n\nproperties:\n\ninit:\n\ncompile:\n\ncompile-most:\n    [javac] Compiling 2 source files to /home/balfroim/Documents/Shomidacode/script/projects/Closure/34/build/lib/classes\n    [javac] warning: [options] bootstrap class path not set in conjunction with -source 1.5\n    [javac] warning: /home/balfroim/.sdkman/candidates/java/8.0.362-amzn/lib/ct.sym(META-INF/sym/rt.jar/java/lang/Object.class): major version 52 is newer than 51, the highest major version supported by this compiler.\n    [javac]   It is recommended that the compiler be upgraded.\n    [javac] warning: /home/balfroim/.sdkman/candidates/java/8.0.362-amzn/lib/ct.sym(META-INF/sym/rt.jar/java/lang/String.class): major version 52 is newer than 51, the highest major version supported by this compiler.\n    [javac]   It is recommended that the compiler be upgraded.\n    [javac] warning: /home/balfroim/.sdkman/candidates/java/8.0.362-amzn/lib/ct.sym(META-INF/sym/rt.jar/java/lang/RuntimeException.class): major version 52 is newer than 51, the highest major version supported by this compiler.\n    [javac]   It is recommended that the compiler be upgraded.\n    [javac] warning: /home/balfroim/.sdkman/candidates/java/8.0.362-amzn/lib/ct.sym(META-INF/sym/rt.jar/java/io/BufferedWriter.class): major version 52 is newer than 51, the highest major version supported by this compiler.\n    [javac]   It is recommended that the compiler be upgraded.\n    [javac] warning: /home/balfroim/.sdkman/candidates/java/8.0.362-amzn/lib/ct.sym(META-INF/sym/rt.jar/java/io/IOException.class): major version 52 is newer than 51, the highest major version supported by this compiler.\n    [javac]   It is recommended that the compiler be upgraded.\n    [javac] warning: /home/balfroim/.sdkman/candidates/java/8.0.362-amzn/lib/ct.sym(META-INF/sym/rt.jar/java/io/PrintWriter.class): major version 52 is newer than 51, the highest major version supported by this compiler.\n    [javac]   It is recommended that the compiler be upgraded.\n    [javac] warning: /home/balfroim/.sdkman/candidates/java/8.0.362-amzn/lib/ct.sym(META-INF/sym/rt.jar/java/util/regex/Matcher.class): major version 52 is newer than 51, the highest major version supported by this compiler.\n    [javac]   It is recommended that the compiler be upgraded.\n    [javac] warning: /home/balfroim/.sdkman/candidates/java/8.0.362-amzn/lib/ct.sym(META-INF/sym/rt.jar/java/util/regex/Pattern.class): major version 52 is newer than 51, the highest major version supported by this compiler.\n    [javac]   It is recommended that the compiler be upgraded.\n    [javac] warning: /home/balfroim/.sdkman/candidates/java/8.0.362-amzn/lib/ct.sym(META-INF/sym/rt.jar/java/lang/StackTraceElement.class): major version 52 is newer than 51, the highest major version supported by this compiler.\n    [javac]   It is recommended that the compiler be upgraded.\n    [javac] /home/balfroim/.sdkman/candidates/java/8.0.362-amzn/lib/ct.sym(META-INF/sym/rt.jar/java/lang/Object.class): warning: Cannot find annotation method 'value()' in type 'Profile+Annotation': class file for jdk.Profile+Annotation not found\n    [javac] /home/balfroim/.sdkman/candidates/java/8.0.362-amzn/lib/ct.sym(META-INF/sym/rt.jar/java/lang/String.class): warning: Cannot find annotation method 'value()' in type 'Profile+Annotation'\n    [javac] /home/balfroim/.sdkman/candidates/java/8.0.362-amzn/lib/ct.sym(META-INF/sym/rt.jar/java/lang/RuntimeException.class): warning: Cannot find annotation method 'value()' in type 'Profile+Annotation'\n    [javac] /home/balfroim/.sdkman/candidates/java/8.0.362-amzn/lib/ct.sym(META-INF/sym/rt.jar/java/io/BufferedWriter.class): warning: Cannot find annotation method 'value()' in type 'Profile+Annotation'\n    [javac] /home/balfroim/.sdkman/candidates/java/8.0.362-amzn/lib/ct.sym(META-INF/sym/rt.jar/java/io/IOException.class): warning: Cannot find annotation method 'value()' in type 'Profile+Annotation'\n    [javac] /home/balfroim/.sdkman/candidates/java/8.0.362-amzn/lib/ct.sym(META-INF/sym/rt.jar/java/io/PrintWriter.class): warning: Cannot find annotation method 'value()' in type 'Profile+Annotation'\n    [javac] /home/balfroim/.sdkman/candidates/java/8.0.362-amzn/lib/ct.sym(META-INF/sym/rt.jar/java/util/regex/Matcher.class): warning: Cannot find annotation method 'value()' in type 'Profile+Annotation'\n    [javac] /home/balfroim/.sdkman/candidates/java/8.0.362-amzn/lib/ct.sym(META-INF/sym/rt.jar/java/util/regex/Pattern.class): warning: Cannot find annotation method 'value()' in type 'Profile+Annotation'\n    [javac] /home/balfroim/.sdkman/candidates/java/8.0.362-amzn/lib/ct.sym(META-INF/sym/rt.jar/java/lang/StackTraceElement.class): warning: Cannot find annotation method 'value()' in type 'Profile+Annotation'\n    [javac] warning: /home/balfroim/.sdkman/candidates/java/8.0.362-amzn/lib/ct.sym(META-INF/sym/rt.jar/java/lang/AutoCloseable.class): major version 52 is newer than 51, the highest major version supported by this compiler.\n    [javac]   It is recommended that the compiler be upgraded.\n    [javac] /home/balfroim/.sdkman/candidates/java/8.0.362-amzn/lib/ct.sym(META-INF/sym/rt.jar/java/lang/AutoCloseable.class): warning: Cannot find annotation method 'value()' in type 'Profile+Annotation'\n    [javac] /home/balfroim/Documents/Shomidacode/script/projects/Closure/34/lib/rhino/src/org/mozilla/javascript/StackTraceRecorder.java:15: error: duplicate class: lib.rhino.org.mozilla.javascript.StackTraceRecorder\n    [javac] public class StackTraceRecorder {\n    [javac]        ^\n    [javac] /home/balfroim/Documents/Shomidacode/script/projects/Closure/34/lib/rhino/src/org/mozilla/javascript/CodeGenerator.java:96: error: cannot access StackTraceRecorder\n    [javac] StackTraceRecorder recorder = new StackTraceRecorder(\"testManyAdds\", \"compile\", \"./results/stacktrace-testManyAdds-compile.csv\");\n    [javac] ^\n    [javac]   bad source file: /home/balfroim/Documents/Shomidacode/script/projects/Closure/34/lib/rhino/src/org/mozilla/javascript/StackTraceRecorder.java\n    [javac]     file does not contain class org.mozilla.javascript.StackTraceRecorder\n    [javac]     Please remove or make sure it appears in the correct subdirectory of the sourcepath.\n    [javac] 2 errors\n    [javac] 21 warnings\n\nBUILD FAILED\n/home/balfroim/Documents/Shomidacode/script/projects/Closure/34/build.xml:95: The following error occurred while executing this line:\n/home/balfroim/Documents/Shomidacode/script/projects/Closure/34/lib/rhino/build.xml:75: The following error occurred while executing this line:\n/home/balfroim/Documents/Shomidacode/script/projects/Closure/34/lib/rhino/src/build.xml:68: Compile failed; see the compiler error output for details.\n\nTotal time: 0 seconds\nCannot compile test suite! at /home/balfroim/Documents/Defect4J/defects4j/framework/bin/d4j/d4j-test line 134.\nCompilation failed in require at /home/balfroim/Documents/Defect4J/defects4j/framework/bin/defects4j line 195.\n\n"}}, {"failing_test": {"className": " com.google.javascript.jscomp.CodePrinterTest", "methodName": "testManyAdds", "error": "java.lang.StackOverflowError", "message": ""}, "patched_method": {"file_path": "/lib/rhino/src/org/mozilla/javascript/CodeGenerator.java", "method_name": "visitExpression", "content": "    private void visitExpression(Node node, int contextFlags)\n    {\n        int type = node.getType();\n        Node child = node.getFirstChild();\n        int savedStackDepth = stackDepth;\n        switch (type) {\n\n          case Token.FUNCTION:\n            {\n                int fnIndex = node.getExistingIntProp(Node.FUNCTION_PROP);\n                FunctionNode fn = scriptOrFn.getFunctionNode(fnIndex);\n                // See comments in visitStatement for Token.FUNCTION case\n                if (fn.getFunctionType() != FunctionNode.FUNCTION_EXPRESSION) {\n                    throw Kit.codeBug();\n                }\n                addIndexOp(Icode_CLOSURE_EXPR, fnIndex);\n                stackChange(1);\n            }\n            break;\n\n          case Token.LOCAL_LOAD:\n            {\n                int localIndex = getLocalBlockRef(node);\n                addIndexOp(Token.LOCAL_LOAD, localIndex);\n                stackChange(1);\n            }\n            break;\n\n          case Token.COMMA:\n            {\n                Node lastChild = node.getLastChild();\n                while (child != lastChild) {\n                    visitExpression(child, 0);\n                    addIcode(Icode_POP);\n                    stackChange(-1);\n                    child = child.getNext();\n                }\n                // Preserve tail context flag if any\n                visitExpression(child, contextFlags & ECF_TAIL);\n            }\n            break;\n\n          case Token.USE_STACK:\n            // Indicates that stack was modified externally,\n            // like placed catch object\n            stackChange(1);\n            break;\n\n          case Token.REF_CALL:\n          case Token.CALL:\n          case Token.NEW:\n            {\n                if (type == Token.NEW) {\n                    visitExpression(child, 0);\n                } else {\n                    generateCallFunAndThis(child);\n                }\n                int argCount = 0;\n                while ((child = child.getNext()) != null) {\n                    visitExpression(child, 0);\n                    ++argCount;\n                }\n                int callType = node.getIntProp(Node.SPECIALCALL_PROP,\n                                               Node.NON_SPECIALCALL);\n                if (callType != Node.NON_SPECIALCALL) {\n                    // embed line number and source filename\n                    addIndexOp(Icode_CALLSPECIAL, argCount);\n                    addUint8(callType);\n                    addUint8(type == Token.NEW ? 1 : 0);\n                    addUint16(lineNumber & 0xFFFF);\n                } else {\n                    // Only use the tail call optimization if we're not in a try\n                    // or we're not generating debug info (since the\n                    // optimization will confuse the debugger)\n                    if (type == Token.CALL && (contextFlags & ECF_TAIL) != 0 &&\n                        !compilerEnv.isGenerateDebugInfo() && !itsInTryFlag)\n                    {\n                        type = Icode_TAIL_CALL;\n                    }\n                    addIndexOp(type, argCount);\n                }\n                // adjust stack\n                if (type == Token.NEW) {\n                    // new: f, args -> result\n                    stackChange(-argCount);\n                } else {\n                    // call: f, thisObj, args -> result\n                    // ref_call: f, thisObj, args -> ref\n                    stackChange(-1 - argCount);\n                }\n                if (argCount > itsData.itsMaxCalleeArgs) {\n                    itsData.itsMaxCalleeArgs = argCount;\n                }\n            }\n            break;\n\n          case Token.AND:\n          case Token.OR:\n            {\n                visitExpression(child, 0);\n                addIcode(Icode_DUP);\n                stackChange(1);\n                int afterSecondJumpStart = iCodeTop;\n                int jump = (type == Token.AND) ? Token.IFNE : Token.IFEQ;\n                addGotoOp(jump);\n                stackChange(-1);\n                addIcode(Icode_POP);\n                stackChange(-1);\n                child = child.getNext();\n                // Preserve tail context flag if any\n                visitExpression(child, contextFlags & ECF_TAIL);\n                resolveForwardGoto(afterSecondJumpStart);\n            }\n            break;\n\n          case Token.HOOK:\n            {\n                Node ifThen = child.getNext();\n                Node ifElse = ifThen.getNext();\n                visitExpression(child, 0);\n                int elseJumpStart = iCodeTop;\n                addGotoOp(Token.IFNE);\n                stackChange(-1);\n                // Preserve tail context flag if any\n                visitExpression(ifThen, contextFlags & ECF_TAIL);\n                int afterElseJumpStart = iCodeTop;\n                addGotoOp(Token.GOTO);\n                resolveForwardGoto(elseJumpStart);\n                stackDepth = savedStackDepth;\n                // Preserve tail context flag if any\n                visitExpression(ifElse, contextFlags & ECF_TAIL);\n                resolveForwardGoto(afterElseJumpStart);\n            }\n            break;\n\n          case Token.GETPROP:\n          case Token.GETPROPNOWARN:\n            visitExpression(child, 0);\n            child = child.getNext();\n            addStringOp(type, child.getString());\n            break;\n\n          case Token.DELPROP:\n            boolean isName = child.getType() == Token.BINDNAME;\n            visitExpression(child, 0);\n            child = child.getNext();\n            visitExpression(child, 0);\n            if (isName) {\n                // special handling for delete name\n                addIcode(Icode_DELNAME);\n            } else {\n                addToken(Token.DELPROP);\n            }\n            stackChange(-1);\n            break;\n\n          case Token.GETELEM:\n          case Token.BITAND:\n          case Token.BITOR:\n          case Token.BITXOR:\n          case Token.LSH:\n          case Token.RSH:\n          case Token.URSH:\n          case Token.ADD:\n          case Token.SUB:\n          case Token.MOD:\n          case Token.DIV:\n          case Token.MUL:\n          case Token.EQ:\n          case Token.NE:\n          case Token.SHEQ:\n          case Token.SHNE:\n          case Token.IN:\n          case Token.INSTANCEOF:\n          case Token.LE:\n          case Token.LT:\n          case Token.GE:\n          case Token.GT:\n            visitExpression(child, 0);\n            child = child.getNext();\n            visitExpression(child, 0);\n            addToken(type);\n            stackChange(-1);\n            break;\n\n          case Token.POS:\n          case Token.NEG:\n          case Token.NOT:\n          case Token.BITNOT:\n          case Token.TYPEOF:\n          case Token.VOID:\n            visitExpression(child, 0);\n            if (type == Token.VOID) {\n                addIcode(Icode_POP);\n                addIcode(Icode_UNDEF);\n            } else {\n                addToken(type);\n            }\n            break;\n\n          case Token.GET_REF:\n          case Token.DEL_REF:\n            visitExpression(child, 0);\n            addToken(type);\n            break;\n\n          case Token.SETPROP:\n          case Token.SETPROP_OP:\n            {\n                visitExpression(child, 0);\n                child = child.getNext();\n                String property = child.getString();\n                child = child.getNext();\n                if (type == Token.SETPROP_OP) {\n                    addIcode(Icode_DUP);\n                    stackChange(1);\n                    addStringOp(Token.GETPROP, property);\n                    // Compensate for the following USE_STACK\n                    stackChange(-1);\n                }\n                visitExpression(child, 0);\n                addStringOp(Token.SETPROP, property);\n                stackChange(-1);\n            }\n            break;\n\n          case Token.SETELEM:\n          case Token.SETELEM_OP:\n            visitExpression(child, 0);\n            child = child.getNext();\n            visitExpression(child, 0);\n            child = child.getNext();\n            if (type == Token.SETELEM_OP) {\n                addIcode(Icode_DUP2);\n                stackChange(2);\n                addToken(Token.GETELEM);\n                stackChange(-1);\n                // Compensate for the following USE_STACK\n                stackChange(-1);\n            }\n            visitExpression(child, 0);\n            addToken(Token.SETELEM);\n            stackChange(-2);\n            break;\n\n          case Token.SET_REF:\n          case Token.SET_REF_OP:\n            visitExpression(child, 0);\n            child = child.getNext();\n            if (type == Token.SET_REF_OP) {\n                addIcode(Icode_DUP);\n                stackChange(1);\n                addToken(Token.GET_REF);\n                // Compensate for the following USE_STACK\n                stackChange(-1);\n            }\n            visitExpression(child, 0);\n            addToken(Token.SET_REF);\n            stackChange(-1);\n            break;\n\n          case Token.STRICT_SETNAME:\n          case Token.SETNAME:\n            {\n                String name = child.getString();\n                visitExpression(child, 0);\n                child = child.getNext();\n                visitExpression(child, 0);\n                addStringOp(type, name);\n                stackChange(-1);\n            }\n            break;\n\n          case Token.SETCONST:\n            {\n                String name = child.getString();\n                visitExpression(child, 0);\n                child = child.getNext();\n                visitExpression(child, 0);\n                addStringOp(Icode_SETCONST, name);\n                stackChange(-1);\n            }\n            break;\n\n          case Token.TYPEOFNAME:\n            {\n                int index = -1;\n                // use typeofname if an activation frame exists\n                // since the vars all exist there instead of in jregs\n                if (itsInFunctionFlag && !itsData.itsNeedsActivation)\n                    index = scriptOrFn.getIndexForNameNode(node);\n                if (index == -1) {\n                    addStringOp(Icode_TYPEOFNAME, node.getString());\n                    stackChange(1);\n                } else {\n                    addVarOp(Token.GETVAR, index);\n                    stackChange(1);\n                    addToken(Token.TYPEOF);\n                }\n            }\n            break;\n\n          case Token.BINDNAME:\n          case Token.NAME:\n          case Token.STRING:\n            addStringOp(type, node.getString());\n            stackChange(1);\n            break;\n\n          case Token.INC:\n          case Token.DEC:\n            visitIncDec(node, child);\n            break;\n\n          case Token.NUMBER:\n            {\n                double num = node.getDouble();\n                int inum = (int)num;\n                if (inum == num) {\n                    if (inum == 0) {\n                        addIcode(Icode_ZERO);\n                        // Check for negative zero\n                        if (1.0 / num < 0.0) {\n                            addToken(Token.NEG);\n                        }\n                    } else if (inum == 1) {\n                        addIcode(Icode_ONE);\n                    } else if ((short)inum == inum) {\n                        addIcode(Icode_SHORTNUMBER);\n                        // write short as uin16 bit pattern\n                        addUint16(inum & 0xFFFF);\n                    } else {\n                        addIcode(Icode_INTNUMBER);\n                        addInt(inum);\n                    }\n                } else {\n                    int index = getDoubleIndex(num);\n                    addIndexOp(Token.NUMBER, index);\n                }\n                stackChange(1);\n            }\n            break;\n\n          case Token.GETVAR:\n            {\n                if (itsData.itsNeedsActivation) Kit.codeBug();\n                int index = scriptOrFn.getIndexForNameNode(node);\n                addVarOp(Token.GETVAR, index);\n                stackChange(1);\n            }\n            break;\n\n          case Token.SETVAR:\n            {\n                if (itsData.itsNeedsActivation) Kit.codeBug();\n                int index = scriptOrFn.getIndexForNameNode(child);\n                child = child.getNext();\n                visitExpression(child, 0);\n                addVarOp(Token.SETVAR, index);\n            }\n            break;\n\n          case Token.SETCONSTVAR:\n            {\n                if (itsData.itsNeedsActivation) Kit.codeBug();\n                int index = scriptOrFn.getIndexForNameNode(child);\n                child = child.getNext();\n                visitExpression(child, 0);\n                addVarOp(Token.SETCONSTVAR, index);\n            }\n            break;\n\n          case Token.NULL:\n          case Token.THIS:\n          case Token.THISFN:\n          case Token.FALSE:\n          case Token.TRUE:\n            addToken(type);\n            stackChange(1);\n            break;\n\n          case Token.ENUM_NEXT:\n          case Token.ENUM_ID:\n            addIndexOp(type, getLocalBlockRef(node));\n            stackChange(1);\n            break;\n\n          case Token.REGEXP:\n            {\n                int index = node.getExistingIntProp(Node.REGEXP_PROP);\n                addIndexOp(Token.REGEXP, index);\n                stackChange(1);\n            }\n            break;\n\n          case Token.ARRAYLIT:\n          case Token.OBJECTLIT:\n            visitLiteral(node, child);\n            break;\n\n          case Token.ARRAYCOMP:\n            visitArrayComprehension(node, child, child.getNext());\n            break;\n\n          case Token.REF_SPECIAL:\n            visitExpression(child, 0);\n            addStringOp(type, (String)node.getProp(Node.NAME_PROP));\n            break;\n\n          case Token.REF_MEMBER:\n          case Token.REF_NS_MEMBER:\n          case Token.REF_NAME:\n          case Token.REF_NS_NAME:\n            {\n                int memberTypeFlags = node.getIntProp(Node.MEMBER_TYPE_PROP, 0);\n                // generate possible target, possible namespace and member\n                int childCount = 0;\n                do {\n                    visitExpression(child, 0);\n                    ++childCount;\n                    child = child.getNext();\n                } while (child != null);\n                addIndexOp(type, memberTypeFlags);\n                stackChange(1 - childCount);\n            }\n            break;\n\n          case Token.DOTQUERY:\n            {\n                int queryPC;\n                updateLineNumber(node);\n                visitExpression(child, 0);\n                addIcode(Icode_ENTERDQ);\n                stackChange(-1);\n                queryPC = iCodeTop;\n                visitExpression(child.getNext(), 0);\n                addBackwardGoto(Icode_LEAVEDQ, queryPC);\n            }\n            break;\n\n          case Token.DEFAULTNAMESPACE :\n          case Token.ESCXMLATTR :\n          case Token.ESCXMLTEXT :\n            visitExpression(child, 0);\n            addToken(type);\n            break;\n\n          case Token.YIELD:\n            if (child != null) {\n                visitExpression(child, 0);\n            } else {\n                addIcode(Icode_UNDEF);\n                stackChange(1);\n            }\n            addToken(Token.YIELD);\n            addUint16(node.getLineno() & 0xFFFF);\n            break;\n\n          case Token.WITHEXPR: {\n            Node enterWith = node.getFirstChild();\n            Node with = enterWith.getNext();\n            visitExpression(enterWith.getFirstChild(), 0);\n            addToken(Token.ENTERWITH);\n            stackChange(-1);\n            visitExpression(with.getFirstChild(), 0);\n            addToken(Token.LEAVEWITH);\n            break;\n          }\n\n          default:\n            throw badTree(node);\n        }\n        if (savedStackDepth + 1 != stackDepth) {\n            Kit.codeBug();\n        }\n    }", "javadoc_start_line": 536, "annotations_start_line": 536, "method_start_line": 537, "end_line": 1011}, "steps": [], "generation_failure": {"error": "Failed to generate stacktrace", "error_message": "Command failed: defects4j test -w ./projects/Closure/34\nRunning ant (compile.tests)................................................ FAIL\nExecuted command:  cd /home/balfroim/Documents/Shomidacode/script/projects/Closure/34 && /home/balfroim/Documents/Defect4J/defects4j/major/bin/ant -f /home/balfroim/Documents/Defect4J/defects4j/framework/projects/defects4j.build.xml -Dd4j.home=/home/balfroim/Documents/Defect4J/defects4j -Dd4j.dir.projects=/home/balfroim/Documents/Defect4J/defects4j/framework/projects -Dbasedir=/home/balfroim/Documents/Shomidacode/script/projects/Closure/34 -Dbuild.compiler=javac1.7  compile.tests 2>&1\nOpenJDK 64-Bit Server VM warning: ignoring option MaxPermSize=1G; support was removed in 8.0\nBuildfile: /home/balfroim/Documents/Defect4J/defects4j/framework/projects/defects4j.build.xml\n\nrhino:\n\nproperties:\n\ninit:\n\ncompile:\n\ncompile-most:\n    [javac] Compiling 2 source files to /home/balfroim/Documents/Shomidacode/script/projects/Closure/34/build/lib/classes\n    [javac] warning: [options] bootstrap class path not set in conjunction with -source 1.5\n    [javac] warning: /home/balfroim/.sdkman/candidates/java/8.0.362-amzn/lib/ct.sym(META-INF/sym/rt.jar/java/lang/Object.class): major version 52 is newer than 51, the highest major version supported by this compiler.\n    [javac]   It is recommended that the compiler be upgraded.\n    [javac] warning: /home/balfroim/.sdkman/candidates/java/8.0.362-amzn/lib/ct.sym(META-INF/sym/rt.jar/java/lang/String.class): major version 52 is newer than 51, the highest major version supported by this compiler.\n    [javac]   It is recommended that the compiler be upgraded.\n    [javac] warning: /home/balfroim/.sdkman/candidates/java/8.0.362-amzn/lib/ct.sym(META-INF/sym/rt.jar/java/lang/RuntimeException.class): major version 52 is newer than 51, the highest major version supported by this compiler.\n    [javac]   It is recommended that the compiler be upgraded.\n    [javac] warning: /home/balfroim/.sdkman/candidates/java/8.0.362-amzn/lib/ct.sym(META-INF/sym/rt.jar/java/io/BufferedWriter.class): major version 52 is newer than 51, the highest major version supported by this compiler.\n    [javac]   It is recommended that the compiler be upgraded.\n    [javac] warning: /home/balfroim/.sdkman/candidates/java/8.0.362-amzn/lib/ct.sym(META-INF/sym/rt.jar/java/io/IOException.class): major version 52 is newer than 51, the highest major version supported by this compiler.\n    [javac]   It is recommended that the compiler be upgraded.\n    [javac] warning: /home/balfroim/.sdkman/candidates/java/8.0.362-amzn/lib/ct.sym(META-INF/sym/rt.jar/java/io/PrintWriter.class): major version 52 is newer than 51, the highest major version supported by this compiler.\n    [javac]   It is recommended that the compiler be upgraded.\n    [javac] warning: /home/balfroim/.sdkman/candidates/java/8.0.362-amzn/lib/ct.sym(META-INF/sym/rt.jar/java/util/regex/Matcher.class): major version 52 is newer than 51, the highest major version supported by this compiler.\n    [javac]   It is recommended that the compiler be upgraded.\n    [javac] warning: /home/balfroim/.sdkman/candidates/java/8.0.362-amzn/lib/ct.sym(META-INF/sym/rt.jar/java/util/regex/Pattern.class): major version 52 is newer than 51, the highest major version supported by this compiler.\n    [javac]   It is recommended that the compiler be upgraded.\n    [javac] warning: /home/balfroim/.sdkman/candidates/java/8.0.362-amzn/lib/ct.sym(META-INF/sym/rt.jar/java/lang/StackTraceElement.class): major version 52 is newer than 51, the highest major version supported by this compiler.\n    [javac]   It is recommended that the compiler be upgraded.\n    [javac] /home/balfroim/.sdkman/candidates/java/8.0.362-amzn/lib/ct.sym(META-INF/sym/rt.jar/java/lang/Object.class): warning: Cannot find annotation method 'value()' in type 'Profile+Annotation': class file for jdk.Profile+Annotation not found\n    [javac] /home/balfroim/.sdkman/candidates/java/8.0.362-amzn/lib/ct.sym(META-INF/sym/rt.jar/java/lang/String.class): warning: Cannot find annotation method 'value()' in type 'Profile+Annotation'\n    [javac] /home/balfroim/.sdkman/candidates/java/8.0.362-amzn/lib/ct.sym(META-INF/sym/rt.jar/java/lang/RuntimeException.class): warning: Cannot find annotation method 'value()' in type 'Profile+Annotation'\n    [javac] /home/balfroim/.sdkman/candidates/java/8.0.362-amzn/lib/ct.sym(META-INF/sym/rt.jar/java/io/BufferedWriter.class): warning: Cannot find annotation method 'value()' in type 'Profile+Annotation'\n    [javac] /home/balfroim/.sdkman/candidates/java/8.0.362-amzn/lib/ct.sym(META-INF/sym/rt.jar/java/io/IOException.class): warning: Cannot find annotation method 'value()' in type 'Profile+Annotation'\n    [javac] /home/balfroim/.sdkman/candidates/java/8.0.362-amzn/lib/ct.sym(META-INF/sym/rt.jar/java/io/PrintWriter.class): warning: Cannot find annotation method 'value()' in type 'Profile+Annotation'\n    [javac] /home/balfroim/.sdkman/candidates/java/8.0.362-amzn/lib/ct.sym(META-INF/sym/rt.jar/java/util/regex/Matcher.class): warning: Cannot find annotation method 'value()' in type 'Profile+Annotation'\n    [javac] /home/balfroim/.sdkman/candidates/java/8.0.362-amzn/lib/ct.sym(META-INF/sym/rt.jar/java/util/regex/Pattern.class): warning: Cannot find annotation method 'value()' in type 'Profile+Annotation'\n    [javac] /home/balfroim/.sdkman/candidates/java/8.0.362-amzn/lib/ct.sym(META-INF/sym/rt.jar/java/lang/StackTraceElement.class): warning: Cannot find annotation method 'value()' in type 'Profile+Annotation'\n    [javac] warning: /home/balfroim/.sdkman/candidates/java/8.0.362-amzn/lib/ct.sym(META-INF/sym/rt.jar/java/lang/AutoCloseable.class): major version 52 is newer than 51, the highest major version supported by this compiler.\n    [javac]   It is recommended that the compiler be upgraded.\n    [javac] /home/balfroim/.sdkman/candidates/java/8.0.362-amzn/lib/ct.sym(META-INF/sym/rt.jar/java/lang/AutoCloseable.class): warning: Cannot find annotation method 'value()' in type 'Profile+Annotation'\n    [javac] warning: /home/balfroim/.sdkman/candidates/java/8.0.362-amzn/lib/ct.sym(META-INF/sym/rt.jar/java/lang/System.class): major version 52 is newer than 51, the highest major version supported by this compiler.\n    [javac]   It is recommended that the compiler be upgraded.\n    [javac] /home/balfroim/.sdkman/candidates/java/8.0.362-amzn/lib/ct.sym(META-INF/sym/rt.jar/java/lang/System.class): warning: Cannot find annotation method 'value()' in type 'Profile+Annotation'\n    [javac] warning: /home/balfroim/.sdkman/candidates/java/8.0.362-amzn/lib/ct.sym(META-INF/sym/rt.jar/java/io/PrintStream.class): major version 52 is newer than 51, the highest major version supported by this compiler.\n    [javac]   It is recommended that the compiler be upgraded.\n    [javac] /home/balfroim/.sdkman/candidates/java/8.0.362-amzn/lib/ct.sym(META-INF/sym/rt.jar/java/io/PrintStream.class): warning: Cannot find annotation method 'value()' in type 'Profile+Annotation'\n    [javac] warning: /home/balfroim/.sdkman/candidates/java/8.0.362-amzn/lib/ct.sym(META-INF/sym/rt.jar/java/io/FilterOutputStream.class): major version 52 is newer than 51, the highest major version supported by this compiler.\n    [javac]   It is recommended that the compiler be upgraded.\n    [javac] /home/balfroim/.sdkman/candidates/java/8.0.362-amzn/lib/ct.sym(META-INF/sym/rt.jar/java/io/FilterOutputStream.class): warning: Cannot find annotation method 'value()' in type 'Profile+Annotation'\n    [javac] warning: /home/balfroim/.sdkman/candidates/java/8.0.362-amzn/lib/ct.sym(META-INF/sym/rt.jar/java/io/OutputStream.class): major version 52 is newer than 51, the highest major version supported by this compiler.\n    [javac]   It is recommended that the compiler be upgraded.\n    [javac] /home/balfroim/.sdkman/candidates/java/8.0.362-amzn/lib/ct.sym(META-INF/sym/rt.jar/java/io/OutputStream.class): warning: Cannot find annotation method 'value()' in type 'Profile+Annotation'\n    [javac] warning: /home/balfroim/.sdkman/candidates/java/8.0.362-amzn/lib/ct.sym(META-INF/sym/rt.jar/java/lang/Throwable.class): major version 52 is newer than 51, the highest major version supported by this compiler.\n    [javac]   It is recommended that the compiler be upgraded.\n    [javac] /home/balfroim/.sdkman/candidates/java/8.0.362-amzn/lib/ct.sym(META-INF/sym/rt.jar/java/lang/Throwable.class): warning: Cannot find annotation method 'value()' in type 'Profile+Annotation'\n    [javac] warning: /home/balfroim/.sdkman/candidates/java/8.0.362-amzn/lib/ct.sym(META-INF/sym/rt.jar/java/lang/Exception.class): major version 52 is newer than 51, the highest major version supported by this compiler.\n    [javac]   It is recommended that the compiler be upgraded.\n    [javac] /home/balfroim/.sdkman/candidates/java/8.0.362-amzn/lib/ct.sym(META-INF/sym/rt.jar/java/lang/Exception.class): warning: Cannot find annotation method 'value()' in type 'Profile+Annotation'\n    [javac] /home/balfroim/Documents/Shomidacode/script/projects/Closure/34/lib/rhino/src/org/mozilla/javascript/StackTraceRecorder.java:15: error: duplicate class: lib.rhino.org.mozilla.javascript.StackTraceRecorder\n    [javac] public class StackTraceRecorder {\n    [javac]        ^\n    [javac] /home/balfroim/Documents/Shomidacode/script/projects/Closure/34/lib/rhino/src/org/mozilla/javascript/CodeGenerator.java:538: error: cannot access StackTraceRecorder\n    [javac] StackTraceRecorder recorder = new StackTraceRecorder(\"testManyAdds\", \"visitExpression\", \"./results/stacktrace-testManyAdds-visitExpression.csv\");\n    [javac] ^\n    [javac]   bad source file: /home/balfroim/Documents/Shomidacode/script/projects/Closure/34/lib/rhino/src/org/mozilla/javascript/StackTraceRecorder.java\n    [javac]     file does not contain class org.mozilla.javascript.StackTraceRecorder\n    [javac]     Please remove or make sure it appears in the correct subdirectory of the sourcepath.\n    [javac] 2 errors\n    [javac] 33 warnings\n\nBUILD FAILED\n/home/balfroim/Documents/Shomidacode/script/projects/Closure/34/build.xml:95: The following error occurred while executing this line:\n/home/balfroim/Documents/Shomidacode/script/projects/Closure/34/lib/rhino/build.xml:75: The following error occurred while executing this line:\n/home/balfroim/Documents/Shomidacode/script/projects/Closure/34/lib/rhino/src/build.xml:68: Compile failed; see the compiler error output for details.\n\nTotal time: 0 seconds\nCannot compile test suite! at /home/balfroim/Documents/Defect4J/defects4j/framework/bin/d4j/d4j-test line 134.\nCompilation failed in require at /home/balfroim/Documents/Defect4J/defects4j/framework/bin/defects4j line 195.\n\n"}}, {"failing_test": {"className": " com.google.javascript.jscomp.CodePrinterTest", "methodName": "testManyAdds", "error": "java.lang.StackOverflowError", "message": ""}, "patched_method": {"file_path": "/src/com/google/javascript/jscomp/CodeGenerator.java", "method_name": "unrollBinaryOperator", "content": "  /**\n   * We could use addList recursively here, but sometimes we produce\n   * very deeply nested operators and run out of stack space, so we\n   * just unroll the recursion when possible.\n   *\n   * We assume nodes are left-recursive.\n   */\n  private void unrollBinaryOperator(\n      Node n, int op, String opStr, Context context,\n      Context rhsContext, int leftPrecedence, int rightPrecedence) {\n    Node firstNonOperator = n.getFirstChild();\n    while (firstNonOperator.getType() == op) {\n      firstNonOperator = firstNonOperator.getFirstChild();\n    }\n\n    addExpr(firstNonOperator, leftPrecedence, context);\n\n    Node current = firstNonOperator;\n    do {\n      current = current.getParent();\n      cc.listSeparator();\n      addExpr(current.getFirstChild().getNext(), rightPrecedence, rhsContext);\n    } while (current != n);\n  }", "javadoc_start_line": 734, "annotations_start_line": 741, "method_start_line": 743, "end_line": 757}, "steps": [], "generation_failure": {"error": "Failed to generate stacktrace", "error_message": "[Errno 2] No such file or directory: './projects/Closure/34/results/stacktrace-testManyAdds-unrollBinaryOperator.csv'"}}], "project": {"name": "Closure", "version": 34}}