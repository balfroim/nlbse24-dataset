{"tours": [{"failing_test": {"className": " org.joda.time.chrono.TestGJChronology", "methodName": "testLeapYearRulesConstruction", "error": "org.joda.time.IllegalFieldValueException", "message": "Value 29 for dayOfMonth must be in the range [1,28]"}, "patched_method": {"file_path": "/src/main/java/org/joda/time/chrono/GJChronology.java", "method_name": "getDateTimeMillis", "content": "    public long getDateTimeMillis(int year, int monthOfYear, int dayOfMonth,\n                                  int hourOfDay, int minuteOfHour,\n                                  int secondOfMinute, int millisOfSecond)\n        throws IllegalArgumentException\n    {\n        Chronology base;\n        if ((base = getBase()) != null) {\n            return base.getDateTimeMillis\n                (year, monthOfYear, dayOfMonth,\n                 hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);\n        }\n\n        // Assume date is Gregorian.\n        long instant;\n            instant = iGregorianChronology.getDateTimeMillis\n                (year, monthOfYear, dayOfMonth,\n                 hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);\n        if (instant < iCutoverMillis) {\n            // Maybe it's Julian.\n            instant = iJulianChronology.getDateTimeMillis\n                (year, monthOfYear, dayOfMonth,\n                 hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);\n            if (instant >= iCutoverMillis) {\n                // Okay, it's in the illegal cutover gap.\n                throw new IllegalArgumentException(\"Specified date does not exist\");\n            }\n        }\n        return instant;\n    }", "javadoc_start_line": 350, "annotations_start_line": 350, "method_start_line": 354, "end_line": 378}, "steps": [{"file_path": "/src/test/java/org/joda/time/chrono/TestGJChronology.java", "method_name": "testLeapYearRulesConstruction", "content": "    public void testLeapYearRulesConstruction() {\n        // 1500 not leap in Gregorian, but is leap in Julian\n        DateMidnight dt = new DateMidnight(1500, 2, 29, GJChronology.getInstanceUTC());\n        assertEquals(dt.getYear(), 1500);\n        assertEquals(dt.getMonthOfYear(), 2);\n        assertEquals(dt.getDayOfMonth(), 29);\n    }", "javadoc_start_line": 494, "annotations_start_line": 494, "method_start_line": 494, "end_line": 500}, {"file_path": "/src/main/java/org/joda/time/DateMidnight.java", "method_name": "DateMidnight", "content": "    /**\n     * Constructs an instance from datetime field values\n     * using the specified chronology.\n     * The constructed object will have a local time of midnight.\n     * <p>\n     * If the chronology is null, <code>ISOChronology</code>\n     * in the default time zone is used.\n     *\n     * @param year  the year\n     * @param monthOfYear  the month of the year\n     * @param dayOfMonth  the day of the month\n     * @param chronology  the chronology, null means ISOChronology in default zone\n     */\n    public DateMidnight(int year, int monthOfYear, int dayOfMonth, Chronology chronology) {\n        super(year, monthOfYear, dayOfMonth, 0, 0, 0, 0, chronology);\n    }", "javadoc_start_line": 329, "annotations_start_line": 342, "method_start_line": 342, "end_line": 344}, {"file_path": "/src/main/java/org/joda/time/base/BaseDateTime.java", "method_name": "BaseDateTime", "content": "    /**\n     * Constructs an instance from datetime field values\n     * using the specified chronology.\n     * <p>\n     * If the chronology is null, <code>ISOChronology</code>\n     * in the default time zone is used.\n     *\n     * @param year  the year\n     * @param monthOfYear  the month of the year\n     * @param dayOfMonth  the day of the month\n     * @param hourOfDay  the hour of the day\n     * @param minuteOfHour  the minute of the hour\n     * @param secondOfMinute  the second of the minute\n     * @param millisOfSecond  the millisecond of the second\n     * @param chronology  the chronology, null means ISOChronology in default zone\n     */\n    public BaseDateTime(\n            int year,\n            int monthOfYear,\n            int dayOfMonth,\n            int hourOfDay,\n            int minuteOfHour,\n            int secondOfMinute,\n            int millisOfSecond,\n            Chronology chronology) {\n        super();\n        iChronology = checkChronology(chronology);\n        long instant = iChronology.getDateTimeMillis(year, monthOfYear, dayOfMonth,\n            hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);\n        iMillis = checkInstant(instant, iChronology);\n    }", "javadoc_start_line": 227, "annotations_start_line": 243, "method_start_line": 251, "end_line": 257}, {"file_path": "/src/main/java/org/joda/time/chrono/GJChronology.java", "method_name": "getDateTimeMillis", "content": "    public long getDateTimeMillis(int year, int monthOfYear, int dayOfMonth,\n                                  int hourOfDay, int minuteOfHour,\n                                  int secondOfMinute, int millisOfSecond)\n        throws IllegalArgumentException\n    {\n        Chronology base;\n        if ((base = getBase()) != null) {\n            return base.getDateTimeMillis\n                (year, monthOfYear, dayOfMonth,\n                 hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);\n        }\n\n        // Assume date is Gregorian.\n        long instant;\n            instant = iGregorianChronology.getDateTimeMillis\n                (year, monthOfYear, dayOfMonth,\n                 hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);\n        if (instant < iCutoverMillis) {\n            // Maybe it's Julian.\n            instant = iJulianChronology.getDateTimeMillis\n                (year, monthOfYear, dayOfMonth,\n                 hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);\n            if (instant >= iCutoverMillis) {\n                // Okay, it's in the illegal cutover gap.\n                throw new IllegalArgumentException(\"Specified date does not exist\");\n            }\n        }\n        return instant;\n    }", "javadoc_start_line": 350, "annotations_start_line": 350, "method_start_line": 354, "end_line": 378}]}], "project": {"name": "Time", "version": 18}}