{"tours": [{"failing_test": {"className": " com.google.javascript.jscomp.DeadAssignmentsEliminationTest", "methodName": "testInExpression2", "error": "junit.framework.AssertionFailedError", "message": ""}, "patched_method": {"file_path": "/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java", "method_name": "isVariableReadBeforeKill", "content": "  /**\n   * Give an expression and a variable. It returns READ, if the first\n   * reference of that variable is a read. It returns KILL, if the first\n   * reference of that variable is an assignment. It returns MAY_LIVE otherwise.\n   */\n  private VariableLiveness isVariableReadBeforeKill(\n      Node n, String variable) {\n\n    if (NodeUtil.isName(n) && variable.equals(n.getString())) {\n      if (NodeUtil.isLhs(n, n.getParent())) {\n        Preconditions.checkState(n.getParent().getType() == Token.ASSIGN);\n        // The expression to which the assignment is made is evaluated before\n        // the RHS is evaluated (normal left to right evaluation) but the KILL\n        // occurs after the RHS is evaluated.\n        Node rhs = n.getNext();\n        VariableLiveness state = isVariableReadBeforeKill(rhs, variable);\n        if (state == VariableLiveness.READ) {\n          return state;\n        }\n        return VariableLiveness.KILL;\n      } else {\n        return VariableLiveness.READ;\n      }\n    }\n\n    switch (n.getType()) {\n      // Conditionals\n      case Token.OR:\n      case Token.AND:\n        // With a AND/OR the first branch always runs, but the second is\n        // may not.\n      case Token.HOOK:\n        return checkHookBranchReadBeforeKill(\n            n.getFirstChild().getNext(), n.getLastChild(), variable);\n\n      default:\n        // Expressions are evaluated left-right, depth first.\n        for (Node child = n.getFirstChild();\n            child != null; child = child.getNext()) {\n          if (!ControlFlowGraph.isEnteringNewCfgNode(child)) { // Not a FUNCTION\n          VariableLiveness state = isVariableReadBeforeKill(child, variable);\n          if (state != VariableLiveness.MAYBE_LIVE) {\n            return state;\n          }\n        }\n      }\n    }\n\n    return VariableLiveness.MAYBE_LIVE;\n  }", "javadoc_start_line": 333, "annotations_start_line": 338, "method_start_line": 339, "end_line": 382}, "steps": [{"file_path": "/src/com/google/javascript/jscomp/NodeTraversal.java", "method_name": "traverse", "content": "  /**\n   * Traverses a node recursively.\n   */\n  public static void traverse(\n      AbstractCompiler compiler, Node root, Callback cb) {\n    NodeTraversal t = new NodeTraversal(compiler, cb);\n    t.traverse(root);\n  }", "javadoc_start_line": 416, "annotations_start_line": 419, "method_start_line": 420, "end_line": 423}, {"file_path": "/src/com/google/javascript/jscomp/NodeTraversal.java", "method_name": "traverse", "content": "  /**\n   * Traverses a parse tree recursively.\n   */\n  public void traverse(Node root) {\n    try {\n      sourceName = \"\";\n      curNode = root;\n      pushScope(root);\n      traverseBranch(root, null);\n      popScope();\n    } catch (Exception unexpectedException) {\n      throwUnexpectedException(unexpectedException);\n    }\n  }", "javadoc_start_line": 241, "annotations_start_line": 244, "method_start_line": 244, "end_line": 254}, {"file_path": "/src/com/google/javascript/jscomp/NodeTraversal.java", "method_name": "traverseBranch", "content": "  /**\n   * Traverses a branch.\n   */\n  @SuppressWarnings(\"fallthrough\")\n  private void traverseBranch(Node n, Node parent) {\n    int type = n.getType();\n    if (type == Token.SCRIPT) {\n      sourceName = getSourceName(n);\n    }\n\n    curNode = n;\n    if (!callback.shouldTraverse(this, n, parent)) return;\n\n    switch (type) {\n      case Token.FUNCTION:\n        traverseFunction(n, parent);\n        break;\n\n      default:\n        for (Node child = n.getFirstChild(); child != null; ) {\n          // child could be replaced, in which case our child node\n          // would no longer point to the true next\n          Node next = child.getNext();\n          traverseBranch(child, n);\n          child = next;\n        }\n        break;\n    }\n\n    curNode = n;\n    callback.visit(this, n, parent);\n  }", "javadoc_start_line": 434, "annotations_start_line": 437, "method_start_line": 438, "end_line": 465}, {"file_path": "/src/com/google/javascript/jscomp/NodeTraversal.java", "method_name": "traverseBranch", "content": "  /**\n   * Traverses a branch.\n   */\n  @SuppressWarnings(\"fallthrough\")\n  private void traverseBranch(Node n, Node parent) {\n    int type = n.getType();\n    if (type == Token.SCRIPT) {\n      sourceName = getSourceName(n);\n    }\n\n    curNode = n;\n    if (!callback.shouldTraverse(this, n, parent)) return;\n\n    switch (type) {\n      case Token.FUNCTION:\n        traverseFunction(n, parent);\n        break;\n\n      default:\n        for (Node child = n.getFirstChild(); child != null; ) {\n          // child could be replaced, in which case our child node\n          // would no longer point to the true next\n          Node next = child.getNext();\n          traverseBranch(child, n);\n          child = next;\n        }\n        break;\n    }\n\n    curNode = n;\n    callback.visit(this, n, parent);\n  }", "javadoc_start_line": 434, "annotations_start_line": 437, "method_start_line": 438, "end_line": 465}, {"file_path": "/src/com/google/javascript/jscomp/NodeTraversal.java", "method_name": "traverseBranch", "content": "  /**\n   * Traverses a branch.\n   */\n  @SuppressWarnings(\"fallthrough\")\n  private void traverseBranch(Node n, Node parent) {\n    int type = n.getType();\n    if (type == Token.SCRIPT) {\n      sourceName = getSourceName(n);\n    }\n\n    curNode = n;\n    if (!callback.shouldTraverse(this, n, parent)) return;\n\n    switch (type) {\n      case Token.FUNCTION:\n        traverseFunction(n, parent);\n        break;\n\n      default:\n        for (Node child = n.getFirstChild(); child != null; ) {\n          // child could be replaced, in which case our child node\n          // would no longer point to the true next\n          Node next = child.getNext();\n          traverseBranch(child, n);\n          child = next;\n        }\n        break;\n    }\n\n    curNode = n;\n    callback.visit(this, n, parent);\n  }", "javadoc_start_line": 434, "annotations_start_line": 437, "method_start_line": 438, "end_line": 465}, {"file_path": "/src/com/google/javascript/jscomp/NodeTraversal.java", "method_name": "traverseFunction", "content": "  /**\n   * Traverses a function.\n   */\n  private void traverseFunction(Node n, Node parent) {\n    Preconditions.checkState(n.getChildCount() == 3);\n    Preconditions.checkState(n.getType() == Token.FUNCTION);\n\n    final Node fnName = n.getFirstChild();\n\n    boolean isFunctionExpression = (parent != null)\n        && NodeUtil.isFunctionExpression(n);\n\n    if (!isFunctionExpression) {\n      // Functions declarations are in the scope containing the declaration.\n      traverseBranch(fnName, n);\n    }\n\n    curNode = n;\n    pushScope(n);\n\n    if (isFunctionExpression) {\n      // Function expression names are only accessible within the function\n      // scope.\n      traverseBranch(fnName, n);\n    }\n\n    final Node args = fnName.getNext();\n    final Node body = args.getNext();\n\n    // Args\n    traverseBranch(args, n);\n\n    // Body\n    Preconditions.checkState(body.getNext() == null &&\n            body.getType() == Token.BLOCK);\n    traverseBranch(body, n);\n\n    popScope();\n  }", "javadoc_start_line": 467, "annotations_start_line": 470, "method_start_line": 470, "end_line": 505}, {"file_path": "/src/com/google/javascript/jscomp/NodeTraversal.java", "method_name": "pushScope", "content": "  /** Creates a new scope (e.g. when entering a function). */\n  private void pushScope(Node node) {\n    Preconditions.checkState(curNode != null);\n    scopeRoots.push(node);\n    cfgs.push(null);\n    if (scopeCallback != null) {\n      scopeCallback.enterScope(this);\n    }\n  }", "javadoc_start_line": 521, "annotations_start_line": 522, "method_start_line": 522, "end_line": 529}, {"file_path": "/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java", "method_name": "enterScope", "content": "  public void enterScope(NodeTraversal t) {\n    Scope scope = t.getScope();\n    // Global scope _SHOULD_ work, however, liveness won't finish without\n    // -Xmx1024 in closure. We might have to look at coding conventions for\n    // exported variables as well.\n    if (scope.isGlobal()) {\n      return;\n    }\n\n    // We are not going to do any dead assignment elimination in when there is\n    // at least one inner function because in most browsers, when there is a\n    // closure, ALL the variables are saved (escaped).\n    Node fnBlock = t.getScopeRoot().getLastChild();\n    if (NodeUtil.containsFunction(fnBlock)) {\n      return;\n    }\n\n    // We don't do any dead assignment elimination if there are no assigns\n    // to eliminate. :)\n    if (!NodeUtil.has(fnBlock, matchRemovableAssigns,\n            Predicates.<Node>alwaysTrue())) {\n      return;\n    }\n\n    // Computes liveness information first.\n    ControlFlowGraph<Node> cfg = t.getControlFlowGraph();\n    liveness = new LiveVariablesAnalysis(cfg, scope, compiler);\n    liveness.analyze();\n    tryRemoveDeadAssignments(t, cfg);\n  }", "javadoc_start_line": 70, "annotations_start_line": 69, "method_start_line": 70, "end_line": 99}, {"file_path": "/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java", "method_name": "tryRemoveDeadAssignments", "content": "  /**\n   * Try to remove useless assignments from a control flow graph that has been\n   * annotated with liveness information.\n   *\n   * @param t The node traversal.\n   * @param cfg The control flow graph of the program annotated with liveness\n   *        information.\n   */\n  private void tryRemoveDeadAssignments(NodeTraversal t,\n      ControlFlowGraph<Node> cfg) {\n    Iterable<DiGraphNode<Node, Branch>> nodes = cfg.getDirectedGraphNodes();\n\n    for (DiGraphNode<Node, Branch> cfgNode : nodes) {\n      FlowState<LiveVariableLattice> state =\n          cfgNode.getAnnotation();\n      Node n = cfgNode.getValue();\n      if (n == null) {\n        continue;\n      }\n      switch (n.getType()) {\n        case Token.IF:\n        case Token.WHILE:\n        case Token.DO:\n          tryRemoveAssignment(t, NodeUtil.getConditionExpression(n), state);\n          continue;\n        case Token.FOR:\n          if (!NodeUtil.isForIn(n)) {\n            tryRemoveAssignment(\n                t, NodeUtil.getConditionExpression(n), state);\n          }\n          continue;\n        case Token.SWITCH:\n        case Token.CASE:\n        case Token.RETURN:\n          if (n.hasChildren()) {\n            tryRemoveAssignment(t, n.getFirstChild(), state);\n          }\n          continue;\n        // TODO(user): case Token.VAR: Remove var a=1;a=2;.....\n      }\n\n      tryRemoveAssignment(t, n, state);\n    }\n  }", "javadoc_start_line": 109, "annotations_start_line": 117, "method_start_line": 118, "end_line": 152}, {"file_path": "/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java", "method_name": "tryRemoveAssignment", "content": "  private void tryRemoveAssignment(NodeTraversal t, Node n,\n      FlowState<LiveVariableLattice> state) {\n    tryRemoveAssignment(t, n, n, state);\n  }", "javadoc_start_line": 154, "annotations_start_line": 154, "method_start_line": 155, "end_line": 157}, {"file_path": "/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java", "method_name": "tryRemoveAssignment", "content": "  /**\n   * Determines if any local variables are dead after the instruction {@code n}\n   * and are assigned within the subtree of {@code n}. Removes those assignments\n   * if there are any.\n   *\n   * @param n Target instruction.\n   * @param exprRoot The CFG node where the liveness information in state is\n   *     still correct.\n   * @param state The liveness information at {@code n}.\n   */\n  private void tryRemoveAssignment(NodeTraversal t, Node n, Node exprRoot,\n      FlowState<LiveVariableLattice> state) {\n\n    Node parent = n.getParent();\n\n    if (NodeUtil.isAssignmentOp(n) ||\n        n.getType() == Token.INC || n.getType() == Token.DEC) {\n\n      Node lhs = n.getFirstChild();\n      Node rhs = lhs.getNext();\n\n      // Recurse first. Example: dead_x = dead_y = 1; We try to clean up dead_y\n      // first.\n      if (rhs != null) {\n        tryRemoveAssignment(t, rhs, exprRoot, state);\n        rhs = lhs.getNext();\n      }\n\n      Scope scope = t.getScope();\n      if (!NodeUtil.isName(lhs)) {\n        return; // Not a local variable assignment.\n      }\n      String name = lhs.getString();\n      if (!scope.isDeclared(name, false)) {\n        return;\n      }\n      Var var = scope.getVar(name);\n\n      if (liveness.getEscapedLocals().contains(var)) {\n        return; // Local variable that might be escaped due to closures.\n      }\n\n      // If we have an identity assignment such as a=a, always remove it\n      // regardless of what the liveness results because it\n      // does not change the result afterward.\n      if (rhs != null &&\n          NodeUtil.isName(rhs) &&\n          rhs.getString().equals(var.name) &&\n          NodeUtil.isAssign(n)) {\n        n.removeChild(rhs);\n        n.getParent().replaceChild(n, rhs);\n        compiler.reportCodeChange();\n        return;\n      }\n\n      if (state.getOut().isLive(var)) {\n        return; // Variable not dead.\n      }\n\n      if (state.getIn().isLive(var) &&\n          isVariableStillLiveWithinExpression(n, exprRoot, var.name)) {\n        // The variable is killed here but it is also live before it.\n        // This is possible if we have say:\n        //    if (X = a && a = C) {..} ; .......; a = S;\n        // In this case we are safe to remove \"a = C\" because it is dead.\n        // However if we have:\n        //    if (a = C && X = a) {..} ; .......; a = S;\n        // removing \"a = C\" is NOT correct, although the live set at the node\n        // is exactly the same.\n        // TODO(user): We need more fine grain CFA or we need to keep track\n        // of GEN sets when we recurse here.\n        return;\n      }\n\n      if (NodeUtil.isAssign(n)) {\n        n.removeChild(rhs);\n        n.getParent().replaceChild(n, rhs);\n      } else if (NodeUtil.isAssignmentOp(n)) {\n        n.removeChild(rhs);\n        n.removeChild(lhs);\n        Node op = new Node(NodeUtil.getOpFromAssignmentOp(n), lhs, rhs);\n        parent.replaceChild(n, op);\n      } else if (n.getType() == Token.INC || n.getType() == Token.DEC) {\n        if (NodeUtil.isExpressionNode(parent)) {\n          parent.replaceChild(n,\n              new Node(Token.VOID, Node.newNumber(0).copyInformationFrom(n)));\n        } else if(n.getType() == Token.COMMA && n != parent.getLastChild()) {\n          parent.removeChild(n);\n        } else if (parent.getType() == Token.FOR && !NodeUtil.isForIn(parent) &&\n            NodeUtil.getConditionExpression(parent) != n) {\n          parent.replaceChild(n, new Node(Token.EMPTY));\n        } else {\n          // Cannot replace x = a++ with x = a because that's not valid\n          // when a is not a number.\n          return;\n        }\n      } else {\n        // Not reachable.\n        Preconditions.checkState(false, \"Unknown statement\");\n      }\n\n      compiler.reportCodeChange();\n      return;\n\n    } else {\n      for (Node c = n.getFirstChild(); c != null;) {\n        Node next = c.getNext();\n        if (!ControlFlowGraph.isEnteringNewCfgNode(c)) {\n          tryRemoveAssignment(t, c, exprRoot, state);\n        }\n        c = next;\n      }\n      return;\n    }\n  }", "javadoc_start_line": 159, "annotations_start_line": 169, "method_start_line": 170, "end_line": 273}, {"file_path": "/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java", "method_name": "tryRemoveAssignment", "content": "  /**\n   * Determines if any local variables are dead after the instruction {@code n}\n   * and are assigned within the subtree of {@code n}. Removes those assignments\n   * if there are any.\n   *\n   * @param n Target instruction.\n   * @param exprRoot The CFG node where the liveness information in state is\n   *     still correct.\n   * @param state The liveness information at {@code n}.\n   */\n  private void tryRemoveAssignment(NodeTraversal t, Node n, Node exprRoot,\n      FlowState<LiveVariableLattice> state) {\n\n    Node parent = n.getParent();\n\n    if (NodeUtil.isAssignmentOp(n) ||\n        n.getType() == Token.INC || n.getType() == Token.DEC) {\n\n      Node lhs = n.getFirstChild();\n      Node rhs = lhs.getNext();\n\n      // Recurse first. Example: dead_x = dead_y = 1; We try to clean up dead_y\n      // first.\n      if (rhs != null) {\n        tryRemoveAssignment(t, rhs, exprRoot, state);\n        rhs = lhs.getNext();\n      }\n\n      Scope scope = t.getScope();\n      if (!NodeUtil.isName(lhs)) {\n        return; // Not a local variable assignment.\n      }\n      String name = lhs.getString();\n      if (!scope.isDeclared(name, false)) {\n        return;\n      }\n      Var var = scope.getVar(name);\n\n      if (liveness.getEscapedLocals().contains(var)) {\n        return; // Local variable that might be escaped due to closures.\n      }\n\n      // If we have an identity assignment such as a=a, always remove it\n      // regardless of what the liveness results because it\n      // does not change the result afterward.\n      if (rhs != null &&\n          NodeUtil.isName(rhs) &&\n          rhs.getString().equals(var.name) &&\n          NodeUtil.isAssign(n)) {\n        n.removeChild(rhs);\n        n.getParent().replaceChild(n, rhs);\n        compiler.reportCodeChange();\n        return;\n      }\n\n      if (state.getOut().isLive(var)) {\n        return; // Variable not dead.\n      }\n\n      if (state.getIn().isLive(var) &&\n          isVariableStillLiveWithinExpression(n, exprRoot, var.name)) {\n        // The variable is killed here but it is also live before it.\n        // This is possible if we have say:\n        //    if (X = a && a = C) {..} ; .......; a = S;\n        // In this case we are safe to remove \"a = C\" because it is dead.\n        // However if we have:\n        //    if (a = C && X = a) {..} ; .......; a = S;\n        // removing \"a = C\" is NOT correct, although the live set at the node\n        // is exactly the same.\n        // TODO(user): We need more fine grain CFA or we need to keep track\n        // of GEN sets when we recurse here.\n        return;\n      }\n\n      if (NodeUtil.isAssign(n)) {\n        n.removeChild(rhs);\n        n.getParent().replaceChild(n, rhs);\n      } else if (NodeUtil.isAssignmentOp(n)) {\n        n.removeChild(rhs);\n        n.removeChild(lhs);\n        Node op = new Node(NodeUtil.getOpFromAssignmentOp(n), lhs, rhs);\n        parent.replaceChild(n, op);\n      } else if (n.getType() == Token.INC || n.getType() == Token.DEC) {\n        if (NodeUtil.isExpressionNode(parent)) {\n          parent.replaceChild(n,\n              new Node(Token.VOID, Node.newNumber(0).copyInformationFrom(n)));\n        } else if(n.getType() == Token.COMMA && n != parent.getLastChild()) {\n          parent.removeChild(n);\n        } else if (parent.getType() == Token.FOR && !NodeUtil.isForIn(parent) &&\n            NodeUtil.getConditionExpression(parent) != n) {\n          parent.replaceChild(n, new Node(Token.EMPTY));\n        } else {\n          // Cannot replace x = a++ with x = a because that's not valid\n          // when a is not a number.\n          return;\n        }\n      } else {\n        // Not reachable.\n        Preconditions.checkState(false, \"Unknown statement\");\n      }\n\n      compiler.reportCodeChange();\n      return;\n\n    } else {\n      for (Node c = n.getFirstChild(); c != null;) {\n        Node next = c.getNext();\n        if (!ControlFlowGraph.isEnteringNewCfgNode(c)) {\n          tryRemoveAssignment(t, c, exprRoot, state);\n        }\n        c = next;\n      }\n      return;\n    }\n  }", "javadoc_start_line": 159, "annotations_start_line": 169, "method_start_line": 170, "end_line": 273}, {"file_path": "/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java", "method_name": "tryRemoveAssignment", "content": "  /**\n   * Determines if any local variables are dead after the instruction {@code n}\n   * and are assigned within the subtree of {@code n}. Removes those assignments\n   * if there are any.\n   *\n   * @param n Target instruction.\n   * @param exprRoot The CFG node where the liveness information in state is\n   *     still correct.\n   * @param state The liveness information at {@code n}.\n   */\n  private void tryRemoveAssignment(NodeTraversal t, Node n, Node exprRoot,\n      FlowState<LiveVariableLattice> state) {\n\n    Node parent = n.getParent();\n\n    if (NodeUtil.isAssignmentOp(n) ||\n        n.getType() == Token.INC || n.getType() == Token.DEC) {\n\n      Node lhs = n.getFirstChild();\n      Node rhs = lhs.getNext();\n\n      // Recurse first. Example: dead_x = dead_y = 1; We try to clean up dead_y\n      // first.\n      if (rhs != null) {\n        tryRemoveAssignment(t, rhs, exprRoot, state);\n        rhs = lhs.getNext();\n      }\n\n      Scope scope = t.getScope();\n      if (!NodeUtil.isName(lhs)) {\n        return; // Not a local variable assignment.\n      }\n      String name = lhs.getString();\n      if (!scope.isDeclared(name, false)) {\n        return;\n      }\n      Var var = scope.getVar(name);\n\n      if (liveness.getEscapedLocals().contains(var)) {\n        return; // Local variable that might be escaped due to closures.\n      }\n\n      // If we have an identity assignment such as a=a, always remove it\n      // regardless of what the liveness results because it\n      // does not change the result afterward.\n      if (rhs != null &&\n          NodeUtil.isName(rhs) &&\n          rhs.getString().equals(var.name) &&\n          NodeUtil.isAssign(n)) {\n        n.removeChild(rhs);\n        n.getParent().replaceChild(n, rhs);\n        compiler.reportCodeChange();\n        return;\n      }\n\n      if (state.getOut().isLive(var)) {\n        return; // Variable not dead.\n      }\n\n      if (state.getIn().isLive(var) &&\n          isVariableStillLiveWithinExpression(n, exprRoot, var.name)) {\n        // The variable is killed here but it is also live before it.\n        // This is possible if we have say:\n        //    if (X = a && a = C) {..} ; .......; a = S;\n        // In this case we are safe to remove \"a = C\" because it is dead.\n        // However if we have:\n        //    if (a = C && X = a) {..} ; .......; a = S;\n        // removing \"a = C\" is NOT correct, although the live set at the node\n        // is exactly the same.\n        // TODO(user): We need more fine grain CFA or we need to keep track\n        // of GEN sets when we recurse here.\n        return;\n      }\n\n      if (NodeUtil.isAssign(n)) {\n        n.removeChild(rhs);\n        n.getParent().replaceChild(n, rhs);\n      } else if (NodeUtil.isAssignmentOp(n)) {\n        n.removeChild(rhs);\n        n.removeChild(lhs);\n        Node op = new Node(NodeUtil.getOpFromAssignmentOp(n), lhs, rhs);\n        parent.replaceChild(n, op);\n      } else if (n.getType() == Token.INC || n.getType() == Token.DEC) {\n        if (NodeUtil.isExpressionNode(parent)) {\n          parent.replaceChild(n,\n              new Node(Token.VOID, Node.newNumber(0).copyInformationFrom(n)));\n        } else if(n.getType() == Token.COMMA && n != parent.getLastChild()) {\n          parent.removeChild(n);\n        } else if (parent.getType() == Token.FOR && !NodeUtil.isForIn(parent) &&\n            NodeUtil.getConditionExpression(parent) != n) {\n          parent.replaceChild(n, new Node(Token.EMPTY));\n        } else {\n          // Cannot replace x = a++ with x = a because that's not valid\n          // when a is not a number.\n          return;\n        }\n      } else {\n        // Not reachable.\n        Preconditions.checkState(false, \"Unknown statement\");\n      }\n\n      compiler.reportCodeChange();\n      return;\n\n    } else {\n      for (Node c = n.getFirstChild(); c != null;) {\n        Node next = c.getNext();\n        if (!ControlFlowGraph.isEnteringNewCfgNode(c)) {\n          tryRemoveAssignment(t, c, exprRoot, state);\n        }\n        c = next;\n      }\n      return;\n    }\n  }", "javadoc_start_line": 159, "annotations_start_line": 169, "method_start_line": 170, "end_line": 273}, {"file_path": "/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java", "method_name": "isVariableStillLiveWithinExpression", "content": "  /**\n   * Given a variable, node n in the tree and a sub-tree denoted by exprRoot as\n   * the root, this function returns true if there exists a read of that\n   * variable before a write to that variable that is on the right side of n.\n   *\n   * For example, suppose the node is x = 1:\n   *\n   * y = 1, x = 1; // false, there is no reads at all.\n   * y = 1, x = 1, print(x) // true, there is a read right of n.\n   * y = 1, x = 1, x = 2, print(x) // false, there is a read right of n but\n   *                               // it is after a write.\n   *\n   * @param n The current node we should look at.\n   * @param exprRoot The node\n   */\n  private boolean isVariableStillLiveWithinExpression(\n      Node n, Node exprRoot, String variable) {\n    while (n != exprRoot) {\n      VariableLiveness state = VariableLiveness.MAYBE_LIVE;\n      switch (n.getParent().getType()) {\n        case Token.OR:\n        case Token.AND:\n          // If the currently node is the first child of\n          // AND/OR, be conservative only consider the READs\n          // of the second operand.\n\n        case Token.HOOK:\n          // If current node is the condition, check each following\n          // branch, otherwise it is a conditional branch and the\n          // other branch can be ignored.\n\n        default:\n          for(Node sibling = n.getNext(); sibling != null;\n              sibling = sibling.getNext()) {\n            if (!ControlFlowGraph.isEnteringNewCfgNode(sibling)) {\n            state = isVariableReadBeforeKill(sibling, variable);\n\n      // If we see a READ or KILL there is no need to continue.\n      if (state == VariableLiveness.READ) {\n        return true;\n      } else if (state == VariableLiveness.KILL) {\n        return false;\n            }\n          }\n      }\n      }\n      n = n.getParent();\n    }\n    return false;\n  }", "javadoc_start_line": 275, "annotations_start_line": 290, "method_start_line": 291, "end_line": 324}, {"file_path": "/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java", "method_name": "isVariableReadBeforeKill", "content": "  /**\n   * Give an expression and a variable. It returns READ, if the first\n   * reference of that variable is a read. It returns KILL, if the first\n   * reference of that variable is an assignment. It returns MAY_LIVE otherwise.\n   */\n  private VariableLiveness isVariableReadBeforeKill(\n      Node n, String variable) {\n\n    if (NodeUtil.isName(n) && variable.equals(n.getString())) {\n      if (NodeUtil.isLhs(n, n.getParent())) {\n        Preconditions.checkState(n.getParent().getType() == Token.ASSIGN);\n        // The expression to which the assignment is made is evaluated before\n        // the RHS is evaluated (normal left to right evaluation) but the KILL\n        // occurs after the RHS is evaluated.\n        Node rhs = n.getNext();\n        VariableLiveness state = isVariableReadBeforeKill(rhs, variable);\n        if (state == VariableLiveness.READ) {\n          return state;\n        }\n        return VariableLiveness.KILL;\n      } else {\n        return VariableLiveness.READ;\n      }\n    }\n\n    switch (n.getType()) {\n      // Conditionals\n      case Token.OR:\n      case Token.AND:\n        // With a AND/OR the first branch always runs, but the second is\n        // may not.\n      case Token.HOOK:\n        return checkHookBranchReadBeforeKill(\n            n.getFirstChild().getNext(), n.getLastChild(), variable);\n\n      default:\n        // Expressions are evaluated left-right, depth first.\n        for (Node child = n.getFirstChild();\n            child != null; child = child.getNext()) {\n          if (!ControlFlowGraph.isEnteringNewCfgNode(child)) { // Not a FUNCTION\n          VariableLiveness state = isVariableReadBeforeKill(child, variable);\n          if (state != VariableLiveness.MAYBE_LIVE) {\n            return state;\n          }\n        }\n      }\n    }\n\n    return VariableLiveness.MAYBE_LIVE;\n  }", "javadoc_start_line": 333, "annotations_start_line": 338, "method_start_line": 339, "end_line": 382}]}, {"failing_test": {"className": " com.google.javascript.jscomp.DeadAssignmentsEliminationTest", "methodName": "testInExpression2", "error": "junit.framework.AssertionFailedError", "message": ""}, "patched_method": {"file_path": "/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java", "method_name": "isVariableStillLiveWithinExpression", "content": "  /**\n   * Given a variable, node n in the tree and a sub-tree denoted by exprRoot as\n   * the root, this function returns true if there exists a read of that\n   * variable before a write to that variable that is on the right side of n.\n   *\n   * For example, suppose the node is x = 1:\n   *\n   * y = 1, x = 1; // false, there is no reads at all.\n   * y = 1, x = 1, print(x) // true, there is a read right of n.\n   * y = 1, x = 1, x = 2, print(x) // false, there is a read right of n but\n   *                               // it is after a write.\n   *\n   * @param n The current node we should look at.\n   * @param exprRoot The node\n   */\n  private boolean isVariableStillLiveWithinExpression(\n      Node n, Node exprRoot, String variable) {\n    while (n != exprRoot) {\n      VariableLiveness state = VariableLiveness.MAYBE_LIVE;\n      switch (n.getParent().getType()) {\n        case Token.OR:\n        case Token.AND:\n          // If the currently node is the first child of\n          // AND/OR, be conservative only consider the READs\n          // of the second operand.\n\n        case Token.HOOK:\n          // If current node is the condition, check each following\n          // branch, otherwise it is a conditional branch and the\n          // other branch can be ignored.\n\n        default:\n          for(Node sibling = n.getNext(); sibling != null;\n              sibling = sibling.getNext()) {\n            if (!ControlFlowGraph.isEnteringNewCfgNode(sibling)) {\n            state = isVariableReadBeforeKill(sibling, variable);\n\n      // If we see a READ or KILL there is no need to continue.\n      if (state == VariableLiveness.READ) {\n        return true;\n      } else if (state == VariableLiveness.KILL) {\n        return false;\n            }\n          }\n      }\n      }\n      n = n.getParent();\n    }\n    return false;\n  }", "javadoc_start_line": 275, "annotations_start_line": 290, "method_start_line": 291, "end_line": 324}, "steps": [{"file_path": "/src/com/google/javascript/jscomp/NodeTraversal.java", "method_name": "traverse", "content": "  /**\n   * Traverses a node recursively.\n   */\n  public static void traverse(\n      AbstractCompiler compiler, Node root, Callback cb) {\n    NodeTraversal t = new NodeTraversal(compiler, cb);\n    t.traverse(root);\n  }", "javadoc_start_line": 416, "annotations_start_line": 419, "method_start_line": 420, "end_line": 423}, {"file_path": "/src/com/google/javascript/jscomp/NodeTraversal.java", "method_name": "traverse", "content": "  /**\n   * Traverses a parse tree recursively.\n   */\n  public void traverse(Node root) {\n    try {\n      sourceName = \"\";\n      curNode = root;\n      pushScope(root);\n      traverseBranch(root, null);\n      popScope();\n    } catch (Exception unexpectedException) {\n      throwUnexpectedException(unexpectedException);\n    }\n  }", "javadoc_start_line": 241, "annotations_start_line": 244, "method_start_line": 244, "end_line": 254}, {"file_path": "/src/com/google/javascript/jscomp/NodeTraversal.java", "method_name": "traverseBranch", "content": "  /**\n   * Traverses a branch.\n   */\n  @SuppressWarnings(\"fallthrough\")\n  private void traverseBranch(Node n, Node parent) {\n    int type = n.getType();\n    if (type == Token.SCRIPT) {\n      sourceName = getSourceName(n);\n    }\n\n    curNode = n;\n    if (!callback.shouldTraverse(this, n, parent)) return;\n\n    switch (type) {\n      case Token.FUNCTION:\n        traverseFunction(n, parent);\n        break;\n\n      default:\n        for (Node child = n.getFirstChild(); child != null; ) {\n          // child could be replaced, in which case our child node\n          // would no longer point to the true next\n          Node next = child.getNext();\n          traverseBranch(child, n);\n          child = next;\n        }\n        break;\n    }\n\n    curNode = n;\n    callback.visit(this, n, parent);\n  }", "javadoc_start_line": 434, "annotations_start_line": 437, "method_start_line": 438, "end_line": 465}, {"file_path": "/src/com/google/javascript/jscomp/NodeTraversal.java", "method_name": "traverseBranch", "content": "  /**\n   * Traverses a branch.\n   */\n  @SuppressWarnings(\"fallthrough\")\n  private void traverseBranch(Node n, Node parent) {\n    int type = n.getType();\n    if (type == Token.SCRIPT) {\n      sourceName = getSourceName(n);\n    }\n\n    curNode = n;\n    if (!callback.shouldTraverse(this, n, parent)) return;\n\n    switch (type) {\n      case Token.FUNCTION:\n        traverseFunction(n, parent);\n        break;\n\n      default:\n        for (Node child = n.getFirstChild(); child != null; ) {\n          // child could be replaced, in which case our child node\n          // would no longer point to the true next\n          Node next = child.getNext();\n          traverseBranch(child, n);\n          child = next;\n        }\n        break;\n    }\n\n    curNode = n;\n    callback.visit(this, n, parent);\n  }", "javadoc_start_line": 434, "annotations_start_line": 437, "method_start_line": 438, "end_line": 465}, {"file_path": "/src/com/google/javascript/jscomp/NodeTraversal.java", "method_name": "traverseBranch", "content": "  /**\n   * Traverses a branch.\n   */\n  @SuppressWarnings(\"fallthrough\")\n  private void traverseBranch(Node n, Node parent) {\n    int type = n.getType();\n    if (type == Token.SCRIPT) {\n      sourceName = getSourceName(n);\n    }\n\n    curNode = n;\n    if (!callback.shouldTraverse(this, n, parent)) return;\n\n    switch (type) {\n      case Token.FUNCTION:\n        traverseFunction(n, parent);\n        break;\n\n      default:\n        for (Node child = n.getFirstChild(); child != null; ) {\n          // child could be replaced, in which case our child node\n          // would no longer point to the true next\n          Node next = child.getNext();\n          traverseBranch(child, n);\n          child = next;\n        }\n        break;\n    }\n\n    curNode = n;\n    callback.visit(this, n, parent);\n  }", "javadoc_start_line": 434, "annotations_start_line": 437, "method_start_line": 438, "end_line": 465}, {"file_path": "/src/com/google/javascript/jscomp/NodeTraversal.java", "method_name": "traverseFunction", "content": "  /**\n   * Traverses a function.\n   */\n  private void traverseFunction(Node n, Node parent) {\n    Preconditions.checkState(n.getChildCount() == 3);\n    Preconditions.checkState(n.getType() == Token.FUNCTION);\n\n    final Node fnName = n.getFirstChild();\n\n    boolean isFunctionExpression = (parent != null)\n        && NodeUtil.isFunctionExpression(n);\n\n    if (!isFunctionExpression) {\n      // Functions declarations are in the scope containing the declaration.\n      traverseBranch(fnName, n);\n    }\n\n    curNode = n;\n    pushScope(n);\n\n    if (isFunctionExpression) {\n      // Function expression names are only accessible within the function\n      // scope.\n      traverseBranch(fnName, n);\n    }\n\n    final Node args = fnName.getNext();\n    final Node body = args.getNext();\n\n    // Args\n    traverseBranch(args, n);\n\n    // Body\n    Preconditions.checkState(body.getNext() == null &&\n            body.getType() == Token.BLOCK);\n    traverseBranch(body, n);\n\n    popScope();\n  }", "javadoc_start_line": 467, "annotations_start_line": 470, "method_start_line": 470, "end_line": 505}, {"file_path": "/src/com/google/javascript/jscomp/NodeTraversal.java", "method_name": "pushScope", "content": "  /** Creates a new scope (e.g. when entering a function). */\n  private void pushScope(Node node) {\n    Preconditions.checkState(curNode != null);\n    scopeRoots.push(node);\n    cfgs.push(null);\n    if (scopeCallback != null) {\n      scopeCallback.enterScope(this);\n    }\n  }", "javadoc_start_line": 521, "annotations_start_line": 522, "method_start_line": 522, "end_line": 529}, {"file_path": "/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java", "method_name": "enterScope", "content": "  public void enterScope(NodeTraversal t) {\n    Scope scope = t.getScope();\n    // Global scope _SHOULD_ work, however, liveness won't finish without\n    // -Xmx1024 in closure. We might have to look at coding conventions for\n    // exported variables as well.\n    if (scope.isGlobal()) {\n      return;\n    }\n\n    // We are not going to do any dead assignment elimination in when there is\n    // at least one inner function because in most browsers, when there is a\n    // closure, ALL the variables are saved (escaped).\n    Node fnBlock = t.getScopeRoot().getLastChild();\n    if (NodeUtil.containsFunction(fnBlock)) {\n      return;\n    }\n\n    // We don't do any dead assignment elimination if there are no assigns\n    // to eliminate. :)\n    if (!NodeUtil.has(fnBlock, matchRemovableAssigns,\n            Predicates.<Node>alwaysTrue())) {\n      return;\n    }\n\n    // Computes liveness information first.\n    ControlFlowGraph<Node> cfg = t.getControlFlowGraph();\n    liveness = new LiveVariablesAnalysis(cfg, scope, compiler);\n    liveness.analyze();\n    tryRemoveDeadAssignments(t, cfg);\n  }", "javadoc_start_line": 70, "annotations_start_line": 69, "method_start_line": 70, "end_line": 99}, {"file_path": "/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java", "method_name": "tryRemoveDeadAssignments", "content": "  /**\n   * Try to remove useless assignments from a control flow graph that has been\n   * annotated with liveness information.\n   *\n   * @param t The node traversal.\n   * @param cfg The control flow graph of the program annotated with liveness\n   *        information.\n   */\n  private void tryRemoveDeadAssignments(NodeTraversal t,\n      ControlFlowGraph<Node> cfg) {\n    Iterable<DiGraphNode<Node, Branch>> nodes = cfg.getDirectedGraphNodes();\n\n    for (DiGraphNode<Node, Branch> cfgNode : nodes) {\n      FlowState<LiveVariableLattice> state =\n          cfgNode.getAnnotation();\n      Node n = cfgNode.getValue();\n      if (n == null) {\n        continue;\n      }\n      switch (n.getType()) {\n        case Token.IF:\n        case Token.WHILE:\n        case Token.DO:\n          tryRemoveAssignment(t, NodeUtil.getConditionExpression(n), state);\n          continue;\n        case Token.FOR:\n          if (!NodeUtil.isForIn(n)) {\n            tryRemoveAssignment(\n                t, NodeUtil.getConditionExpression(n), state);\n          }\n          continue;\n        case Token.SWITCH:\n        case Token.CASE:\n        case Token.RETURN:\n          if (n.hasChildren()) {\n            tryRemoveAssignment(t, n.getFirstChild(), state);\n          }\n          continue;\n        // TODO(user): case Token.VAR: Remove var a=1;a=2;.....\n      }\n\n      tryRemoveAssignment(t, n, state);\n    }\n  }", "javadoc_start_line": 109, "annotations_start_line": 117, "method_start_line": 118, "end_line": 152}, {"file_path": "/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java", "method_name": "tryRemoveAssignment", "content": "  private void tryRemoveAssignment(NodeTraversal t, Node n,\n      FlowState<LiveVariableLattice> state) {\n    tryRemoveAssignment(t, n, n, state);\n  }", "javadoc_start_line": 154, "annotations_start_line": 154, "method_start_line": 155, "end_line": 157}, {"file_path": "/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java", "method_name": "tryRemoveAssignment", "content": "  /**\n   * Determines if any local variables are dead after the instruction {@code n}\n   * and are assigned within the subtree of {@code n}. Removes those assignments\n   * if there are any.\n   *\n   * @param n Target instruction.\n   * @param exprRoot The CFG node where the liveness information in state is\n   *     still correct.\n   * @param state The liveness information at {@code n}.\n   */\n  private void tryRemoveAssignment(NodeTraversal t, Node n, Node exprRoot,\n      FlowState<LiveVariableLattice> state) {\n\n    Node parent = n.getParent();\n\n    if (NodeUtil.isAssignmentOp(n) ||\n        n.getType() == Token.INC || n.getType() == Token.DEC) {\n\n      Node lhs = n.getFirstChild();\n      Node rhs = lhs.getNext();\n\n      // Recurse first. Example: dead_x = dead_y = 1; We try to clean up dead_y\n      // first.\n      if (rhs != null) {\n        tryRemoveAssignment(t, rhs, exprRoot, state);\n        rhs = lhs.getNext();\n      }\n\n      Scope scope = t.getScope();\n      if (!NodeUtil.isName(lhs)) {\n        return; // Not a local variable assignment.\n      }\n      String name = lhs.getString();\n      if (!scope.isDeclared(name, false)) {\n        return;\n      }\n      Var var = scope.getVar(name);\n\n      if (liveness.getEscapedLocals().contains(var)) {\n        return; // Local variable that might be escaped due to closures.\n      }\n\n      // If we have an identity assignment such as a=a, always remove it\n      // regardless of what the liveness results because it\n      // does not change the result afterward.\n      if (rhs != null &&\n          NodeUtil.isName(rhs) &&\n          rhs.getString().equals(var.name) &&\n          NodeUtil.isAssign(n)) {\n        n.removeChild(rhs);\n        n.getParent().replaceChild(n, rhs);\n        compiler.reportCodeChange();\n        return;\n      }\n\n      if (state.getOut().isLive(var)) {\n        return; // Variable not dead.\n      }\n\n      if (state.getIn().isLive(var) &&\n          isVariableStillLiveWithinExpression(n, exprRoot, var.name)) {\n        // The variable is killed here but it is also live before it.\n        // This is possible if we have say:\n        //    if (X = a && a = C) {..} ; .......; a = S;\n        // In this case we are safe to remove \"a = C\" because it is dead.\n        // However if we have:\n        //    if (a = C && X = a) {..} ; .......; a = S;\n        // removing \"a = C\" is NOT correct, although the live set at the node\n        // is exactly the same.\n        // TODO(user): We need more fine grain CFA or we need to keep track\n        // of GEN sets when we recurse here.\n        return;\n      }\n\n      if (NodeUtil.isAssign(n)) {\n        n.removeChild(rhs);\n        n.getParent().replaceChild(n, rhs);\n      } else if (NodeUtil.isAssignmentOp(n)) {\n        n.removeChild(rhs);\n        n.removeChild(lhs);\n        Node op = new Node(NodeUtil.getOpFromAssignmentOp(n), lhs, rhs);\n        parent.replaceChild(n, op);\n      } else if (n.getType() == Token.INC || n.getType() == Token.DEC) {\n        if (NodeUtil.isExpressionNode(parent)) {\n          parent.replaceChild(n,\n              new Node(Token.VOID, Node.newNumber(0).copyInformationFrom(n)));\n        } else if(n.getType() == Token.COMMA && n != parent.getLastChild()) {\n          parent.removeChild(n);\n        } else if (parent.getType() == Token.FOR && !NodeUtil.isForIn(parent) &&\n            NodeUtil.getConditionExpression(parent) != n) {\n          parent.replaceChild(n, new Node(Token.EMPTY));\n        } else {\n          // Cannot replace x = a++ with x = a because that's not valid\n          // when a is not a number.\n          return;\n        }\n      } else {\n        // Not reachable.\n        Preconditions.checkState(false, \"Unknown statement\");\n      }\n\n      compiler.reportCodeChange();\n      return;\n\n    } else {\n      for (Node c = n.getFirstChild(); c != null;) {\n        Node next = c.getNext();\n        if (!ControlFlowGraph.isEnteringNewCfgNode(c)) {\n          tryRemoveAssignment(t, c, exprRoot, state);\n        }\n        c = next;\n      }\n      return;\n    }\n  }", "javadoc_start_line": 159, "annotations_start_line": 169, "method_start_line": 170, "end_line": 273}, {"file_path": "/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java", "method_name": "tryRemoveAssignment", "content": "  /**\n   * Determines if any local variables are dead after the instruction {@code n}\n   * and are assigned within the subtree of {@code n}. Removes those assignments\n   * if there are any.\n   *\n   * @param n Target instruction.\n   * @param exprRoot The CFG node where the liveness information in state is\n   *     still correct.\n   * @param state The liveness information at {@code n}.\n   */\n  private void tryRemoveAssignment(NodeTraversal t, Node n, Node exprRoot,\n      FlowState<LiveVariableLattice> state) {\n\n    Node parent = n.getParent();\n\n    if (NodeUtil.isAssignmentOp(n) ||\n        n.getType() == Token.INC || n.getType() == Token.DEC) {\n\n      Node lhs = n.getFirstChild();\n      Node rhs = lhs.getNext();\n\n      // Recurse first. Example: dead_x = dead_y = 1; We try to clean up dead_y\n      // first.\n      if (rhs != null) {\n        tryRemoveAssignment(t, rhs, exprRoot, state);\n        rhs = lhs.getNext();\n      }\n\n      Scope scope = t.getScope();\n      if (!NodeUtil.isName(lhs)) {\n        return; // Not a local variable assignment.\n      }\n      String name = lhs.getString();\n      if (!scope.isDeclared(name, false)) {\n        return;\n      }\n      Var var = scope.getVar(name);\n\n      if (liveness.getEscapedLocals().contains(var)) {\n        return; // Local variable that might be escaped due to closures.\n      }\n\n      // If we have an identity assignment such as a=a, always remove it\n      // regardless of what the liveness results because it\n      // does not change the result afterward.\n      if (rhs != null &&\n          NodeUtil.isName(rhs) &&\n          rhs.getString().equals(var.name) &&\n          NodeUtil.isAssign(n)) {\n        n.removeChild(rhs);\n        n.getParent().replaceChild(n, rhs);\n        compiler.reportCodeChange();\n        return;\n      }\n\n      if (state.getOut().isLive(var)) {\n        return; // Variable not dead.\n      }\n\n      if (state.getIn().isLive(var) &&\n          isVariableStillLiveWithinExpression(n, exprRoot, var.name)) {\n        // The variable is killed here but it is also live before it.\n        // This is possible if we have say:\n        //    if (X = a && a = C) {..} ; .......; a = S;\n        // In this case we are safe to remove \"a = C\" because it is dead.\n        // However if we have:\n        //    if (a = C && X = a) {..} ; .......; a = S;\n        // removing \"a = C\" is NOT correct, although the live set at the node\n        // is exactly the same.\n        // TODO(user): We need more fine grain CFA or we need to keep track\n        // of GEN sets when we recurse here.\n        return;\n      }\n\n      if (NodeUtil.isAssign(n)) {\n        n.removeChild(rhs);\n        n.getParent().replaceChild(n, rhs);\n      } else if (NodeUtil.isAssignmentOp(n)) {\n        n.removeChild(rhs);\n        n.removeChild(lhs);\n        Node op = new Node(NodeUtil.getOpFromAssignmentOp(n), lhs, rhs);\n        parent.replaceChild(n, op);\n      } else if (n.getType() == Token.INC || n.getType() == Token.DEC) {\n        if (NodeUtil.isExpressionNode(parent)) {\n          parent.replaceChild(n,\n              new Node(Token.VOID, Node.newNumber(0).copyInformationFrom(n)));\n        } else if(n.getType() == Token.COMMA && n != parent.getLastChild()) {\n          parent.removeChild(n);\n        } else if (parent.getType() == Token.FOR && !NodeUtil.isForIn(parent) &&\n            NodeUtil.getConditionExpression(parent) != n) {\n          parent.replaceChild(n, new Node(Token.EMPTY));\n        } else {\n          // Cannot replace x = a++ with x = a because that's not valid\n          // when a is not a number.\n          return;\n        }\n      } else {\n        // Not reachable.\n        Preconditions.checkState(false, \"Unknown statement\");\n      }\n\n      compiler.reportCodeChange();\n      return;\n\n    } else {\n      for (Node c = n.getFirstChild(); c != null;) {\n        Node next = c.getNext();\n        if (!ControlFlowGraph.isEnteringNewCfgNode(c)) {\n          tryRemoveAssignment(t, c, exprRoot, state);\n        }\n        c = next;\n      }\n      return;\n    }\n  }", "javadoc_start_line": 159, "annotations_start_line": 169, "method_start_line": 170, "end_line": 273}, {"file_path": "/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java", "method_name": "tryRemoveAssignment", "content": "  /**\n   * Determines if any local variables are dead after the instruction {@code n}\n   * and are assigned within the subtree of {@code n}. Removes those assignments\n   * if there are any.\n   *\n   * @param n Target instruction.\n   * @param exprRoot The CFG node where the liveness information in state is\n   *     still correct.\n   * @param state The liveness information at {@code n}.\n   */\n  private void tryRemoveAssignment(NodeTraversal t, Node n, Node exprRoot,\n      FlowState<LiveVariableLattice> state) {\n\n    Node parent = n.getParent();\n\n    if (NodeUtil.isAssignmentOp(n) ||\n        n.getType() == Token.INC || n.getType() == Token.DEC) {\n\n      Node lhs = n.getFirstChild();\n      Node rhs = lhs.getNext();\n\n      // Recurse first. Example: dead_x = dead_y = 1; We try to clean up dead_y\n      // first.\n      if (rhs != null) {\n        tryRemoveAssignment(t, rhs, exprRoot, state);\n        rhs = lhs.getNext();\n      }\n\n      Scope scope = t.getScope();\n      if (!NodeUtil.isName(lhs)) {\n        return; // Not a local variable assignment.\n      }\n      String name = lhs.getString();\n      if (!scope.isDeclared(name, false)) {\n        return;\n      }\n      Var var = scope.getVar(name);\n\n      if (liveness.getEscapedLocals().contains(var)) {\n        return; // Local variable that might be escaped due to closures.\n      }\n\n      // If we have an identity assignment such as a=a, always remove it\n      // regardless of what the liveness results because it\n      // does not change the result afterward.\n      if (rhs != null &&\n          NodeUtil.isName(rhs) &&\n          rhs.getString().equals(var.name) &&\n          NodeUtil.isAssign(n)) {\n        n.removeChild(rhs);\n        n.getParent().replaceChild(n, rhs);\n        compiler.reportCodeChange();\n        return;\n      }\n\n      if (state.getOut().isLive(var)) {\n        return; // Variable not dead.\n      }\n\n      if (state.getIn().isLive(var) &&\n          isVariableStillLiveWithinExpression(n, exprRoot, var.name)) {\n        // The variable is killed here but it is also live before it.\n        // This is possible if we have say:\n        //    if (X = a && a = C) {..} ; .......; a = S;\n        // In this case we are safe to remove \"a = C\" because it is dead.\n        // However if we have:\n        //    if (a = C && X = a) {..} ; .......; a = S;\n        // removing \"a = C\" is NOT correct, although the live set at the node\n        // is exactly the same.\n        // TODO(user): We need more fine grain CFA or we need to keep track\n        // of GEN sets when we recurse here.\n        return;\n      }\n\n      if (NodeUtil.isAssign(n)) {\n        n.removeChild(rhs);\n        n.getParent().replaceChild(n, rhs);\n      } else if (NodeUtil.isAssignmentOp(n)) {\n        n.removeChild(rhs);\n        n.removeChild(lhs);\n        Node op = new Node(NodeUtil.getOpFromAssignmentOp(n), lhs, rhs);\n        parent.replaceChild(n, op);\n      } else if (n.getType() == Token.INC || n.getType() == Token.DEC) {\n        if (NodeUtil.isExpressionNode(parent)) {\n          parent.replaceChild(n,\n              new Node(Token.VOID, Node.newNumber(0).copyInformationFrom(n)));\n        } else if(n.getType() == Token.COMMA && n != parent.getLastChild()) {\n          parent.removeChild(n);\n        } else if (parent.getType() == Token.FOR && !NodeUtil.isForIn(parent) &&\n            NodeUtil.getConditionExpression(parent) != n) {\n          parent.replaceChild(n, new Node(Token.EMPTY));\n        } else {\n          // Cannot replace x = a++ with x = a because that's not valid\n          // when a is not a number.\n          return;\n        }\n      } else {\n        // Not reachable.\n        Preconditions.checkState(false, \"Unknown statement\");\n      }\n\n      compiler.reportCodeChange();\n      return;\n\n    } else {\n      for (Node c = n.getFirstChild(); c != null;) {\n        Node next = c.getNext();\n        if (!ControlFlowGraph.isEnteringNewCfgNode(c)) {\n          tryRemoveAssignment(t, c, exprRoot, state);\n        }\n        c = next;\n      }\n      return;\n    }\n  }", "javadoc_start_line": 159, "annotations_start_line": 169, "method_start_line": 170, "end_line": 273}, {"file_path": "/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java", "method_name": "isVariableStillLiveWithinExpression", "content": "  /**\n   * Given a variable, node n in the tree and a sub-tree denoted by exprRoot as\n   * the root, this function returns true if there exists a read of that\n   * variable before a write to that variable that is on the right side of n.\n   *\n   * For example, suppose the node is x = 1:\n   *\n   * y = 1, x = 1; // false, there is no reads at all.\n   * y = 1, x = 1, print(x) // true, there is a read right of n.\n   * y = 1, x = 1, x = 2, print(x) // false, there is a read right of n but\n   *                               // it is after a write.\n   *\n   * @param n The current node we should look at.\n   * @param exprRoot The node\n   */\n  private boolean isVariableStillLiveWithinExpression(\n      Node n, Node exprRoot, String variable) {\n    while (n != exprRoot) {\n      VariableLiveness state = VariableLiveness.MAYBE_LIVE;\n      switch (n.getParent().getType()) {\n        case Token.OR:\n        case Token.AND:\n          // If the currently node is the first child of\n          // AND/OR, be conservative only consider the READs\n          // of the second operand.\n\n        case Token.HOOK:\n          // If current node is the condition, check each following\n          // branch, otherwise it is a conditional branch and the\n          // other branch can be ignored.\n\n        default:\n          for(Node sibling = n.getNext(); sibling != null;\n              sibling = sibling.getNext()) {\n            if (!ControlFlowGraph.isEnteringNewCfgNode(sibling)) {\n            state = isVariableReadBeforeKill(sibling, variable);\n\n      // If we see a READ or KILL there is no need to continue.\n      if (state == VariableLiveness.READ) {\n        return true;\n      } else if (state == VariableLiveness.KILL) {\n        return false;\n            }\n          }\n      }\n      }\n      n = n.getParent();\n    }\n    return false;\n  }", "javadoc_start_line": 275, "annotations_start_line": 290, "method_start_line": 291, "end_line": 324}]}, {"failing_test": {"className": " com.google.javascript.jscomp.DeadAssignmentsEliminationTest", "methodName": "testIssue384b", "error": "junit.framework.AssertionFailedError", "message": ""}, "patched_method": {"file_path": "/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java", "method_name": "isVariableReadBeforeKill", "content": "  /**\n   * Give an expression and a variable. It returns READ, if the first\n   * reference of that variable is a read. It returns KILL, if the first\n   * reference of that variable is an assignment. It returns MAY_LIVE otherwise.\n   */\n  private VariableLiveness isVariableReadBeforeKill(\n      Node n, String variable) {\n\n    if (NodeUtil.isName(n) && variable.equals(n.getString())) {\n      if (NodeUtil.isLhs(n, n.getParent())) {\n        Preconditions.checkState(n.getParent().getType() == Token.ASSIGN);\n        // The expression to which the assignment is made is evaluated before\n        // the RHS is evaluated (normal left to right evaluation) but the KILL\n        // occurs after the RHS is evaluated.\n        Node rhs = n.getNext();\n        VariableLiveness state = isVariableReadBeforeKill(rhs, variable);\n        if (state == VariableLiveness.READ) {\n          return state;\n        }\n        return VariableLiveness.KILL;\n      } else {\n        return VariableLiveness.READ;\n      }\n    }\n\n    switch (n.getType()) {\n      // Conditionals\n      case Token.OR:\n      case Token.AND:\n        // With a AND/OR the first branch always runs, but the second is\n        // may not.\n      case Token.HOOK:\n        return checkHookBranchReadBeforeKill(\n            n.getFirstChild().getNext(), n.getLastChild(), variable);\n\n      default:\n        // Expressions are evaluated left-right, depth first.\n        for (Node child = n.getFirstChild();\n            child != null; child = child.getNext()) {\n          if (!ControlFlowGraph.isEnteringNewCfgNode(child)) { // Not a FUNCTION\n          VariableLiveness state = isVariableReadBeforeKill(child, variable);\n          if (state != VariableLiveness.MAYBE_LIVE) {\n            return state;\n          }\n        }\n      }\n    }\n\n    return VariableLiveness.MAYBE_LIVE;\n  }", "javadoc_start_line": 333, "annotations_start_line": 338, "method_start_line": 339, "end_line": 382}, "steps": [{"file_path": "/src/com/google/javascript/jscomp/NodeTraversal.java", "method_name": "traverse", "content": "  /**\n   * Traverses a node recursively.\n   */\n  public static void traverse(\n      AbstractCompiler compiler, Node root, Callback cb) {\n    NodeTraversal t = new NodeTraversal(compiler, cb);\n    t.traverse(root);\n  }", "javadoc_start_line": 416, "annotations_start_line": 419, "method_start_line": 420, "end_line": 423}, {"file_path": "/src/com/google/javascript/jscomp/NodeTraversal.java", "method_name": "traverse", "content": "  /**\n   * Traverses a parse tree recursively.\n   */\n  public void traverse(Node root) {\n    try {\n      sourceName = \"\";\n      curNode = root;\n      pushScope(root);\n      traverseBranch(root, null);\n      popScope();\n    } catch (Exception unexpectedException) {\n      throwUnexpectedException(unexpectedException);\n    }\n  }", "javadoc_start_line": 241, "annotations_start_line": 244, "method_start_line": 244, "end_line": 254}, {"file_path": "/src/com/google/javascript/jscomp/NodeTraversal.java", "method_name": "traverseBranch", "content": "  /**\n   * Traverses a branch.\n   */\n  @SuppressWarnings(\"fallthrough\")\n  private void traverseBranch(Node n, Node parent) {\n    int type = n.getType();\n    if (type == Token.SCRIPT) {\n      sourceName = getSourceName(n);\n    }\n\n    curNode = n;\n    if (!callback.shouldTraverse(this, n, parent)) return;\n\n    switch (type) {\n      case Token.FUNCTION:\n        traverseFunction(n, parent);\n        break;\n\n      default:\n        for (Node child = n.getFirstChild(); child != null; ) {\n          // child could be replaced, in which case our child node\n          // would no longer point to the true next\n          Node next = child.getNext();\n          traverseBranch(child, n);\n          child = next;\n        }\n        break;\n    }\n\n    curNode = n;\n    callback.visit(this, n, parent);\n  }", "javadoc_start_line": 434, "annotations_start_line": 437, "method_start_line": 438, "end_line": 465}, {"file_path": "/src/com/google/javascript/jscomp/NodeTraversal.java", "method_name": "traverseBranch", "content": "  /**\n   * Traverses a branch.\n   */\n  @SuppressWarnings(\"fallthrough\")\n  private void traverseBranch(Node n, Node parent) {\n    int type = n.getType();\n    if (type == Token.SCRIPT) {\n      sourceName = getSourceName(n);\n    }\n\n    curNode = n;\n    if (!callback.shouldTraverse(this, n, parent)) return;\n\n    switch (type) {\n      case Token.FUNCTION:\n        traverseFunction(n, parent);\n        break;\n\n      default:\n        for (Node child = n.getFirstChild(); child != null; ) {\n          // child could be replaced, in which case our child node\n          // would no longer point to the true next\n          Node next = child.getNext();\n          traverseBranch(child, n);\n          child = next;\n        }\n        break;\n    }\n\n    curNode = n;\n    callback.visit(this, n, parent);\n  }", "javadoc_start_line": 434, "annotations_start_line": 437, "method_start_line": 438, "end_line": 465}, {"file_path": "/src/com/google/javascript/jscomp/NodeTraversal.java", "method_name": "traverseBranch", "content": "  /**\n   * Traverses a branch.\n   */\n  @SuppressWarnings(\"fallthrough\")\n  private void traverseBranch(Node n, Node parent) {\n    int type = n.getType();\n    if (type == Token.SCRIPT) {\n      sourceName = getSourceName(n);\n    }\n\n    curNode = n;\n    if (!callback.shouldTraverse(this, n, parent)) return;\n\n    switch (type) {\n      case Token.FUNCTION:\n        traverseFunction(n, parent);\n        break;\n\n      default:\n        for (Node child = n.getFirstChild(); child != null; ) {\n          // child could be replaced, in which case our child node\n          // would no longer point to the true next\n          Node next = child.getNext();\n          traverseBranch(child, n);\n          child = next;\n        }\n        break;\n    }\n\n    curNode = n;\n    callback.visit(this, n, parent);\n  }", "javadoc_start_line": 434, "annotations_start_line": 437, "method_start_line": 438, "end_line": 465}, {"file_path": "/src/com/google/javascript/jscomp/NodeTraversal.java", "method_name": "traverseFunction", "content": "  /**\n   * Traverses a function.\n   */\n  private void traverseFunction(Node n, Node parent) {\n    Preconditions.checkState(n.getChildCount() == 3);\n    Preconditions.checkState(n.getType() == Token.FUNCTION);\n\n    final Node fnName = n.getFirstChild();\n\n    boolean isFunctionExpression = (parent != null)\n        && NodeUtil.isFunctionExpression(n);\n\n    if (!isFunctionExpression) {\n      // Functions declarations are in the scope containing the declaration.\n      traverseBranch(fnName, n);\n    }\n\n    curNode = n;\n    pushScope(n);\n\n    if (isFunctionExpression) {\n      // Function expression names are only accessible within the function\n      // scope.\n      traverseBranch(fnName, n);\n    }\n\n    final Node args = fnName.getNext();\n    final Node body = args.getNext();\n\n    // Args\n    traverseBranch(args, n);\n\n    // Body\n    Preconditions.checkState(body.getNext() == null &&\n            body.getType() == Token.BLOCK);\n    traverseBranch(body, n);\n\n    popScope();\n  }", "javadoc_start_line": 467, "annotations_start_line": 470, "method_start_line": 470, "end_line": 505}, {"file_path": "/src/com/google/javascript/jscomp/NodeTraversal.java", "method_name": "pushScope", "content": "  /** Creates a new scope (e.g. when entering a function). */\n  private void pushScope(Node node) {\n    Preconditions.checkState(curNode != null);\n    scopeRoots.push(node);\n    cfgs.push(null);\n    if (scopeCallback != null) {\n      scopeCallback.enterScope(this);\n    }\n  }", "javadoc_start_line": 521, "annotations_start_line": 522, "method_start_line": 522, "end_line": 529}, {"file_path": "/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java", "method_name": "enterScope", "content": "  public void enterScope(NodeTraversal t) {\n    Scope scope = t.getScope();\n    // Global scope _SHOULD_ work, however, liveness won't finish without\n    // -Xmx1024 in closure. We might have to look at coding conventions for\n    // exported variables as well.\n    if (scope.isGlobal()) {\n      return;\n    }\n\n    // We are not going to do any dead assignment elimination in when there is\n    // at least one inner function because in most browsers, when there is a\n    // closure, ALL the variables are saved (escaped).\n    Node fnBlock = t.getScopeRoot().getLastChild();\n    if (NodeUtil.containsFunction(fnBlock)) {\n      return;\n    }\n\n    // We don't do any dead assignment elimination if there are no assigns\n    // to eliminate. :)\n    if (!NodeUtil.has(fnBlock, matchRemovableAssigns,\n            Predicates.<Node>alwaysTrue())) {\n      return;\n    }\n\n    // Computes liveness information first.\n    ControlFlowGraph<Node> cfg = t.getControlFlowGraph();\n    liveness = new LiveVariablesAnalysis(cfg, scope, compiler);\n    liveness.analyze();\n    tryRemoveDeadAssignments(t, cfg);\n  }", "javadoc_start_line": 70, "annotations_start_line": 69, "method_start_line": 70, "end_line": 99}, {"file_path": "/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java", "method_name": "tryRemoveDeadAssignments", "content": "  /**\n   * Try to remove useless assignments from a control flow graph that has been\n   * annotated with liveness information.\n   *\n   * @param t The node traversal.\n   * @param cfg The control flow graph of the program annotated with liveness\n   *        information.\n   */\n  private void tryRemoveDeadAssignments(NodeTraversal t,\n      ControlFlowGraph<Node> cfg) {\n    Iterable<DiGraphNode<Node, Branch>> nodes = cfg.getDirectedGraphNodes();\n\n    for (DiGraphNode<Node, Branch> cfgNode : nodes) {\n      FlowState<LiveVariableLattice> state =\n          cfgNode.getAnnotation();\n      Node n = cfgNode.getValue();\n      if (n == null) {\n        continue;\n      }\n      switch (n.getType()) {\n        case Token.IF:\n        case Token.WHILE:\n        case Token.DO:\n          tryRemoveAssignment(t, NodeUtil.getConditionExpression(n), state);\n          continue;\n        case Token.FOR:\n          if (!NodeUtil.isForIn(n)) {\n            tryRemoveAssignment(\n                t, NodeUtil.getConditionExpression(n), state);\n          }\n          continue;\n        case Token.SWITCH:\n        case Token.CASE:\n        case Token.RETURN:\n          if (n.hasChildren()) {\n            tryRemoveAssignment(t, n.getFirstChild(), state);\n          }\n          continue;\n        // TODO(user): case Token.VAR: Remove var a=1;a=2;.....\n      }\n\n      tryRemoveAssignment(t, n, state);\n    }\n  }", "javadoc_start_line": 109, "annotations_start_line": 117, "method_start_line": 118, "end_line": 152}, {"file_path": "/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java", "method_name": "tryRemoveAssignment", "content": "  private void tryRemoveAssignment(NodeTraversal t, Node n,\n      FlowState<LiveVariableLattice> state) {\n    tryRemoveAssignment(t, n, n, state);\n  }", "javadoc_start_line": 154, "annotations_start_line": 154, "method_start_line": 155, "end_line": 157}, {"file_path": "/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java", "method_name": "tryRemoveAssignment", "content": "  /**\n   * Determines if any local variables are dead after the instruction {@code n}\n   * and are assigned within the subtree of {@code n}. Removes those assignments\n   * if there are any.\n   *\n   * @param n Target instruction.\n   * @param exprRoot The CFG node where the liveness information in state is\n   *     still correct.\n   * @param state The liveness information at {@code n}.\n   */\n  private void tryRemoveAssignment(NodeTraversal t, Node n, Node exprRoot,\n      FlowState<LiveVariableLattice> state) {\n\n    Node parent = n.getParent();\n\n    if (NodeUtil.isAssignmentOp(n) ||\n        n.getType() == Token.INC || n.getType() == Token.DEC) {\n\n      Node lhs = n.getFirstChild();\n      Node rhs = lhs.getNext();\n\n      // Recurse first. Example: dead_x = dead_y = 1; We try to clean up dead_y\n      // first.\n      if (rhs != null) {\n        tryRemoveAssignment(t, rhs, exprRoot, state);\n        rhs = lhs.getNext();\n      }\n\n      Scope scope = t.getScope();\n      if (!NodeUtil.isName(lhs)) {\n        return; // Not a local variable assignment.\n      }\n      String name = lhs.getString();\n      if (!scope.isDeclared(name, false)) {\n        return;\n      }\n      Var var = scope.getVar(name);\n\n      if (liveness.getEscapedLocals().contains(var)) {\n        return; // Local variable that might be escaped due to closures.\n      }\n\n      // If we have an identity assignment such as a=a, always remove it\n      // regardless of what the liveness results because it\n      // does not change the result afterward.\n      if (rhs != null &&\n          NodeUtil.isName(rhs) &&\n          rhs.getString().equals(var.name) &&\n          NodeUtil.isAssign(n)) {\n        n.removeChild(rhs);\n        n.getParent().replaceChild(n, rhs);\n        compiler.reportCodeChange();\n        return;\n      }\n\n      if (state.getOut().isLive(var)) {\n        return; // Variable not dead.\n      }\n\n      if (state.getIn().isLive(var) &&\n          isVariableStillLiveWithinExpression(n, exprRoot, var.name)) {\n        // The variable is killed here but it is also live before it.\n        // This is possible if we have say:\n        //    if (X = a && a = C) {..} ; .......; a = S;\n        // In this case we are safe to remove \"a = C\" because it is dead.\n        // However if we have:\n        //    if (a = C && X = a) {..} ; .......; a = S;\n        // removing \"a = C\" is NOT correct, although the live set at the node\n        // is exactly the same.\n        // TODO(user): We need more fine grain CFA or we need to keep track\n        // of GEN sets when we recurse here.\n        return;\n      }\n\n      if (NodeUtil.isAssign(n)) {\n        n.removeChild(rhs);\n        n.getParent().replaceChild(n, rhs);\n      } else if (NodeUtil.isAssignmentOp(n)) {\n        n.removeChild(rhs);\n        n.removeChild(lhs);\n        Node op = new Node(NodeUtil.getOpFromAssignmentOp(n), lhs, rhs);\n        parent.replaceChild(n, op);\n      } else if (n.getType() == Token.INC || n.getType() == Token.DEC) {\n        if (NodeUtil.isExpressionNode(parent)) {\n          parent.replaceChild(n,\n              new Node(Token.VOID, Node.newNumber(0).copyInformationFrom(n)));\n        } else if(n.getType() == Token.COMMA && n != parent.getLastChild()) {\n          parent.removeChild(n);\n        } else if (parent.getType() == Token.FOR && !NodeUtil.isForIn(parent) &&\n            NodeUtil.getConditionExpression(parent) != n) {\n          parent.replaceChild(n, new Node(Token.EMPTY));\n        } else {\n          // Cannot replace x = a++ with x = a because that's not valid\n          // when a is not a number.\n          return;\n        }\n      } else {\n        // Not reachable.\n        Preconditions.checkState(false, \"Unknown statement\");\n      }\n\n      compiler.reportCodeChange();\n      return;\n\n    } else {\n      for (Node c = n.getFirstChild(); c != null;) {\n        Node next = c.getNext();\n        if (!ControlFlowGraph.isEnteringNewCfgNode(c)) {\n          tryRemoveAssignment(t, c, exprRoot, state);\n        }\n        c = next;\n      }\n      return;\n    }\n  }", "javadoc_start_line": 159, "annotations_start_line": 169, "method_start_line": 170, "end_line": 273}, {"file_path": "/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java", "method_name": "tryRemoveAssignment", "content": "  /**\n   * Determines if any local variables are dead after the instruction {@code n}\n   * and are assigned within the subtree of {@code n}. Removes those assignments\n   * if there are any.\n   *\n   * @param n Target instruction.\n   * @param exprRoot The CFG node where the liveness information in state is\n   *     still correct.\n   * @param state The liveness information at {@code n}.\n   */\n  private void tryRemoveAssignment(NodeTraversal t, Node n, Node exprRoot,\n      FlowState<LiveVariableLattice> state) {\n\n    Node parent = n.getParent();\n\n    if (NodeUtil.isAssignmentOp(n) ||\n        n.getType() == Token.INC || n.getType() == Token.DEC) {\n\n      Node lhs = n.getFirstChild();\n      Node rhs = lhs.getNext();\n\n      // Recurse first. Example: dead_x = dead_y = 1; We try to clean up dead_y\n      // first.\n      if (rhs != null) {\n        tryRemoveAssignment(t, rhs, exprRoot, state);\n        rhs = lhs.getNext();\n      }\n\n      Scope scope = t.getScope();\n      if (!NodeUtil.isName(lhs)) {\n        return; // Not a local variable assignment.\n      }\n      String name = lhs.getString();\n      if (!scope.isDeclared(name, false)) {\n        return;\n      }\n      Var var = scope.getVar(name);\n\n      if (liveness.getEscapedLocals().contains(var)) {\n        return; // Local variable that might be escaped due to closures.\n      }\n\n      // If we have an identity assignment such as a=a, always remove it\n      // regardless of what the liveness results because it\n      // does not change the result afterward.\n      if (rhs != null &&\n          NodeUtil.isName(rhs) &&\n          rhs.getString().equals(var.name) &&\n          NodeUtil.isAssign(n)) {\n        n.removeChild(rhs);\n        n.getParent().replaceChild(n, rhs);\n        compiler.reportCodeChange();\n        return;\n      }\n\n      if (state.getOut().isLive(var)) {\n        return; // Variable not dead.\n      }\n\n      if (state.getIn().isLive(var) &&\n          isVariableStillLiveWithinExpression(n, exprRoot, var.name)) {\n        // The variable is killed here but it is also live before it.\n        // This is possible if we have say:\n        //    if (X = a && a = C) {..} ; .......; a = S;\n        // In this case we are safe to remove \"a = C\" because it is dead.\n        // However if we have:\n        //    if (a = C && X = a) {..} ; .......; a = S;\n        // removing \"a = C\" is NOT correct, although the live set at the node\n        // is exactly the same.\n        // TODO(user): We need more fine grain CFA or we need to keep track\n        // of GEN sets when we recurse here.\n        return;\n      }\n\n      if (NodeUtil.isAssign(n)) {\n        n.removeChild(rhs);\n        n.getParent().replaceChild(n, rhs);\n      } else if (NodeUtil.isAssignmentOp(n)) {\n        n.removeChild(rhs);\n        n.removeChild(lhs);\n        Node op = new Node(NodeUtil.getOpFromAssignmentOp(n), lhs, rhs);\n        parent.replaceChild(n, op);\n      } else if (n.getType() == Token.INC || n.getType() == Token.DEC) {\n        if (NodeUtil.isExpressionNode(parent)) {\n          parent.replaceChild(n,\n              new Node(Token.VOID, Node.newNumber(0).copyInformationFrom(n)));\n        } else if(n.getType() == Token.COMMA && n != parent.getLastChild()) {\n          parent.removeChild(n);\n        } else if (parent.getType() == Token.FOR && !NodeUtil.isForIn(parent) &&\n            NodeUtil.getConditionExpression(parent) != n) {\n          parent.replaceChild(n, new Node(Token.EMPTY));\n        } else {\n          // Cannot replace x = a++ with x = a because that's not valid\n          // when a is not a number.\n          return;\n        }\n      } else {\n        // Not reachable.\n        Preconditions.checkState(false, \"Unknown statement\");\n      }\n\n      compiler.reportCodeChange();\n      return;\n\n    } else {\n      for (Node c = n.getFirstChild(); c != null;) {\n        Node next = c.getNext();\n        if (!ControlFlowGraph.isEnteringNewCfgNode(c)) {\n          tryRemoveAssignment(t, c, exprRoot, state);\n        }\n        c = next;\n      }\n      return;\n    }\n  }", "javadoc_start_line": 159, "annotations_start_line": 169, "method_start_line": 170, "end_line": 273}, {"file_path": "/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java", "method_name": "tryRemoveAssignment", "content": "  /**\n   * Determines if any local variables are dead after the instruction {@code n}\n   * and are assigned within the subtree of {@code n}. Removes those assignments\n   * if there are any.\n   *\n   * @param n Target instruction.\n   * @param exprRoot The CFG node where the liveness information in state is\n   *     still correct.\n   * @param state The liveness information at {@code n}.\n   */\n  private void tryRemoveAssignment(NodeTraversal t, Node n, Node exprRoot,\n      FlowState<LiveVariableLattice> state) {\n\n    Node parent = n.getParent();\n\n    if (NodeUtil.isAssignmentOp(n) ||\n        n.getType() == Token.INC || n.getType() == Token.DEC) {\n\n      Node lhs = n.getFirstChild();\n      Node rhs = lhs.getNext();\n\n      // Recurse first. Example: dead_x = dead_y = 1; We try to clean up dead_y\n      // first.\n      if (rhs != null) {\n        tryRemoveAssignment(t, rhs, exprRoot, state);\n        rhs = lhs.getNext();\n      }\n\n      Scope scope = t.getScope();\n      if (!NodeUtil.isName(lhs)) {\n        return; // Not a local variable assignment.\n      }\n      String name = lhs.getString();\n      if (!scope.isDeclared(name, false)) {\n        return;\n      }\n      Var var = scope.getVar(name);\n\n      if (liveness.getEscapedLocals().contains(var)) {\n        return; // Local variable that might be escaped due to closures.\n      }\n\n      // If we have an identity assignment such as a=a, always remove it\n      // regardless of what the liveness results because it\n      // does not change the result afterward.\n      if (rhs != null &&\n          NodeUtil.isName(rhs) &&\n          rhs.getString().equals(var.name) &&\n          NodeUtil.isAssign(n)) {\n        n.removeChild(rhs);\n        n.getParent().replaceChild(n, rhs);\n        compiler.reportCodeChange();\n        return;\n      }\n\n      if (state.getOut().isLive(var)) {\n        return; // Variable not dead.\n      }\n\n      if (state.getIn().isLive(var) &&\n          isVariableStillLiveWithinExpression(n, exprRoot, var.name)) {\n        // The variable is killed here but it is also live before it.\n        // This is possible if we have say:\n        //    if (X = a && a = C) {..} ; .......; a = S;\n        // In this case we are safe to remove \"a = C\" because it is dead.\n        // However if we have:\n        //    if (a = C && X = a) {..} ; .......; a = S;\n        // removing \"a = C\" is NOT correct, although the live set at the node\n        // is exactly the same.\n        // TODO(user): We need more fine grain CFA or we need to keep track\n        // of GEN sets when we recurse here.\n        return;\n      }\n\n      if (NodeUtil.isAssign(n)) {\n        n.removeChild(rhs);\n        n.getParent().replaceChild(n, rhs);\n      } else if (NodeUtil.isAssignmentOp(n)) {\n        n.removeChild(rhs);\n        n.removeChild(lhs);\n        Node op = new Node(NodeUtil.getOpFromAssignmentOp(n), lhs, rhs);\n        parent.replaceChild(n, op);\n      } else if (n.getType() == Token.INC || n.getType() == Token.DEC) {\n        if (NodeUtil.isExpressionNode(parent)) {\n          parent.replaceChild(n,\n              new Node(Token.VOID, Node.newNumber(0).copyInformationFrom(n)));\n        } else if(n.getType() == Token.COMMA && n != parent.getLastChild()) {\n          parent.removeChild(n);\n        } else if (parent.getType() == Token.FOR && !NodeUtil.isForIn(parent) &&\n            NodeUtil.getConditionExpression(parent) != n) {\n          parent.replaceChild(n, new Node(Token.EMPTY));\n        } else {\n          // Cannot replace x = a++ with x = a because that's not valid\n          // when a is not a number.\n          return;\n        }\n      } else {\n        // Not reachable.\n        Preconditions.checkState(false, \"Unknown statement\");\n      }\n\n      compiler.reportCodeChange();\n      return;\n\n    } else {\n      for (Node c = n.getFirstChild(); c != null;) {\n        Node next = c.getNext();\n        if (!ControlFlowGraph.isEnteringNewCfgNode(c)) {\n          tryRemoveAssignment(t, c, exprRoot, state);\n        }\n        c = next;\n      }\n      return;\n    }\n  }", "javadoc_start_line": 159, "annotations_start_line": 169, "method_start_line": 170, "end_line": 273}, {"file_path": "/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java", "method_name": "tryRemoveAssignment", "content": "  /**\n   * Determines if any local variables are dead after the instruction {@code n}\n   * and are assigned within the subtree of {@code n}. Removes those assignments\n   * if there are any.\n   *\n   * @param n Target instruction.\n   * @param exprRoot The CFG node where the liveness information in state is\n   *     still correct.\n   * @param state The liveness information at {@code n}.\n   */\n  private void tryRemoveAssignment(NodeTraversal t, Node n, Node exprRoot,\n      FlowState<LiveVariableLattice> state) {\n\n    Node parent = n.getParent();\n\n    if (NodeUtil.isAssignmentOp(n) ||\n        n.getType() == Token.INC || n.getType() == Token.DEC) {\n\n      Node lhs = n.getFirstChild();\n      Node rhs = lhs.getNext();\n\n      // Recurse first. Example: dead_x = dead_y = 1; We try to clean up dead_y\n      // first.\n      if (rhs != null) {\n        tryRemoveAssignment(t, rhs, exprRoot, state);\n        rhs = lhs.getNext();\n      }\n\n      Scope scope = t.getScope();\n      if (!NodeUtil.isName(lhs)) {\n        return; // Not a local variable assignment.\n      }\n      String name = lhs.getString();\n      if (!scope.isDeclared(name, false)) {\n        return;\n      }\n      Var var = scope.getVar(name);\n\n      if (liveness.getEscapedLocals().contains(var)) {\n        return; // Local variable that might be escaped due to closures.\n      }\n\n      // If we have an identity assignment such as a=a, always remove it\n      // regardless of what the liveness results because it\n      // does not change the result afterward.\n      if (rhs != null &&\n          NodeUtil.isName(rhs) &&\n          rhs.getString().equals(var.name) &&\n          NodeUtil.isAssign(n)) {\n        n.removeChild(rhs);\n        n.getParent().replaceChild(n, rhs);\n        compiler.reportCodeChange();\n        return;\n      }\n\n      if (state.getOut().isLive(var)) {\n        return; // Variable not dead.\n      }\n\n      if (state.getIn().isLive(var) &&\n          isVariableStillLiveWithinExpression(n, exprRoot, var.name)) {\n        // The variable is killed here but it is also live before it.\n        // This is possible if we have say:\n        //    if (X = a && a = C) {..} ; .......; a = S;\n        // In this case we are safe to remove \"a = C\" because it is dead.\n        // However if we have:\n        //    if (a = C && X = a) {..} ; .......; a = S;\n        // removing \"a = C\" is NOT correct, although the live set at the node\n        // is exactly the same.\n        // TODO(user): We need more fine grain CFA or we need to keep track\n        // of GEN sets when we recurse here.\n        return;\n      }\n\n      if (NodeUtil.isAssign(n)) {\n        n.removeChild(rhs);\n        n.getParent().replaceChild(n, rhs);\n      } else if (NodeUtil.isAssignmentOp(n)) {\n        n.removeChild(rhs);\n        n.removeChild(lhs);\n        Node op = new Node(NodeUtil.getOpFromAssignmentOp(n), lhs, rhs);\n        parent.replaceChild(n, op);\n      } else if (n.getType() == Token.INC || n.getType() == Token.DEC) {\n        if (NodeUtil.isExpressionNode(parent)) {\n          parent.replaceChild(n,\n              new Node(Token.VOID, Node.newNumber(0).copyInformationFrom(n)));\n        } else if(n.getType() == Token.COMMA && n != parent.getLastChild()) {\n          parent.removeChild(n);\n        } else if (parent.getType() == Token.FOR && !NodeUtil.isForIn(parent) &&\n            NodeUtil.getConditionExpression(parent) != n) {\n          parent.replaceChild(n, new Node(Token.EMPTY));\n        } else {\n          // Cannot replace x = a++ with x = a because that's not valid\n          // when a is not a number.\n          return;\n        }\n      } else {\n        // Not reachable.\n        Preconditions.checkState(false, \"Unknown statement\");\n      }\n\n      compiler.reportCodeChange();\n      return;\n\n    } else {\n      for (Node c = n.getFirstChild(); c != null;) {\n        Node next = c.getNext();\n        if (!ControlFlowGraph.isEnteringNewCfgNode(c)) {\n          tryRemoveAssignment(t, c, exprRoot, state);\n        }\n        c = next;\n      }\n      return;\n    }\n  }", "javadoc_start_line": 159, "annotations_start_line": 169, "method_start_line": 170, "end_line": 273}, {"file_path": "/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java", "method_name": "tryRemoveAssignment", "content": "  /**\n   * Determines if any local variables are dead after the instruction {@code n}\n   * and are assigned within the subtree of {@code n}. Removes those assignments\n   * if there are any.\n   *\n   * @param n Target instruction.\n   * @param exprRoot The CFG node where the liveness information in state is\n   *     still correct.\n   * @param state The liveness information at {@code n}.\n   */\n  private void tryRemoveAssignment(NodeTraversal t, Node n, Node exprRoot,\n      FlowState<LiveVariableLattice> state) {\n\n    Node parent = n.getParent();\n\n    if (NodeUtil.isAssignmentOp(n) ||\n        n.getType() == Token.INC || n.getType() == Token.DEC) {\n\n      Node lhs = n.getFirstChild();\n      Node rhs = lhs.getNext();\n\n      // Recurse first. Example: dead_x = dead_y = 1; We try to clean up dead_y\n      // first.\n      if (rhs != null) {\n        tryRemoveAssignment(t, rhs, exprRoot, state);\n        rhs = lhs.getNext();\n      }\n\n      Scope scope = t.getScope();\n      if (!NodeUtil.isName(lhs)) {\n        return; // Not a local variable assignment.\n      }\n      String name = lhs.getString();\n      if (!scope.isDeclared(name, false)) {\n        return;\n      }\n      Var var = scope.getVar(name);\n\n      if (liveness.getEscapedLocals().contains(var)) {\n        return; // Local variable that might be escaped due to closures.\n      }\n\n      // If we have an identity assignment such as a=a, always remove it\n      // regardless of what the liveness results because it\n      // does not change the result afterward.\n      if (rhs != null &&\n          NodeUtil.isName(rhs) &&\n          rhs.getString().equals(var.name) &&\n          NodeUtil.isAssign(n)) {\n        n.removeChild(rhs);\n        n.getParent().replaceChild(n, rhs);\n        compiler.reportCodeChange();\n        return;\n      }\n\n      if (state.getOut().isLive(var)) {\n        return; // Variable not dead.\n      }\n\n      if (state.getIn().isLive(var) &&\n          isVariableStillLiveWithinExpression(n, exprRoot, var.name)) {\n        // The variable is killed here but it is also live before it.\n        // This is possible if we have say:\n        //    if (X = a && a = C) {..} ; .......; a = S;\n        // In this case we are safe to remove \"a = C\" because it is dead.\n        // However if we have:\n        //    if (a = C && X = a) {..} ; .......; a = S;\n        // removing \"a = C\" is NOT correct, although the live set at the node\n        // is exactly the same.\n        // TODO(user): We need more fine grain CFA or we need to keep track\n        // of GEN sets when we recurse here.\n        return;\n      }\n\n      if (NodeUtil.isAssign(n)) {\n        n.removeChild(rhs);\n        n.getParent().replaceChild(n, rhs);\n      } else if (NodeUtil.isAssignmentOp(n)) {\n        n.removeChild(rhs);\n        n.removeChild(lhs);\n        Node op = new Node(NodeUtil.getOpFromAssignmentOp(n), lhs, rhs);\n        parent.replaceChild(n, op);\n      } else if (n.getType() == Token.INC || n.getType() == Token.DEC) {\n        if (NodeUtil.isExpressionNode(parent)) {\n          parent.replaceChild(n,\n              new Node(Token.VOID, Node.newNumber(0).copyInformationFrom(n)));\n        } else if(n.getType() == Token.COMMA && n != parent.getLastChild()) {\n          parent.removeChild(n);\n        } else if (parent.getType() == Token.FOR && !NodeUtil.isForIn(parent) &&\n            NodeUtil.getConditionExpression(parent) != n) {\n          parent.replaceChild(n, new Node(Token.EMPTY));\n        } else {\n          // Cannot replace x = a++ with x = a because that's not valid\n          // when a is not a number.\n          return;\n        }\n      } else {\n        // Not reachable.\n        Preconditions.checkState(false, \"Unknown statement\");\n      }\n\n      compiler.reportCodeChange();\n      return;\n\n    } else {\n      for (Node c = n.getFirstChild(); c != null;) {\n        Node next = c.getNext();\n        if (!ControlFlowGraph.isEnteringNewCfgNode(c)) {\n          tryRemoveAssignment(t, c, exprRoot, state);\n        }\n        c = next;\n      }\n      return;\n    }\n  }", "javadoc_start_line": 159, "annotations_start_line": 169, "method_start_line": 170, "end_line": 273}, {"file_path": "/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java", "method_name": "isVariableStillLiveWithinExpression", "content": "  /**\n   * Given a variable, node n in the tree and a sub-tree denoted by exprRoot as\n   * the root, this function returns true if there exists a read of that\n   * variable before a write to that variable that is on the right side of n.\n   *\n   * For example, suppose the node is x = 1:\n   *\n   * y = 1, x = 1; // false, there is no reads at all.\n   * y = 1, x = 1, print(x) // true, there is a read right of n.\n   * y = 1, x = 1, x = 2, print(x) // false, there is a read right of n but\n   *                               // it is after a write.\n   *\n   * @param n The current node we should look at.\n   * @param exprRoot The node\n   */\n  private boolean isVariableStillLiveWithinExpression(\n      Node n, Node exprRoot, String variable) {\n    while (n != exprRoot) {\n      VariableLiveness state = VariableLiveness.MAYBE_LIVE;\n      switch (n.getParent().getType()) {\n        case Token.OR:\n        case Token.AND:\n          // If the currently node is the first child of\n          // AND/OR, be conservative only consider the READs\n          // of the second operand.\n\n        case Token.HOOK:\n          // If current node is the condition, check each following\n          // branch, otherwise it is a conditional branch and the\n          // other branch can be ignored.\n\n        default:\n          for(Node sibling = n.getNext(); sibling != null;\n              sibling = sibling.getNext()) {\n            if (!ControlFlowGraph.isEnteringNewCfgNode(sibling)) {\n            state = isVariableReadBeforeKill(sibling, variable);\n\n      // If we see a READ or KILL there is no need to continue.\n      if (state == VariableLiveness.READ) {\n        return true;\n      } else if (state == VariableLiveness.KILL) {\n        return false;\n            }\n          }\n      }\n      }\n      n = n.getParent();\n    }\n    return false;\n  }", "javadoc_start_line": 275, "annotations_start_line": 290, "method_start_line": 291, "end_line": 324}, {"file_path": "/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java", "method_name": "isVariableReadBeforeKill", "content": "  /**\n   * Give an expression and a variable. It returns READ, if the first\n   * reference of that variable is a read. It returns KILL, if the first\n   * reference of that variable is an assignment. It returns MAY_LIVE otherwise.\n   */\n  private VariableLiveness isVariableReadBeforeKill(\n      Node n, String variable) {\n\n    if (NodeUtil.isName(n) && variable.equals(n.getString())) {\n      if (NodeUtil.isLhs(n, n.getParent())) {\n        Preconditions.checkState(n.getParent().getType() == Token.ASSIGN);\n        // The expression to which the assignment is made is evaluated before\n        // the RHS is evaluated (normal left to right evaluation) but the KILL\n        // occurs after the RHS is evaluated.\n        Node rhs = n.getNext();\n        VariableLiveness state = isVariableReadBeforeKill(rhs, variable);\n        if (state == VariableLiveness.READ) {\n          return state;\n        }\n        return VariableLiveness.KILL;\n      } else {\n        return VariableLiveness.READ;\n      }\n    }\n\n    switch (n.getType()) {\n      // Conditionals\n      case Token.OR:\n      case Token.AND:\n        // With a AND/OR the first branch always runs, but the second is\n        // may not.\n      case Token.HOOK:\n        return checkHookBranchReadBeforeKill(\n            n.getFirstChild().getNext(), n.getLastChild(), variable);\n\n      default:\n        // Expressions are evaluated left-right, depth first.\n        for (Node child = n.getFirstChild();\n            child != null; child = child.getNext()) {\n          if (!ControlFlowGraph.isEnteringNewCfgNode(child)) { // Not a FUNCTION\n          VariableLiveness state = isVariableReadBeforeKill(child, variable);\n          if (state != VariableLiveness.MAYBE_LIVE) {\n            return state;\n          }\n        }\n      }\n    }\n\n    return VariableLiveness.MAYBE_LIVE;\n  }", "javadoc_start_line": 333, "annotations_start_line": 338, "method_start_line": 339, "end_line": 382}]}, {"failing_test": {"className": " com.google.javascript.jscomp.DeadAssignmentsEliminationTest", "methodName": "testIssue384b", "error": "junit.framework.AssertionFailedError", "message": ""}, "patched_method": {"file_path": "/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java", "method_name": "isVariableStillLiveWithinExpression", "content": "  /**\n   * Given a variable, node n in the tree and a sub-tree denoted by exprRoot as\n   * the root, this function returns true if there exists a read of that\n   * variable before a write to that variable that is on the right side of n.\n   *\n   * For example, suppose the node is x = 1:\n   *\n   * y = 1, x = 1; // false, there is no reads at all.\n   * y = 1, x = 1, print(x) // true, there is a read right of n.\n   * y = 1, x = 1, x = 2, print(x) // false, there is a read right of n but\n   *                               // it is after a write.\n   *\n   * @param n The current node we should look at.\n   * @param exprRoot The node\n   */\n  private boolean isVariableStillLiveWithinExpression(\n      Node n, Node exprRoot, String variable) {\n    while (n != exprRoot) {\n      VariableLiveness state = VariableLiveness.MAYBE_LIVE;\n      switch (n.getParent().getType()) {\n        case Token.OR:\n        case Token.AND:\n          // If the currently node is the first child of\n          // AND/OR, be conservative only consider the READs\n          // of the second operand.\n\n        case Token.HOOK:\n          // If current node is the condition, check each following\n          // branch, otherwise it is a conditional branch and the\n          // other branch can be ignored.\n\n        default:\n          for(Node sibling = n.getNext(); sibling != null;\n              sibling = sibling.getNext()) {\n            if (!ControlFlowGraph.isEnteringNewCfgNode(sibling)) {\n            state = isVariableReadBeforeKill(sibling, variable);\n\n      // If we see a READ or KILL there is no need to continue.\n      if (state == VariableLiveness.READ) {\n        return true;\n      } else if (state == VariableLiveness.KILL) {\n        return false;\n            }\n          }\n      }\n      }\n      n = n.getParent();\n    }\n    return false;\n  }", "javadoc_start_line": 275, "annotations_start_line": 290, "method_start_line": 291, "end_line": 324}, "steps": [{"file_path": "/src/com/google/javascript/jscomp/NodeTraversal.java", "method_name": "traverse", "content": "  /**\n   * Traverses a node recursively.\n   */\n  public static void traverse(\n      AbstractCompiler compiler, Node root, Callback cb) {\n    NodeTraversal t = new NodeTraversal(compiler, cb);\n    t.traverse(root);\n  }", "javadoc_start_line": 416, "annotations_start_line": 419, "method_start_line": 420, "end_line": 423}, {"file_path": "/src/com/google/javascript/jscomp/NodeTraversal.java", "method_name": "traverse", "content": "  /**\n   * Traverses a parse tree recursively.\n   */\n  public void traverse(Node root) {\n    try {\n      sourceName = \"\";\n      curNode = root;\n      pushScope(root);\n      traverseBranch(root, null);\n      popScope();\n    } catch (Exception unexpectedException) {\n      throwUnexpectedException(unexpectedException);\n    }\n  }", "javadoc_start_line": 241, "annotations_start_line": 244, "method_start_line": 244, "end_line": 254}, {"file_path": "/src/com/google/javascript/jscomp/NodeTraversal.java", "method_name": "traverseBranch", "content": "  /**\n   * Traverses a branch.\n   */\n  @SuppressWarnings(\"fallthrough\")\n  private void traverseBranch(Node n, Node parent) {\n    int type = n.getType();\n    if (type == Token.SCRIPT) {\n      sourceName = getSourceName(n);\n    }\n\n    curNode = n;\n    if (!callback.shouldTraverse(this, n, parent)) return;\n\n    switch (type) {\n      case Token.FUNCTION:\n        traverseFunction(n, parent);\n        break;\n\n      default:\n        for (Node child = n.getFirstChild(); child != null; ) {\n          // child could be replaced, in which case our child node\n          // would no longer point to the true next\n          Node next = child.getNext();\n          traverseBranch(child, n);\n          child = next;\n        }\n        break;\n    }\n\n    curNode = n;\n    callback.visit(this, n, parent);\n  }", "javadoc_start_line": 434, "annotations_start_line": 437, "method_start_line": 438, "end_line": 465}, {"file_path": "/src/com/google/javascript/jscomp/NodeTraversal.java", "method_name": "traverseBranch", "content": "  /**\n   * Traverses a branch.\n   */\n  @SuppressWarnings(\"fallthrough\")\n  private void traverseBranch(Node n, Node parent) {\n    int type = n.getType();\n    if (type == Token.SCRIPT) {\n      sourceName = getSourceName(n);\n    }\n\n    curNode = n;\n    if (!callback.shouldTraverse(this, n, parent)) return;\n\n    switch (type) {\n      case Token.FUNCTION:\n        traverseFunction(n, parent);\n        break;\n\n      default:\n        for (Node child = n.getFirstChild(); child != null; ) {\n          // child could be replaced, in which case our child node\n          // would no longer point to the true next\n          Node next = child.getNext();\n          traverseBranch(child, n);\n          child = next;\n        }\n        break;\n    }\n\n    curNode = n;\n    callback.visit(this, n, parent);\n  }", "javadoc_start_line": 434, "annotations_start_line": 437, "method_start_line": 438, "end_line": 465}, {"file_path": "/src/com/google/javascript/jscomp/NodeTraversal.java", "method_name": "traverseBranch", "content": "  /**\n   * Traverses a branch.\n   */\n  @SuppressWarnings(\"fallthrough\")\n  private void traverseBranch(Node n, Node parent) {\n    int type = n.getType();\n    if (type == Token.SCRIPT) {\n      sourceName = getSourceName(n);\n    }\n\n    curNode = n;\n    if (!callback.shouldTraverse(this, n, parent)) return;\n\n    switch (type) {\n      case Token.FUNCTION:\n        traverseFunction(n, parent);\n        break;\n\n      default:\n        for (Node child = n.getFirstChild(); child != null; ) {\n          // child could be replaced, in which case our child node\n          // would no longer point to the true next\n          Node next = child.getNext();\n          traverseBranch(child, n);\n          child = next;\n        }\n        break;\n    }\n\n    curNode = n;\n    callback.visit(this, n, parent);\n  }", "javadoc_start_line": 434, "annotations_start_line": 437, "method_start_line": 438, "end_line": 465}, {"file_path": "/src/com/google/javascript/jscomp/NodeTraversal.java", "method_name": "traverseFunction", "content": "  /**\n   * Traverses a function.\n   */\n  private void traverseFunction(Node n, Node parent) {\n    Preconditions.checkState(n.getChildCount() == 3);\n    Preconditions.checkState(n.getType() == Token.FUNCTION);\n\n    final Node fnName = n.getFirstChild();\n\n    boolean isFunctionExpression = (parent != null)\n        && NodeUtil.isFunctionExpression(n);\n\n    if (!isFunctionExpression) {\n      // Functions declarations are in the scope containing the declaration.\n      traverseBranch(fnName, n);\n    }\n\n    curNode = n;\n    pushScope(n);\n\n    if (isFunctionExpression) {\n      // Function expression names are only accessible within the function\n      // scope.\n      traverseBranch(fnName, n);\n    }\n\n    final Node args = fnName.getNext();\n    final Node body = args.getNext();\n\n    // Args\n    traverseBranch(args, n);\n\n    // Body\n    Preconditions.checkState(body.getNext() == null &&\n            body.getType() == Token.BLOCK);\n    traverseBranch(body, n);\n\n    popScope();\n  }", "javadoc_start_line": 467, "annotations_start_line": 470, "method_start_line": 470, "end_line": 505}, {"file_path": "/src/com/google/javascript/jscomp/NodeTraversal.java", "method_name": "pushScope", "content": "  /** Creates a new scope (e.g. when entering a function). */\n  private void pushScope(Node node) {\n    Preconditions.checkState(curNode != null);\n    scopeRoots.push(node);\n    cfgs.push(null);\n    if (scopeCallback != null) {\n      scopeCallback.enterScope(this);\n    }\n  }", "javadoc_start_line": 521, "annotations_start_line": 522, "method_start_line": 522, "end_line": 529}, {"file_path": "/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java", "method_name": "enterScope", "content": "  public void enterScope(NodeTraversal t) {\n    Scope scope = t.getScope();\n    // Global scope _SHOULD_ work, however, liveness won't finish without\n    // -Xmx1024 in closure. We might have to look at coding conventions for\n    // exported variables as well.\n    if (scope.isGlobal()) {\n      return;\n    }\n\n    // We are not going to do any dead assignment elimination in when there is\n    // at least one inner function because in most browsers, when there is a\n    // closure, ALL the variables are saved (escaped).\n    Node fnBlock = t.getScopeRoot().getLastChild();\n    if (NodeUtil.containsFunction(fnBlock)) {\n      return;\n    }\n\n    // We don't do any dead assignment elimination if there are no assigns\n    // to eliminate. :)\n    if (!NodeUtil.has(fnBlock, matchRemovableAssigns,\n            Predicates.<Node>alwaysTrue())) {\n      return;\n    }\n\n    // Computes liveness information first.\n    ControlFlowGraph<Node> cfg = t.getControlFlowGraph();\n    liveness = new LiveVariablesAnalysis(cfg, scope, compiler);\n    liveness.analyze();\n    tryRemoveDeadAssignments(t, cfg);\n  }", "javadoc_start_line": 70, "annotations_start_line": 69, "method_start_line": 70, "end_line": 99}, {"file_path": "/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java", "method_name": "tryRemoveDeadAssignments", "content": "  /**\n   * Try to remove useless assignments from a control flow graph that has been\n   * annotated with liveness information.\n   *\n   * @param t The node traversal.\n   * @param cfg The control flow graph of the program annotated with liveness\n   *        information.\n   */\n  private void tryRemoveDeadAssignments(NodeTraversal t,\n      ControlFlowGraph<Node> cfg) {\n    Iterable<DiGraphNode<Node, Branch>> nodes = cfg.getDirectedGraphNodes();\n\n    for (DiGraphNode<Node, Branch> cfgNode : nodes) {\n      FlowState<LiveVariableLattice> state =\n          cfgNode.getAnnotation();\n      Node n = cfgNode.getValue();\n      if (n == null) {\n        continue;\n      }\n      switch (n.getType()) {\n        case Token.IF:\n        case Token.WHILE:\n        case Token.DO:\n          tryRemoveAssignment(t, NodeUtil.getConditionExpression(n), state);\n          continue;\n        case Token.FOR:\n          if (!NodeUtil.isForIn(n)) {\n            tryRemoveAssignment(\n                t, NodeUtil.getConditionExpression(n), state);\n          }\n          continue;\n        case Token.SWITCH:\n        case Token.CASE:\n        case Token.RETURN:\n          if (n.hasChildren()) {\n            tryRemoveAssignment(t, n.getFirstChild(), state);\n          }\n          continue;\n        // TODO(user): case Token.VAR: Remove var a=1;a=2;.....\n      }\n\n      tryRemoveAssignment(t, n, state);\n    }\n  }", "javadoc_start_line": 109, "annotations_start_line": 117, "method_start_line": 118, "end_line": 152}, {"file_path": "/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java", "method_name": "tryRemoveAssignment", "content": "  private void tryRemoveAssignment(NodeTraversal t, Node n,\n      FlowState<LiveVariableLattice> state) {\n    tryRemoveAssignment(t, n, n, state);\n  }", "javadoc_start_line": 154, "annotations_start_line": 154, "method_start_line": 155, "end_line": 157}, {"file_path": "/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java", "method_name": "tryRemoveAssignment", "content": "  /**\n   * Determines if any local variables are dead after the instruction {@code n}\n   * and are assigned within the subtree of {@code n}. Removes those assignments\n   * if there are any.\n   *\n   * @param n Target instruction.\n   * @param exprRoot The CFG node where the liveness information in state is\n   *     still correct.\n   * @param state The liveness information at {@code n}.\n   */\n  private void tryRemoveAssignment(NodeTraversal t, Node n, Node exprRoot,\n      FlowState<LiveVariableLattice> state) {\n\n    Node parent = n.getParent();\n\n    if (NodeUtil.isAssignmentOp(n) ||\n        n.getType() == Token.INC || n.getType() == Token.DEC) {\n\n      Node lhs = n.getFirstChild();\n      Node rhs = lhs.getNext();\n\n      // Recurse first. Example: dead_x = dead_y = 1; We try to clean up dead_y\n      // first.\n      if (rhs != null) {\n        tryRemoveAssignment(t, rhs, exprRoot, state);\n        rhs = lhs.getNext();\n      }\n\n      Scope scope = t.getScope();\n      if (!NodeUtil.isName(lhs)) {\n        return; // Not a local variable assignment.\n      }\n      String name = lhs.getString();\n      if (!scope.isDeclared(name, false)) {\n        return;\n      }\n      Var var = scope.getVar(name);\n\n      if (liveness.getEscapedLocals().contains(var)) {\n        return; // Local variable that might be escaped due to closures.\n      }\n\n      // If we have an identity assignment such as a=a, always remove it\n      // regardless of what the liveness results because it\n      // does not change the result afterward.\n      if (rhs != null &&\n          NodeUtil.isName(rhs) &&\n          rhs.getString().equals(var.name) &&\n          NodeUtil.isAssign(n)) {\n        n.removeChild(rhs);\n        n.getParent().replaceChild(n, rhs);\n        compiler.reportCodeChange();\n        return;\n      }\n\n      if (state.getOut().isLive(var)) {\n        return; // Variable not dead.\n      }\n\n      if (state.getIn().isLive(var) &&\n          isVariableStillLiveWithinExpression(n, exprRoot, var.name)) {\n        // The variable is killed here but it is also live before it.\n        // This is possible if we have say:\n        //    if (X = a && a = C) {..} ; .......; a = S;\n        // In this case we are safe to remove \"a = C\" because it is dead.\n        // However if we have:\n        //    if (a = C && X = a) {..} ; .......; a = S;\n        // removing \"a = C\" is NOT correct, although the live set at the node\n        // is exactly the same.\n        // TODO(user): We need more fine grain CFA or we need to keep track\n        // of GEN sets when we recurse here.\n        return;\n      }\n\n      if (NodeUtil.isAssign(n)) {\n        n.removeChild(rhs);\n        n.getParent().replaceChild(n, rhs);\n      } else if (NodeUtil.isAssignmentOp(n)) {\n        n.removeChild(rhs);\n        n.removeChild(lhs);\n        Node op = new Node(NodeUtil.getOpFromAssignmentOp(n), lhs, rhs);\n        parent.replaceChild(n, op);\n      } else if (n.getType() == Token.INC || n.getType() == Token.DEC) {\n        if (NodeUtil.isExpressionNode(parent)) {\n          parent.replaceChild(n,\n              new Node(Token.VOID, Node.newNumber(0).copyInformationFrom(n)));\n        } else if(n.getType() == Token.COMMA && n != parent.getLastChild()) {\n          parent.removeChild(n);\n        } else if (parent.getType() == Token.FOR && !NodeUtil.isForIn(parent) &&\n            NodeUtil.getConditionExpression(parent) != n) {\n          parent.replaceChild(n, new Node(Token.EMPTY));\n        } else {\n          // Cannot replace x = a++ with x = a because that's not valid\n          // when a is not a number.\n          return;\n        }\n      } else {\n        // Not reachable.\n        Preconditions.checkState(false, \"Unknown statement\");\n      }\n\n      compiler.reportCodeChange();\n      return;\n\n    } else {\n      for (Node c = n.getFirstChild(); c != null;) {\n        Node next = c.getNext();\n        if (!ControlFlowGraph.isEnteringNewCfgNode(c)) {\n          tryRemoveAssignment(t, c, exprRoot, state);\n        }\n        c = next;\n      }\n      return;\n    }\n  }", "javadoc_start_line": 159, "annotations_start_line": 169, "method_start_line": 170, "end_line": 273}, {"file_path": "/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java", "method_name": "tryRemoveAssignment", "content": "  /**\n   * Determines if any local variables are dead after the instruction {@code n}\n   * and are assigned within the subtree of {@code n}. Removes those assignments\n   * if there are any.\n   *\n   * @param n Target instruction.\n   * @param exprRoot The CFG node where the liveness information in state is\n   *     still correct.\n   * @param state The liveness information at {@code n}.\n   */\n  private void tryRemoveAssignment(NodeTraversal t, Node n, Node exprRoot,\n      FlowState<LiveVariableLattice> state) {\n\n    Node parent = n.getParent();\n\n    if (NodeUtil.isAssignmentOp(n) ||\n        n.getType() == Token.INC || n.getType() == Token.DEC) {\n\n      Node lhs = n.getFirstChild();\n      Node rhs = lhs.getNext();\n\n      // Recurse first. Example: dead_x = dead_y = 1; We try to clean up dead_y\n      // first.\n      if (rhs != null) {\n        tryRemoveAssignment(t, rhs, exprRoot, state);\n        rhs = lhs.getNext();\n      }\n\n      Scope scope = t.getScope();\n      if (!NodeUtil.isName(lhs)) {\n        return; // Not a local variable assignment.\n      }\n      String name = lhs.getString();\n      if (!scope.isDeclared(name, false)) {\n        return;\n      }\n      Var var = scope.getVar(name);\n\n      if (liveness.getEscapedLocals().contains(var)) {\n        return; // Local variable that might be escaped due to closures.\n      }\n\n      // If we have an identity assignment such as a=a, always remove it\n      // regardless of what the liveness results because it\n      // does not change the result afterward.\n      if (rhs != null &&\n          NodeUtil.isName(rhs) &&\n          rhs.getString().equals(var.name) &&\n          NodeUtil.isAssign(n)) {\n        n.removeChild(rhs);\n        n.getParent().replaceChild(n, rhs);\n        compiler.reportCodeChange();\n        return;\n      }\n\n      if (state.getOut().isLive(var)) {\n        return; // Variable not dead.\n      }\n\n      if (state.getIn().isLive(var) &&\n          isVariableStillLiveWithinExpression(n, exprRoot, var.name)) {\n        // The variable is killed here but it is also live before it.\n        // This is possible if we have say:\n        //    if (X = a && a = C) {..} ; .......; a = S;\n        // In this case we are safe to remove \"a = C\" because it is dead.\n        // However if we have:\n        //    if (a = C && X = a) {..} ; .......; a = S;\n        // removing \"a = C\" is NOT correct, although the live set at the node\n        // is exactly the same.\n        // TODO(user): We need more fine grain CFA or we need to keep track\n        // of GEN sets when we recurse here.\n        return;\n      }\n\n      if (NodeUtil.isAssign(n)) {\n        n.removeChild(rhs);\n        n.getParent().replaceChild(n, rhs);\n      } else if (NodeUtil.isAssignmentOp(n)) {\n        n.removeChild(rhs);\n        n.removeChild(lhs);\n        Node op = new Node(NodeUtil.getOpFromAssignmentOp(n), lhs, rhs);\n        parent.replaceChild(n, op);\n      } else if (n.getType() == Token.INC || n.getType() == Token.DEC) {\n        if (NodeUtil.isExpressionNode(parent)) {\n          parent.replaceChild(n,\n              new Node(Token.VOID, Node.newNumber(0).copyInformationFrom(n)));\n        } else if(n.getType() == Token.COMMA && n != parent.getLastChild()) {\n          parent.removeChild(n);\n        } else if (parent.getType() == Token.FOR && !NodeUtil.isForIn(parent) &&\n            NodeUtil.getConditionExpression(parent) != n) {\n          parent.replaceChild(n, new Node(Token.EMPTY));\n        } else {\n          // Cannot replace x = a++ with x = a because that's not valid\n          // when a is not a number.\n          return;\n        }\n      } else {\n        // Not reachable.\n        Preconditions.checkState(false, \"Unknown statement\");\n      }\n\n      compiler.reportCodeChange();\n      return;\n\n    } else {\n      for (Node c = n.getFirstChild(); c != null;) {\n        Node next = c.getNext();\n        if (!ControlFlowGraph.isEnteringNewCfgNode(c)) {\n          tryRemoveAssignment(t, c, exprRoot, state);\n        }\n        c = next;\n      }\n      return;\n    }\n  }", "javadoc_start_line": 159, "annotations_start_line": 169, "method_start_line": 170, "end_line": 273}, {"file_path": "/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java", "method_name": "tryRemoveAssignment", "content": "  /**\n   * Determines if any local variables are dead after the instruction {@code n}\n   * and are assigned within the subtree of {@code n}. Removes those assignments\n   * if there are any.\n   *\n   * @param n Target instruction.\n   * @param exprRoot The CFG node where the liveness information in state is\n   *     still correct.\n   * @param state The liveness information at {@code n}.\n   */\n  private void tryRemoveAssignment(NodeTraversal t, Node n, Node exprRoot,\n      FlowState<LiveVariableLattice> state) {\n\n    Node parent = n.getParent();\n\n    if (NodeUtil.isAssignmentOp(n) ||\n        n.getType() == Token.INC || n.getType() == Token.DEC) {\n\n      Node lhs = n.getFirstChild();\n      Node rhs = lhs.getNext();\n\n      // Recurse first. Example: dead_x = dead_y = 1; We try to clean up dead_y\n      // first.\n      if (rhs != null) {\n        tryRemoveAssignment(t, rhs, exprRoot, state);\n        rhs = lhs.getNext();\n      }\n\n      Scope scope = t.getScope();\n      if (!NodeUtil.isName(lhs)) {\n        return; // Not a local variable assignment.\n      }\n      String name = lhs.getString();\n      if (!scope.isDeclared(name, false)) {\n        return;\n      }\n      Var var = scope.getVar(name);\n\n      if (liveness.getEscapedLocals().contains(var)) {\n        return; // Local variable that might be escaped due to closures.\n      }\n\n      // If we have an identity assignment such as a=a, always remove it\n      // regardless of what the liveness results because it\n      // does not change the result afterward.\n      if (rhs != null &&\n          NodeUtil.isName(rhs) &&\n          rhs.getString().equals(var.name) &&\n          NodeUtil.isAssign(n)) {\n        n.removeChild(rhs);\n        n.getParent().replaceChild(n, rhs);\n        compiler.reportCodeChange();\n        return;\n      }\n\n      if (state.getOut().isLive(var)) {\n        return; // Variable not dead.\n      }\n\n      if (state.getIn().isLive(var) &&\n          isVariableStillLiveWithinExpression(n, exprRoot, var.name)) {\n        // The variable is killed here but it is also live before it.\n        // This is possible if we have say:\n        //    if (X = a && a = C) {..} ; .......; a = S;\n        // In this case we are safe to remove \"a = C\" because it is dead.\n        // However if we have:\n        //    if (a = C && X = a) {..} ; .......; a = S;\n        // removing \"a = C\" is NOT correct, although the live set at the node\n        // is exactly the same.\n        // TODO(user): We need more fine grain CFA or we need to keep track\n        // of GEN sets when we recurse here.\n        return;\n      }\n\n      if (NodeUtil.isAssign(n)) {\n        n.removeChild(rhs);\n        n.getParent().replaceChild(n, rhs);\n      } else if (NodeUtil.isAssignmentOp(n)) {\n        n.removeChild(rhs);\n        n.removeChild(lhs);\n        Node op = new Node(NodeUtil.getOpFromAssignmentOp(n), lhs, rhs);\n        parent.replaceChild(n, op);\n      } else if (n.getType() == Token.INC || n.getType() == Token.DEC) {\n        if (NodeUtil.isExpressionNode(parent)) {\n          parent.replaceChild(n,\n              new Node(Token.VOID, Node.newNumber(0).copyInformationFrom(n)));\n        } else if(n.getType() == Token.COMMA && n != parent.getLastChild()) {\n          parent.removeChild(n);\n        } else if (parent.getType() == Token.FOR && !NodeUtil.isForIn(parent) &&\n            NodeUtil.getConditionExpression(parent) != n) {\n          parent.replaceChild(n, new Node(Token.EMPTY));\n        } else {\n          // Cannot replace x = a++ with x = a because that's not valid\n          // when a is not a number.\n          return;\n        }\n      } else {\n        // Not reachable.\n        Preconditions.checkState(false, \"Unknown statement\");\n      }\n\n      compiler.reportCodeChange();\n      return;\n\n    } else {\n      for (Node c = n.getFirstChild(); c != null;) {\n        Node next = c.getNext();\n        if (!ControlFlowGraph.isEnteringNewCfgNode(c)) {\n          tryRemoveAssignment(t, c, exprRoot, state);\n        }\n        c = next;\n      }\n      return;\n    }\n  }", "javadoc_start_line": 159, "annotations_start_line": 169, "method_start_line": 170, "end_line": 273}, {"file_path": "/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java", "method_name": "tryRemoveAssignment", "content": "  /**\n   * Determines if any local variables are dead after the instruction {@code n}\n   * and are assigned within the subtree of {@code n}. Removes those assignments\n   * if there are any.\n   *\n   * @param n Target instruction.\n   * @param exprRoot The CFG node where the liveness information in state is\n   *     still correct.\n   * @param state The liveness information at {@code n}.\n   */\n  private void tryRemoveAssignment(NodeTraversal t, Node n, Node exprRoot,\n      FlowState<LiveVariableLattice> state) {\n\n    Node parent = n.getParent();\n\n    if (NodeUtil.isAssignmentOp(n) ||\n        n.getType() == Token.INC || n.getType() == Token.DEC) {\n\n      Node lhs = n.getFirstChild();\n      Node rhs = lhs.getNext();\n\n      // Recurse first. Example: dead_x = dead_y = 1; We try to clean up dead_y\n      // first.\n      if (rhs != null) {\n        tryRemoveAssignment(t, rhs, exprRoot, state);\n        rhs = lhs.getNext();\n      }\n\n      Scope scope = t.getScope();\n      if (!NodeUtil.isName(lhs)) {\n        return; // Not a local variable assignment.\n      }\n      String name = lhs.getString();\n      if (!scope.isDeclared(name, false)) {\n        return;\n      }\n      Var var = scope.getVar(name);\n\n      if (liveness.getEscapedLocals().contains(var)) {\n        return; // Local variable that might be escaped due to closures.\n      }\n\n      // If we have an identity assignment such as a=a, always remove it\n      // regardless of what the liveness results because it\n      // does not change the result afterward.\n      if (rhs != null &&\n          NodeUtil.isName(rhs) &&\n          rhs.getString().equals(var.name) &&\n          NodeUtil.isAssign(n)) {\n        n.removeChild(rhs);\n        n.getParent().replaceChild(n, rhs);\n        compiler.reportCodeChange();\n        return;\n      }\n\n      if (state.getOut().isLive(var)) {\n        return; // Variable not dead.\n      }\n\n      if (state.getIn().isLive(var) &&\n          isVariableStillLiveWithinExpression(n, exprRoot, var.name)) {\n        // The variable is killed here but it is also live before it.\n        // This is possible if we have say:\n        //    if (X = a && a = C) {..} ; .......; a = S;\n        // In this case we are safe to remove \"a = C\" because it is dead.\n        // However if we have:\n        //    if (a = C && X = a) {..} ; .......; a = S;\n        // removing \"a = C\" is NOT correct, although the live set at the node\n        // is exactly the same.\n        // TODO(user): We need more fine grain CFA or we need to keep track\n        // of GEN sets when we recurse here.\n        return;\n      }\n\n      if (NodeUtil.isAssign(n)) {\n        n.removeChild(rhs);\n        n.getParent().replaceChild(n, rhs);\n      } else if (NodeUtil.isAssignmentOp(n)) {\n        n.removeChild(rhs);\n        n.removeChild(lhs);\n        Node op = new Node(NodeUtil.getOpFromAssignmentOp(n), lhs, rhs);\n        parent.replaceChild(n, op);\n      } else if (n.getType() == Token.INC || n.getType() == Token.DEC) {\n        if (NodeUtil.isExpressionNode(parent)) {\n          parent.replaceChild(n,\n              new Node(Token.VOID, Node.newNumber(0).copyInformationFrom(n)));\n        } else if(n.getType() == Token.COMMA && n != parent.getLastChild()) {\n          parent.removeChild(n);\n        } else if (parent.getType() == Token.FOR && !NodeUtil.isForIn(parent) &&\n            NodeUtil.getConditionExpression(parent) != n) {\n          parent.replaceChild(n, new Node(Token.EMPTY));\n        } else {\n          // Cannot replace x = a++ with x = a because that's not valid\n          // when a is not a number.\n          return;\n        }\n      } else {\n        // Not reachable.\n        Preconditions.checkState(false, \"Unknown statement\");\n      }\n\n      compiler.reportCodeChange();\n      return;\n\n    } else {\n      for (Node c = n.getFirstChild(); c != null;) {\n        Node next = c.getNext();\n        if (!ControlFlowGraph.isEnteringNewCfgNode(c)) {\n          tryRemoveAssignment(t, c, exprRoot, state);\n        }\n        c = next;\n      }\n      return;\n    }\n  }", "javadoc_start_line": 159, "annotations_start_line": 169, "method_start_line": 170, "end_line": 273}, {"file_path": "/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java", "method_name": "tryRemoveAssignment", "content": "  /**\n   * Determines if any local variables are dead after the instruction {@code n}\n   * and are assigned within the subtree of {@code n}. Removes those assignments\n   * if there are any.\n   *\n   * @param n Target instruction.\n   * @param exprRoot The CFG node where the liveness information in state is\n   *     still correct.\n   * @param state The liveness information at {@code n}.\n   */\n  private void tryRemoveAssignment(NodeTraversal t, Node n, Node exprRoot,\n      FlowState<LiveVariableLattice> state) {\n\n    Node parent = n.getParent();\n\n    if (NodeUtil.isAssignmentOp(n) ||\n        n.getType() == Token.INC || n.getType() == Token.DEC) {\n\n      Node lhs = n.getFirstChild();\n      Node rhs = lhs.getNext();\n\n      // Recurse first. Example: dead_x = dead_y = 1; We try to clean up dead_y\n      // first.\n      if (rhs != null) {\n        tryRemoveAssignment(t, rhs, exprRoot, state);\n        rhs = lhs.getNext();\n      }\n\n      Scope scope = t.getScope();\n      if (!NodeUtil.isName(lhs)) {\n        return; // Not a local variable assignment.\n      }\n      String name = lhs.getString();\n      if (!scope.isDeclared(name, false)) {\n        return;\n      }\n      Var var = scope.getVar(name);\n\n      if (liveness.getEscapedLocals().contains(var)) {\n        return; // Local variable that might be escaped due to closures.\n      }\n\n      // If we have an identity assignment such as a=a, always remove it\n      // regardless of what the liveness results because it\n      // does not change the result afterward.\n      if (rhs != null &&\n          NodeUtil.isName(rhs) &&\n          rhs.getString().equals(var.name) &&\n          NodeUtil.isAssign(n)) {\n        n.removeChild(rhs);\n        n.getParent().replaceChild(n, rhs);\n        compiler.reportCodeChange();\n        return;\n      }\n\n      if (state.getOut().isLive(var)) {\n        return; // Variable not dead.\n      }\n\n      if (state.getIn().isLive(var) &&\n          isVariableStillLiveWithinExpression(n, exprRoot, var.name)) {\n        // The variable is killed here but it is also live before it.\n        // This is possible if we have say:\n        //    if (X = a && a = C) {..} ; .......; a = S;\n        // In this case we are safe to remove \"a = C\" because it is dead.\n        // However if we have:\n        //    if (a = C && X = a) {..} ; .......; a = S;\n        // removing \"a = C\" is NOT correct, although the live set at the node\n        // is exactly the same.\n        // TODO(user): We need more fine grain CFA or we need to keep track\n        // of GEN sets when we recurse here.\n        return;\n      }\n\n      if (NodeUtil.isAssign(n)) {\n        n.removeChild(rhs);\n        n.getParent().replaceChild(n, rhs);\n      } else if (NodeUtil.isAssignmentOp(n)) {\n        n.removeChild(rhs);\n        n.removeChild(lhs);\n        Node op = new Node(NodeUtil.getOpFromAssignmentOp(n), lhs, rhs);\n        parent.replaceChild(n, op);\n      } else if (n.getType() == Token.INC || n.getType() == Token.DEC) {\n        if (NodeUtil.isExpressionNode(parent)) {\n          parent.replaceChild(n,\n              new Node(Token.VOID, Node.newNumber(0).copyInformationFrom(n)));\n        } else if(n.getType() == Token.COMMA && n != parent.getLastChild()) {\n          parent.removeChild(n);\n        } else if (parent.getType() == Token.FOR && !NodeUtil.isForIn(parent) &&\n            NodeUtil.getConditionExpression(parent) != n) {\n          parent.replaceChild(n, new Node(Token.EMPTY));\n        } else {\n          // Cannot replace x = a++ with x = a because that's not valid\n          // when a is not a number.\n          return;\n        }\n      } else {\n        // Not reachable.\n        Preconditions.checkState(false, \"Unknown statement\");\n      }\n\n      compiler.reportCodeChange();\n      return;\n\n    } else {\n      for (Node c = n.getFirstChild(); c != null;) {\n        Node next = c.getNext();\n        if (!ControlFlowGraph.isEnteringNewCfgNode(c)) {\n          tryRemoveAssignment(t, c, exprRoot, state);\n        }\n        c = next;\n      }\n      return;\n    }\n  }", "javadoc_start_line": 159, "annotations_start_line": 169, "method_start_line": 170, "end_line": 273}, {"file_path": "/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java", "method_name": "isVariableStillLiveWithinExpression", "content": "  /**\n   * Given a variable, node n in the tree and a sub-tree denoted by exprRoot as\n   * the root, this function returns true if there exists a read of that\n   * variable before a write to that variable that is on the right side of n.\n   *\n   * For example, suppose the node is x = 1:\n   *\n   * y = 1, x = 1; // false, there is no reads at all.\n   * y = 1, x = 1, print(x) // true, there is a read right of n.\n   * y = 1, x = 1, x = 2, print(x) // false, there is a read right of n but\n   *                               // it is after a write.\n   *\n   * @param n The current node we should look at.\n   * @param exprRoot The node\n   */\n  private boolean isVariableStillLiveWithinExpression(\n      Node n, Node exprRoot, String variable) {\n    while (n != exprRoot) {\n      VariableLiveness state = VariableLiveness.MAYBE_LIVE;\n      switch (n.getParent().getType()) {\n        case Token.OR:\n        case Token.AND:\n          // If the currently node is the first child of\n          // AND/OR, be conservative only consider the READs\n          // of the second operand.\n\n        case Token.HOOK:\n          // If current node is the condition, check each following\n          // branch, otherwise it is a conditional branch and the\n          // other branch can be ignored.\n\n        default:\n          for(Node sibling = n.getNext(); sibling != null;\n              sibling = sibling.getNext()) {\n            if (!ControlFlowGraph.isEnteringNewCfgNode(sibling)) {\n            state = isVariableReadBeforeKill(sibling, variable);\n\n      // If we see a READ or KILL there is no need to continue.\n      if (state == VariableLiveness.READ) {\n        return true;\n      } else if (state == VariableLiveness.KILL) {\n        return false;\n            }\n          }\n      }\n      }\n      n = n.getParent();\n    }\n    return false;\n  }", "javadoc_start_line": 275, "annotations_start_line": 290, "method_start_line": 291, "end_line": 324}]}, {"failing_test": {"className": " com.google.javascript.jscomp.DeadAssignmentsEliminationTest", "methodName": "testIssue384c", "error": "junit.framework.AssertionFailedError", "message": ""}, "patched_method": {"file_path": "/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java", "method_name": "isVariableReadBeforeKill", "content": "  /**\n   * Give an expression and a variable. It returns READ, if the first\n   * reference of that variable is a read. It returns KILL, if the first\n   * reference of that variable is an assignment. It returns MAY_LIVE otherwise.\n   */\n  private VariableLiveness isVariableReadBeforeKill(\n      Node n, String variable) {\n\n    if (NodeUtil.isName(n) && variable.equals(n.getString())) {\n      if (NodeUtil.isLhs(n, n.getParent())) {\n        Preconditions.checkState(n.getParent().getType() == Token.ASSIGN);\n        // The expression to which the assignment is made is evaluated before\n        // the RHS is evaluated (normal left to right evaluation) but the KILL\n        // occurs after the RHS is evaluated.\n        Node rhs = n.getNext();\n        VariableLiveness state = isVariableReadBeforeKill(rhs, variable);\n        if (state == VariableLiveness.READ) {\n          return state;\n        }\n        return VariableLiveness.KILL;\n      } else {\n        return VariableLiveness.READ;\n      }\n    }\n\n    switch (n.getType()) {\n      // Conditionals\n      case Token.OR:\n      case Token.AND:\n        // With a AND/OR the first branch always runs, but the second is\n        // may not.\n      case Token.HOOK:\n        return checkHookBranchReadBeforeKill(\n            n.getFirstChild().getNext(), n.getLastChild(), variable);\n\n      default:\n        // Expressions are evaluated left-right, depth first.\n        for (Node child = n.getFirstChild();\n            child != null; child = child.getNext()) {\n          if (!ControlFlowGraph.isEnteringNewCfgNode(child)) { // Not a FUNCTION\n          VariableLiveness state = isVariableReadBeforeKill(child, variable);\n          if (state != VariableLiveness.MAYBE_LIVE) {\n            return state;\n          }\n        }\n      }\n    }\n\n    return VariableLiveness.MAYBE_LIVE;\n  }", "javadoc_start_line": 333, "annotations_start_line": 338, "method_start_line": 339, "end_line": 382}, "steps": [{"file_path": "/src/com/google/javascript/jscomp/NodeTraversal.java", "method_name": "traverse", "content": "  /**\n   * Traverses a node recursively.\n   */\n  public static void traverse(\n      AbstractCompiler compiler, Node root, Callback cb) {\n    NodeTraversal t = new NodeTraversal(compiler, cb);\n    t.traverse(root);\n  }", "javadoc_start_line": 416, "annotations_start_line": 419, "method_start_line": 420, "end_line": 423}, {"file_path": "/src/com/google/javascript/jscomp/NodeTraversal.java", "method_name": "traverse", "content": "  /**\n   * Traverses a parse tree recursively.\n   */\n  public void traverse(Node root) {\n    try {\n      sourceName = \"\";\n      curNode = root;\n      pushScope(root);\n      traverseBranch(root, null);\n      popScope();\n    } catch (Exception unexpectedException) {\n      throwUnexpectedException(unexpectedException);\n    }\n  }", "javadoc_start_line": 241, "annotations_start_line": 244, "method_start_line": 244, "end_line": 254}, {"file_path": "/src/com/google/javascript/jscomp/NodeTraversal.java", "method_name": "traverseBranch", "content": "  /**\n   * Traverses a branch.\n   */\n  @SuppressWarnings(\"fallthrough\")\n  private void traverseBranch(Node n, Node parent) {\n    int type = n.getType();\n    if (type == Token.SCRIPT) {\n      sourceName = getSourceName(n);\n    }\n\n    curNode = n;\n    if (!callback.shouldTraverse(this, n, parent)) return;\n\n    switch (type) {\n      case Token.FUNCTION:\n        traverseFunction(n, parent);\n        break;\n\n      default:\n        for (Node child = n.getFirstChild(); child != null; ) {\n          // child could be replaced, in which case our child node\n          // would no longer point to the true next\n          Node next = child.getNext();\n          traverseBranch(child, n);\n          child = next;\n        }\n        break;\n    }\n\n    curNode = n;\n    callback.visit(this, n, parent);\n  }", "javadoc_start_line": 434, "annotations_start_line": 437, "method_start_line": 438, "end_line": 465}, {"file_path": "/src/com/google/javascript/jscomp/NodeTraversal.java", "method_name": "traverseBranch", "content": "  /**\n   * Traverses a branch.\n   */\n  @SuppressWarnings(\"fallthrough\")\n  private void traverseBranch(Node n, Node parent) {\n    int type = n.getType();\n    if (type == Token.SCRIPT) {\n      sourceName = getSourceName(n);\n    }\n\n    curNode = n;\n    if (!callback.shouldTraverse(this, n, parent)) return;\n\n    switch (type) {\n      case Token.FUNCTION:\n        traverseFunction(n, parent);\n        break;\n\n      default:\n        for (Node child = n.getFirstChild(); child != null; ) {\n          // child could be replaced, in which case our child node\n          // would no longer point to the true next\n          Node next = child.getNext();\n          traverseBranch(child, n);\n          child = next;\n        }\n        break;\n    }\n\n    curNode = n;\n    callback.visit(this, n, parent);\n  }", "javadoc_start_line": 434, "annotations_start_line": 437, "method_start_line": 438, "end_line": 465}, {"file_path": "/src/com/google/javascript/jscomp/NodeTraversal.java", "method_name": "traverseBranch", "content": "  /**\n   * Traverses a branch.\n   */\n  @SuppressWarnings(\"fallthrough\")\n  private void traverseBranch(Node n, Node parent) {\n    int type = n.getType();\n    if (type == Token.SCRIPT) {\n      sourceName = getSourceName(n);\n    }\n\n    curNode = n;\n    if (!callback.shouldTraverse(this, n, parent)) return;\n\n    switch (type) {\n      case Token.FUNCTION:\n        traverseFunction(n, parent);\n        break;\n\n      default:\n        for (Node child = n.getFirstChild(); child != null; ) {\n          // child could be replaced, in which case our child node\n          // would no longer point to the true next\n          Node next = child.getNext();\n          traverseBranch(child, n);\n          child = next;\n        }\n        break;\n    }\n\n    curNode = n;\n    callback.visit(this, n, parent);\n  }", "javadoc_start_line": 434, "annotations_start_line": 437, "method_start_line": 438, "end_line": 465}, {"file_path": "/src/com/google/javascript/jscomp/NodeTraversal.java", "method_name": "traverseFunction", "content": "  /**\n   * Traverses a function.\n   */\n  private void traverseFunction(Node n, Node parent) {\n    Preconditions.checkState(n.getChildCount() == 3);\n    Preconditions.checkState(n.getType() == Token.FUNCTION);\n\n    final Node fnName = n.getFirstChild();\n\n    boolean isFunctionExpression = (parent != null)\n        && NodeUtil.isFunctionExpression(n);\n\n    if (!isFunctionExpression) {\n      // Functions declarations are in the scope containing the declaration.\n      traverseBranch(fnName, n);\n    }\n\n    curNode = n;\n    pushScope(n);\n\n    if (isFunctionExpression) {\n      // Function expression names are only accessible within the function\n      // scope.\n      traverseBranch(fnName, n);\n    }\n\n    final Node args = fnName.getNext();\n    final Node body = args.getNext();\n\n    // Args\n    traverseBranch(args, n);\n\n    // Body\n    Preconditions.checkState(body.getNext() == null &&\n            body.getType() == Token.BLOCK);\n    traverseBranch(body, n);\n\n    popScope();\n  }", "javadoc_start_line": 467, "annotations_start_line": 470, "method_start_line": 470, "end_line": 505}, {"file_path": "/src/com/google/javascript/jscomp/NodeTraversal.java", "method_name": "pushScope", "content": "  /** Creates a new scope (e.g. when entering a function). */\n  private void pushScope(Node node) {\n    Preconditions.checkState(curNode != null);\n    scopeRoots.push(node);\n    cfgs.push(null);\n    if (scopeCallback != null) {\n      scopeCallback.enterScope(this);\n    }\n  }", "javadoc_start_line": 521, "annotations_start_line": 522, "method_start_line": 522, "end_line": 529}, {"file_path": "/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java", "method_name": "enterScope", "content": "  public void enterScope(NodeTraversal t) {\n    Scope scope = t.getScope();\n    // Global scope _SHOULD_ work, however, liveness won't finish without\n    // -Xmx1024 in closure. We might have to look at coding conventions for\n    // exported variables as well.\n    if (scope.isGlobal()) {\n      return;\n    }\n\n    // We are not going to do any dead assignment elimination in when there is\n    // at least one inner function because in most browsers, when there is a\n    // closure, ALL the variables are saved (escaped).\n    Node fnBlock = t.getScopeRoot().getLastChild();\n    if (NodeUtil.containsFunction(fnBlock)) {\n      return;\n    }\n\n    // We don't do any dead assignment elimination if there are no assigns\n    // to eliminate. :)\n    if (!NodeUtil.has(fnBlock, matchRemovableAssigns,\n            Predicates.<Node>alwaysTrue())) {\n      return;\n    }\n\n    // Computes liveness information first.\n    ControlFlowGraph<Node> cfg = t.getControlFlowGraph();\n    liveness = new LiveVariablesAnalysis(cfg, scope, compiler);\n    liveness.analyze();\n    tryRemoveDeadAssignments(t, cfg);\n  }", "javadoc_start_line": 70, "annotations_start_line": 69, "method_start_line": 70, "end_line": 99}, {"file_path": "/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java", "method_name": "tryRemoveDeadAssignments", "content": "  /**\n   * Try to remove useless assignments from a control flow graph that has been\n   * annotated with liveness information.\n   *\n   * @param t The node traversal.\n   * @param cfg The control flow graph of the program annotated with liveness\n   *        information.\n   */\n  private void tryRemoveDeadAssignments(NodeTraversal t,\n      ControlFlowGraph<Node> cfg) {\n    Iterable<DiGraphNode<Node, Branch>> nodes = cfg.getDirectedGraphNodes();\n\n    for (DiGraphNode<Node, Branch> cfgNode : nodes) {\n      FlowState<LiveVariableLattice> state =\n          cfgNode.getAnnotation();\n      Node n = cfgNode.getValue();\n      if (n == null) {\n        continue;\n      }\n      switch (n.getType()) {\n        case Token.IF:\n        case Token.WHILE:\n        case Token.DO:\n          tryRemoveAssignment(t, NodeUtil.getConditionExpression(n), state);\n          continue;\n        case Token.FOR:\n          if (!NodeUtil.isForIn(n)) {\n            tryRemoveAssignment(\n                t, NodeUtil.getConditionExpression(n), state);\n          }\n          continue;\n        case Token.SWITCH:\n        case Token.CASE:\n        case Token.RETURN:\n          if (n.hasChildren()) {\n            tryRemoveAssignment(t, n.getFirstChild(), state);\n          }\n          continue;\n        // TODO(user): case Token.VAR: Remove var a=1;a=2;.....\n      }\n\n      tryRemoveAssignment(t, n, state);\n    }\n  }", "javadoc_start_line": 109, "annotations_start_line": 117, "method_start_line": 118, "end_line": 152}, {"file_path": "/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java", "method_name": "tryRemoveAssignment", "content": "  private void tryRemoveAssignment(NodeTraversal t, Node n,\n      FlowState<LiveVariableLattice> state) {\n    tryRemoveAssignment(t, n, n, state);\n  }", "javadoc_start_line": 154, "annotations_start_line": 154, "method_start_line": 155, "end_line": 157}, {"file_path": "/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java", "method_name": "tryRemoveAssignment", "content": "  /**\n   * Determines if any local variables are dead after the instruction {@code n}\n   * and are assigned within the subtree of {@code n}. Removes those assignments\n   * if there are any.\n   *\n   * @param n Target instruction.\n   * @param exprRoot The CFG node where the liveness information in state is\n   *     still correct.\n   * @param state The liveness information at {@code n}.\n   */\n  private void tryRemoveAssignment(NodeTraversal t, Node n, Node exprRoot,\n      FlowState<LiveVariableLattice> state) {\n\n    Node parent = n.getParent();\n\n    if (NodeUtil.isAssignmentOp(n) ||\n        n.getType() == Token.INC || n.getType() == Token.DEC) {\n\n      Node lhs = n.getFirstChild();\n      Node rhs = lhs.getNext();\n\n      // Recurse first. Example: dead_x = dead_y = 1; We try to clean up dead_y\n      // first.\n      if (rhs != null) {\n        tryRemoveAssignment(t, rhs, exprRoot, state);\n        rhs = lhs.getNext();\n      }\n\n      Scope scope = t.getScope();\n      if (!NodeUtil.isName(lhs)) {\n        return; // Not a local variable assignment.\n      }\n      String name = lhs.getString();\n      if (!scope.isDeclared(name, false)) {\n        return;\n      }\n      Var var = scope.getVar(name);\n\n      if (liveness.getEscapedLocals().contains(var)) {\n        return; // Local variable that might be escaped due to closures.\n      }\n\n      // If we have an identity assignment such as a=a, always remove it\n      // regardless of what the liveness results because it\n      // does not change the result afterward.\n      if (rhs != null &&\n          NodeUtil.isName(rhs) &&\n          rhs.getString().equals(var.name) &&\n          NodeUtil.isAssign(n)) {\n        n.removeChild(rhs);\n        n.getParent().replaceChild(n, rhs);\n        compiler.reportCodeChange();\n        return;\n      }\n\n      if (state.getOut().isLive(var)) {\n        return; // Variable not dead.\n      }\n\n      if (state.getIn().isLive(var) &&\n          isVariableStillLiveWithinExpression(n, exprRoot, var.name)) {\n        // The variable is killed here but it is also live before it.\n        // This is possible if we have say:\n        //    if (X = a && a = C) {..} ; .......; a = S;\n        // In this case we are safe to remove \"a = C\" because it is dead.\n        // However if we have:\n        //    if (a = C && X = a) {..} ; .......; a = S;\n        // removing \"a = C\" is NOT correct, although the live set at the node\n        // is exactly the same.\n        // TODO(user): We need more fine grain CFA or we need to keep track\n        // of GEN sets when we recurse here.\n        return;\n      }\n\n      if (NodeUtil.isAssign(n)) {\n        n.removeChild(rhs);\n        n.getParent().replaceChild(n, rhs);\n      } else if (NodeUtil.isAssignmentOp(n)) {\n        n.removeChild(rhs);\n        n.removeChild(lhs);\n        Node op = new Node(NodeUtil.getOpFromAssignmentOp(n), lhs, rhs);\n        parent.replaceChild(n, op);\n      } else if (n.getType() == Token.INC || n.getType() == Token.DEC) {\n        if (NodeUtil.isExpressionNode(parent)) {\n          parent.replaceChild(n,\n              new Node(Token.VOID, Node.newNumber(0).copyInformationFrom(n)));\n        } else if(n.getType() == Token.COMMA && n != parent.getLastChild()) {\n          parent.removeChild(n);\n        } else if (parent.getType() == Token.FOR && !NodeUtil.isForIn(parent) &&\n            NodeUtil.getConditionExpression(parent) != n) {\n          parent.replaceChild(n, new Node(Token.EMPTY));\n        } else {\n          // Cannot replace x = a++ with x = a because that's not valid\n          // when a is not a number.\n          return;\n        }\n      } else {\n        // Not reachable.\n        Preconditions.checkState(false, \"Unknown statement\");\n      }\n\n      compiler.reportCodeChange();\n      return;\n\n    } else {\n      for (Node c = n.getFirstChild(); c != null;) {\n        Node next = c.getNext();\n        if (!ControlFlowGraph.isEnteringNewCfgNode(c)) {\n          tryRemoveAssignment(t, c, exprRoot, state);\n        }\n        c = next;\n      }\n      return;\n    }\n  }", "javadoc_start_line": 159, "annotations_start_line": 169, "method_start_line": 170, "end_line": 273}, {"file_path": "/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java", "method_name": "tryRemoveAssignment", "content": "  /**\n   * Determines if any local variables are dead after the instruction {@code n}\n   * and are assigned within the subtree of {@code n}. Removes those assignments\n   * if there are any.\n   *\n   * @param n Target instruction.\n   * @param exprRoot The CFG node where the liveness information in state is\n   *     still correct.\n   * @param state The liveness information at {@code n}.\n   */\n  private void tryRemoveAssignment(NodeTraversal t, Node n, Node exprRoot,\n      FlowState<LiveVariableLattice> state) {\n\n    Node parent = n.getParent();\n\n    if (NodeUtil.isAssignmentOp(n) ||\n        n.getType() == Token.INC || n.getType() == Token.DEC) {\n\n      Node lhs = n.getFirstChild();\n      Node rhs = lhs.getNext();\n\n      // Recurse first. Example: dead_x = dead_y = 1; We try to clean up dead_y\n      // first.\n      if (rhs != null) {\n        tryRemoveAssignment(t, rhs, exprRoot, state);\n        rhs = lhs.getNext();\n      }\n\n      Scope scope = t.getScope();\n      if (!NodeUtil.isName(lhs)) {\n        return; // Not a local variable assignment.\n      }\n      String name = lhs.getString();\n      if (!scope.isDeclared(name, false)) {\n        return;\n      }\n      Var var = scope.getVar(name);\n\n      if (liveness.getEscapedLocals().contains(var)) {\n        return; // Local variable that might be escaped due to closures.\n      }\n\n      // If we have an identity assignment such as a=a, always remove it\n      // regardless of what the liveness results because it\n      // does not change the result afterward.\n      if (rhs != null &&\n          NodeUtil.isName(rhs) &&\n          rhs.getString().equals(var.name) &&\n          NodeUtil.isAssign(n)) {\n        n.removeChild(rhs);\n        n.getParent().replaceChild(n, rhs);\n        compiler.reportCodeChange();\n        return;\n      }\n\n      if (state.getOut().isLive(var)) {\n        return; // Variable not dead.\n      }\n\n      if (state.getIn().isLive(var) &&\n          isVariableStillLiveWithinExpression(n, exprRoot, var.name)) {\n        // The variable is killed here but it is also live before it.\n        // This is possible if we have say:\n        //    if (X = a && a = C) {..} ; .......; a = S;\n        // In this case we are safe to remove \"a = C\" because it is dead.\n        // However if we have:\n        //    if (a = C && X = a) {..} ; .......; a = S;\n        // removing \"a = C\" is NOT correct, although the live set at the node\n        // is exactly the same.\n        // TODO(user): We need more fine grain CFA or we need to keep track\n        // of GEN sets when we recurse here.\n        return;\n      }\n\n      if (NodeUtil.isAssign(n)) {\n        n.removeChild(rhs);\n        n.getParent().replaceChild(n, rhs);\n      } else if (NodeUtil.isAssignmentOp(n)) {\n        n.removeChild(rhs);\n        n.removeChild(lhs);\n        Node op = new Node(NodeUtil.getOpFromAssignmentOp(n), lhs, rhs);\n        parent.replaceChild(n, op);\n      } else if (n.getType() == Token.INC || n.getType() == Token.DEC) {\n        if (NodeUtil.isExpressionNode(parent)) {\n          parent.replaceChild(n,\n              new Node(Token.VOID, Node.newNumber(0).copyInformationFrom(n)));\n        } else if(n.getType() == Token.COMMA && n != parent.getLastChild()) {\n          parent.removeChild(n);\n        } else if (parent.getType() == Token.FOR && !NodeUtil.isForIn(parent) &&\n            NodeUtil.getConditionExpression(parent) != n) {\n          parent.replaceChild(n, new Node(Token.EMPTY));\n        } else {\n          // Cannot replace x = a++ with x = a because that's not valid\n          // when a is not a number.\n          return;\n        }\n      } else {\n        // Not reachable.\n        Preconditions.checkState(false, \"Unknown statement\");\n      }\n\n      compiler.reportCodeChange();\n      return;\n\n    } else {\n      for (Node c = n.getFirstChild(); c != null;) {\n        Node next = c.getNext();\n        if (!ControlFlowGraph.isEnteringNewCfgNode(c)) {\n          tryRemoveAssignment(t, c, exprRoot, state);\n        }\n        c = next;\n      }\n      return;\n    }\n  }", "javadoc_start_line": 159, "annotations_start_line": 169, "method_start_line": 170, "end_line": 273}, {"file_path": "/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java", "method_name": "tryRemoveAssignment", "content": "  /**\n   * Determines if any local variables are dead after the instruction {@code n}\n   * and are assigned within the subtree of {@code n}. Removes those assignments\n   * if there are any.\n   *\n   * @param n Target instruction.\n   * @param exprRoot The CFG node where the liveness information in state is\n   *     still correct.\n   * @param state The liveness information at {@code n}.\n   */\n  private void tryRemoveAssignment(NodeTraversal t, Node n, Node exprRoot,\n      FlowState<LiveVariableLattice> state) {\n\n    Node parent = n.getParent();\n\n    if (NodeUtil.isAssignmentOp(n) ||\n        n.getType() == Token.INC || n.getType() == Token.DEC) {\n\n      Node lhs = n.getFirstChild();\n      Node rhs = lhs.getNext();\n\n      // Recurse first. Example: dead_x = dead_y = 1; We try to clean up dead_y\n      // first.\n      if (rhs != null) {\n        tryRemoveAssignment(t, rhs, exprRoot, state);\n        rhs = lhs.getNext();\n      }\n\n      Scope scope = t.getScope();\n      if (!NodeUtil.isName(lhs)) {\n        return; // Not a local variable assignment.\n      }\n      String name = lhs.getString();\n      if (!scope.isDeclared(name, false)) {\n        return;\n      }\n      Var var = scope.getVar(name);\n\n      if (liveness.getEscapedLocals().contains(var)) {\n        return; // Local variable that might be escaped due to closures.\n      }\n\n      // If we have an identity assignment such as a=a, always remove it\n      // regardless of what the liveness results because it\n      // does not change the result afterward.\n      if (rhs != null &&\n          NodeUtil.isName(rhs) &&\n          rhs.getString().equals(var.name) &&\n          NodeUtil.isAssign(n)) {\n        n.removeChild(rhs);\n        n.getParent().replaceChild(n, rhs);\n        compiler.reportCodeChange();\n        return;\n      }\n\n      if (state.getOut().isLive(var)) {\n        return; // Variable not dead.\n      }\n\n      if (state.getIn().isLive(var) &&\n          isVariableStillLiveWithinExpression(n, exprRoot, var.name)) {\n        // The variable is killed here but it is also live before it.\n        // This is possible if we have say:\n        //    if (X = a && a = C) {..} ; .......; a = S;\n        // In this case we are safe to remove \"a = C\" because it is dead.\n        // However if we have:\n        //    if (a = C && X = a) {..} ; .......; a = S;\n        // removing \"a = C\" is NOT correct, although the live set at the node\n        // is exactly the same.\n        // TODO(user): We need more fine grain CFA or we need to keep track\n        // of GEN sets when we recurse here.\n        return;\n      }\n\n      if (NodeUtil.isAssign(n)) {\n        n.removeChild(rhs);\n        n.getParent().replaceChild(n, rhs);\n      } else if (NodeUtil.isAssignmentOp(n)) {\n        n.removeChild(rhs);\n        n.removeChild(lhs);\n        Node op = new Node(NodeUtil.getOpFromAssignmentOp(n), lhs, rhs);\n        parent.replaceChild(n, op);\n      } else if (n.getType() == Token.INC || n.getType() == Token.DEC) {\n        if (NodeUtil.isExpressionNode(parent)) {\n          parent.replaceChild(n,\n              new Node(Token.VOID, Node.newNumber(0).copyInformationFrom(n)));\n        } else if(n.getType() == Token.COMMA && n != parent.getLastChild()) {\n          parent.removeChild(n);\n        } else if (parent.getType() == Token.FOR && !NodeUtil.isForIn(parent) &&\n            NodeUtil.getConditionExpression(parent) != n) {\n          parent.replaceChild(n, new Node(Token.EMPTY));\n        } else {\n          // Cannot replace x = a++ with x = a because that's not valid\n          // when a is not a number.\n          return;\n        }\n      } else {\n        // Not reachable.\n        Preconditions.checkState(false, \"Unknown statement\");\n      }\n\n      compiler.reportCodeChange();\n      return;\n\n    } else {\n      for (Node c = n.getFirstChild(); c != null;) {\n        Node next = c.getNext();\n        if (!ControlFlowGraph.isEnteringNewCfgNode(c)) {\n          tryRemoveAssignment(t, c, exprRoot, state);\n        }\n        c = next;\n      }\n      return;\n    }\n  }", "javadoc_start_line": 159, "annotations_start_line": 169, "method_start_line": 170, "end_line": 273}, {"file_path": "/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java", "method_name": "tryRemoveAssignment", "content": "  /**\n   * Determines if any local variables are dead after the instruction {@code n}\n   * and are assigned within the subtree of {@code n}. Removes those assignments\n   * if there are any.\n   *\n   * @param n Target instruction.\n   * @param exprRoot The CFG node where the liveness information in state is\n   *     still correct.\n   * @param state The liveness information at {@code n}.\n   */\n  private void tryRemoveAssignment(NodeTraversal t, Node n, Node exprRoot,\n      FlowState<LiveVariableLattice> state) {\n\n    Node parent = n.getParent();\n\n    if (NodeUtil.isAssignmentOp(n) ||\n        n.getType() == Token.INC || n.getType() == Token.DEC) {\n\n      Node lhs = n.getFirstChild();\n      Node rhs = lhs.getNext();\n\n      // Recurse first. Example: dead_x = dead_y = 1; We try to clean up dead_y\n      // first.\n      if (rhs != null) {\n        tryRemoveAssignment(t, rhs, exprRoot, state);\n        rhs = lhs.getNext();\n      }\n\n      Scope scope = t.getScope();\n      if (!NodeUtil.isName(lhs)) {\n        return; // Not a local variable assignment.\n      }\n      String name = lhs.getString();\n      if (!scope.isDeclared(name, false)) {\n        return;\n      }\n      Var var = scope.getVar(name);\n\n      if (liveness.getEscapedLocals().contains(var)) {\n        return; // Local variable that might be escaped due to closures.\n      }\n\n      // If we have an identity assignment such as a=a, always remove it\n      // regardless of what the liveness results because it\n      // does not change the result afterward.\n      if (rhs != null &&\n          NodeUtil.isName(rhs) &&\n          rhs.getString().equals(var.name) &&\n          NodeUtil.isAssign(n)) {\n        n.removeChild(rhs);\n        n.getParent().replaceChild(n, rhs);\n        compiler.reportCodeChange();\n        return;\n      }\n\n      if (state.getOut().isLive(var)) {\n        return; // Variable not dead.\n      }\n\n      if (state.getIn().isLive(var) &&\n          isVariableStillLiveWithinExpression(n, exprRoot, var.name)) {\n        // The variable is killed here but it is also live before it.\n        // This is possible if we have say:\n        //    if (X = a && a = C) {..} ; .......; a = S;\n        // In this case we are safe to remove \"a = C\" because it is dead.\n        // However if we have:\n        //    if (a = C && X = a) {..} ; .......; a = S;\n        // removing \"a = C\" is NOT correct, although the live set at the node\n        // is exactly the same.\n        // TODO(user): We need more fine grain CFA or we need to keep track\n        // of GEN sets when we recurse here.\n        return;\n      }\n\n      if (NodeUtil.isAssign(n)) {\n        n.removeChild(rhs);\n        n.getParent().replaceChild(n, rhs);\n      } else if (NodeUtil.isAssignmentOp(n)) {\n        n.removeChild(rhs);\n        n.removeChild(lhs);\n        Node op = new Node(NodeUtil.getOpFromAssignmentOp(n), lhs, rhs);\n        parent.replaceChild(n, op);\n      } else if (n.getType() == Token.INC || n.getType() == Token.DEC) {\n        if (NodeUtil.isExpressionNode(parent)) {\n          parent.replaceChild(n,\n              new Node(Token.VOID, Node.newNumber(0).copyInformationFrom(n)));\n        } else if(n.getType() == Token.COMMA && n != parent.getLastChild()) {\n          parent.removeChild(n);\n        } else if (parent.getType() == Token.FOR && !NodeUtil.isForIn(parent) &&\n            NodeUtil.getConditionExpression(parent) != n) {\n          parent.replaceChild(n, new Node(Token.EMPTY));\n        } else {\n          // Cannot replace x = a++ with x = a because that's not valid\n          // when a is not a number.\n          return;\n        }\n      } else {\n        // Not reachable.\n        Preconditions.checkState(false, \"Unknown statement\");\n      }\n\n      compiler.reportCodeChange();\n      return;\n\n    } else {\n      for (Node c = n.getFirstChild(); c != null;) {\n        Node next = c.getNext();\n        if (!ControlFlowGraph.isEnteringNewCfgNode(c)) {\n          tryRemoveAssignment(t, c, exprRoot, state);\n        }\n        c = next;\n      }\n      return;\n    }\n  }", "javadoc_start_line": 159, "annotations_start_line": 169, "method_start_line": 170, "end_line": 273}, {"file_path": "/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java", "method_name": "tryRemoveAssignment", "content": "  /**\n   * Determines if any local variables are dead after the instruction {@code n}\n   * and are assigned within the subtree of {@code n}. Removes those assignments\n   * if there are any.\n   *\n   * @param n Target instruction.\n   * @param exprRoot The CFG node where the liveness information in state is\n   *     still correct.\n   * @param state The liveness information at {@code n}.\n   */\n  private void tryRemoveAssignment(NodeTraversal t, Node n, Node exprRoot,\n      FlowState<LiveVariableLattice> state) {\n\n    Node parent = n.getParent();\n\n    if (NodeUtil.isAssignmentOp(n) ||\n        n.getType() == Token.INC || n.getType() == Token.DEC) {\n\n      Node lhs = n.getFirstChild();\n      Node rhs = lhs.getNext();\n\n      // Recurse first. Example: dead_x = dead_y = 1; We try to clean up dead_y\n      // first.\n      if (rhs != null) {\n        tryRemoveAssignment(t, rhs, exprRoot, state);\n        rhs = lhs.getNext();\n      }\n\n      Scope scope = t.getScope();\n      if (!NodeUtil.isName(lhs)) {\n        return; // Not a local variable assignment.\n      }\n      String name = lhs.getString();\n      if (!scope.isDeclared(name, false)) {\n        return;\n      }\n      Var var = scope.getVar(name);\n\n      if (liveness.getEscapedLocals().contains(var)) {\n        return; // Local variable that might be escaped due to closures.\n      }\n\n      // If we have an identity assignment such as a=a, always remove it\n      // regardless of what the liveness results because it\n      // does not change the result afterward.\n      if (rhs != null &&\n          NodeUtil.isName(rhs) &&\n          rhs.getString().equals(var.name) &&\n          NodeUtil.isAssign(n)) {\n        n.removeChild(rhs);\n        n.getParent().replaceChild(n, rhs);\n        compiler.reportCodeChange();\n        return;\n      }\n\n      if (state.getOut().isLive(var)) {\n        return; // Variable not dead.\n      }\n\n      if (state.getIn().isLive(var) &&\n          isVariableStillLiveWithinExpression(n, exprRoot, var.name)) {\n        // The variable is killed here but it is also live before it.\n        // This is possible if we have say:\n        //    if (X = a && a = C) {..} ; .......; a = S;\n        // In this case we are safe to remove \"a = C\" because it is dead.\n        // However if we have:\n        //    if (a = C && X = a) {..} ; .......; a = S;\n        // removing \"a = C\" is NOT correct, although the live set at the node\n        // is exactly the same.\n        // TODO(user): We need more fine grain CFA or we need to keep track\n        // of GEN sets when we recurse here.\n        return;\n      }\n\n      if (NodeUtil.isAssign(n)) {\n        n.removeChild(rhs);\n        n.getParent().replaceChild(n, rhs);\n      } else if (NodeUtil.isAssignmentOp(n)) {\n        n.removeChild(rhs);\n        n.removeChild(lhs);\n        Node op = new Node(NodeUtil.getOpFromAssignmentOp(n), lhs, rhs);\n        parent.replaceChild(n, op);\n      } else if (n.getType() == Token.INC || n.getType() == Token.DEC) {\n        if (NodeUtil.isExpressionNode(parent)) {\n          parent.replaceChild(n,\n              new Node(Token.VOID, Node.newNumber(0).copyInformationFrom(n)));\n        } else if(n.getType() == Token.COMMA && n != parent.getLastChild()) {\n          parent.removeChild(n);\n        } else if (parent.getType() == Token.FOR && !NodeUtil.isForIn(parent) &&\n            NodeUtil.getConditionExpression(parent) != n) {\n          parent.replaceChild(n, new Node(Token.EMPTY));\n        } else {\n          // Cannot replace x = a++ with x = a because that's not valid\n          // when a is not a number.\n          return;\n        }\n      } else {\n        // Not reachable.\n        Preconditions.checkState(false, \"Unknown statement\");\n      }\n\n      compiler.reportCodeChange();\n      return;\n\n    } else {\n      for (Node c = n.getFirstChild(); c != null;) {\n        Node next = c.getNext();\n        if (!ControlFlowGraph.isEnteringNewCfgNode(c)) {\n          tryRemoveAssignment(t, c, exprRoot, state);\n        }\n        c = next;\n      }\n      return;\n    }\n  }", "javadoc_start_line": 159, "annotations_start_line": 169, "method_start_line": 170, "end_line": 273}, {"file_path": "/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java", "method_name": "isVariableStillLiveWithinExpression", "content": "  /**\n   * Given a variable, node n in the tree and a sub-tree denoted by exprRoot as\n   * the root, this function returns true if there exists a read of that\n   * variable before a write to that variable that is on the right side of n.\n   *\n   * For example, suppose the node is x = 1:\n   *\n   * y = 1, x = 1; // false, there is no reads at all.\n   * y = 1, x = 1, print(x) // true, there is a read right of n.\n   * y = 1, x = 1, x = 2, print(x) // false, there is a read right of n but\n   *                               // it is after a write.\n   *\n   * @param n The current node we should look at.\n   * @param exprRoot The node\n   */\n  private boolean isVariableStillLiveWithinExpression(\n      Node n, Node exprRoot, String variable) {\n    while (n != exprRoot) {\n      VariableLiveness state = VariableLiveness.MAYBE_LIVE;\n      switch (n.getParent().getType()) {\n        case Token.OR:\n        case Token.AND:\n          // If the currently node is the first child of\n          // AND/OR, be conservative only consider the READs\n          // of the second operand.\n\n        case Token.HOOK:\n          // If current node is the condition, check each following\n          // branch, otherwise it is a conditional branch and the\n          // other branch can be ignored.\n\n        default:\n          for(Node sibling = n.getNext(); sibling != null;\n              sibling = sibling.getNext()) {\n            if (!ControlFlowGraph.isEnteringNewCfgNode(sibling)) {\n            state = isVariableReadBeforeKill(sibling, variable);\n\n      // If we see a READ or KILL there is no need to continue.\n      if (state == VariableLiveness.READ) {\n        return true;\n      } else if (state == VariableLiveness.KILL) {\n        return false;\n            }\n          }\n      }\n      }\n      n = n.getParent();\n    }\n    return false;\n  }", "javadoc_start_line": 275, "annotations_start_line": 290, "method_start_line": 291, "end_line": 324}, {"file_path": "/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java", "method_name": "isVariableReadBeforeKill", "content": "  /**\n   * Give an expression and a variable. It returns READ, if the first\n   * reference of that variable is a read. It returns KILL, if the first\n   * reference of that variable is an assignment. It returns MAY_LIVE otherwise.\n   */\n  private VariableLiveness isVariableReadBeforeKill(\n      Node n, String variable) {\n\n    if (NodeUtil.isName(n) && variable.equals(n.getString())) {\n      if (NodeUtil.isLhs(n, n.getParent())) {\n        Preconditions.checkState(n.getParent().getType() == Token.ASSIGN);\n        // The expression to which the assignment is made is evaluated before\n        // the RHS is evaluated (normal left to right evaluation) but the KILL\n        // occurs after the RHS is evaluated.\n        Node rhs = n.getNext();\n        VariableLiveness state = isVariableReadBeforeKill(rhs, variable);\n        if (state == VariableLiveness.READ) {\n          return state;\n        }\n        return VariableLiveness.KILL;\n      } else {\n        return VariableLiveness.READ;\n      }\n    }\n\n    switch (n.getType()) {\n      // Conditionals\n      case Token.OR:\n      case Token.AND:\n        // With a AND/OR the first branch always runs, but the second is\n        // may not.\n      case Token.HOOK:\n        return checkHookBranchReadBeforeKill(\n            n.getFirstChild().getNext(), n.getLastChild(), variable);\n\n      default:\n        // Expressions are evaluated left-right, depth first.\n        for (Node child = n.getFirstChild();\n            child != null; child = child.getNext()) {\n          if (!ControlFlowGraph.isEnteringNewCfgNode(child)) { // Not a FUNCTION\n          VariableLiveness state = isVariableReadBeforeKill(child, variable);\n          if (state != VariableLiveness.MAYBE_LIVE) {\n            return state;\n          }\n        }\n      }\n    }\n\n    return VariableLiveness.MAYBE_LIVE;\n  }", "javadoc_start_line": 333, "annotations_start_line": 338, "method_start_line": 339, "end_line": 382}]}, {"failing_test": {"className": " com.google.javascript.jscomp.DeadAssignmentsEliminationTest", "methodName": "testIssue384c", "error": "junit.framework.AssertionFailedError", "message": ""}, "patched_method": {"file_path": "/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java", "method_name": "isVariableStillLiveWithinExpression", "content": "  /**\n   * Given a variable, node n in the tree and a sub-tree denoted by exprRoot as\n   * the root, this function returns true if there exists a read of that\n   * variable before a write to that variable that is on the right side of n.\n   *\n   * For example, suppose the node is x = 1:\n   *\n   * y = 1, x = 1; // false, there is no reads at all.\n   * y = 1, x = 1, print(x) // true, there is a read right of n.\n   * y = 1, x = 1, x = 2, print(x) // false, there is a read right of n but\n   *                               // it is after a write.\n   *\n   * @param n The current node we should look at.\n   * @param exprRoot The node\n   */\n  private boolean isVariableStillLiveWithinExpression(\n      Node n, Node exprRoot, String variable) {\n    while (n != exprRoot) {\n      VariableLiveness state = VariableLiveness.MAYBE_LIVE;\n      switch (n.getParent().getType()) {\n        case Token.OR:\n        case Token.AND:\n          // If the currently node is the first child of\n          // AND/OR, be conservative only consider the READs\n          // of the second operand.\n\n        case Token.HOOK:\n          // If current node is the condition, check each following\n          // branch, otherwise it is a conditional branch and the\n          // other branch can be ignored.\n\n        default:\n          for(Node sibling = n.getNext(); sibling != null;\n              sibling = sibling.getNext()) {\n            if (!ControlFlowGraph.isEnteringNewCfgNode(sibling)) {\n            state = isVariableReadBeforeKill(sibling, variable);\n\n      // If we see a READ or KILL there is no need to continue.\n      if (state == VariableLiveness.READ) {\n        return true;\n      } else if (state == VariableLiveness.KILL) {\n        return false;\n            }\n          }\n      }\n      }\n      n = n.getParent();\n    }\n    return false;\n  }", "javadoc_start_line": 275, "annotations_start_line": 290, "method_start_line": 291, "end_line": 324}, "steps": [{"file_path": "/src/com/google/javascript/jscomp/NodeTraversal.java", "method_name": "traverse", "content": "  /**\n   * Traverses a node recursively.\n   */\n  public static void traverse(\n      AbstractCompiler compiler, Node root, Callback cb) {\n    NodeTraversal t = new NodeTraversal(compiler, cb);\n    t.traverse(root);\n  }", "javadoc_start_line": 416, "annotations_start_line": 419, "method_start_line": 420, "end_line": 423}, {"file_path": "/src/com/google/javascript/jscomp/NodeTraversal.java", "method_name": "traverse", "content": "  /**\n   * Traverses a parse tree recursively.\n   */\n  public void traverse(Node root) {\n    try {\n      sourceName = \"\";\n      curNode = root;\n      pushScope(root);\n      traverseBranch(root, null);\n      popScope();\n    } catch (Exception unexpectedException) {\n      throwUnexpectedException(unexpectedException);\n    }\n  }", "javadoc_start_line": 241, "annotations_start_line": 244, "method_start_line": 244, "end_line": 254}, {"file_path": "/src/com/google/javascript/jscomp/NodeTraversal.java", "method_name": "traverseBranch", "content": "  /**\n   * Traverses a branch.\n   */\n  @SuppressWarnings(\"fallthrough\")\n  private void traverseBranch(Node n, Node parent) {\n    int type = n.getType();\n    if (type == Token.SCRIPT) {\n      sourceName = getSourceName(n);\n    }\n\n    curNode = n;\n    if (!callback.shouldTraverse(this, n, parent)) return;\n\n    switch (type) {\n      case Token.FUNCTION:\n        traverseFunction(n, parent);\n        break;\n\n      default:\n        for (Node child = n.getFirstChild(); child != null; ) {\n          // child could be replaced, in which case our child node\n          // would no longer point to the true next\n          Node next = child.getNext();\n          traverseBranch(child, n);\n          child = next;\n        }\n        break;\n    }\n\n    curNode = n;\n    callback.visit(this, n, parent);\n  }", "javadoc_start_line": 434, "annotations_start_line": 437, "method_start_line": 438, "end_line": 465}, {"file_path": "/src/com/google/javascript/jscomp/NodeTraversal.java", "method_name": "traverseBranch", "content": "  /**\n   * Traverses a branch.\n   */\n  @SuppressWarnings(\"fallthrough\")\n  private void traverseBranch(Node n, Node parent) {\n    int type = n.getType();\n    if (type == Token.SCRIPT) {\n      sourceName = getSourceName(n);\n    }\n\n    curNode = n;\n    if (!callback.shouldTraverse(this, n, parent)) return;\n\n    switch (type) {\n      case Token.FUNCTION:\n        traverseFunction(n, parent);\n        break;\n\n      default:\n        for (Node child = n.getFirstChild(); child != null; ) {\n          // child could be replaced, in which case our child node\n          // would no longer point to the true next\n          Node next = child.getNext();\n          traverseBranch(child, n);\n          child = next;\n        }\n        break;\n    }\n\n    curNode = n;\n    callback.visit(this, n, parent);\n  }", "javadoc_start_line": 434, "annotations_start_line": 437, "method_start_line": 438, "end_line": 465}, {"file_path": "/src/com/google/javascript/jscomp/NodeTraversal.java", "method_name": "traverseBranch", "content": "  /**\n   * Traverses a branch.\n   */\n  @SuppressWarnings(\"fallthrough\")\n  private void traverseBranch(Node n, Node parent) {\n    int type = n.getType();\n    if (type == Token.SCRIPT) {\n      sourceName = getSourceName(n);\n    }\n\n    curNode = n;\n    if (!callback.shouldTraverse(this, n, parent)) return;\n\n    switch (type) {\n      case Token.FUNCTION:\n        traverseFunction(n, parent);\n        break;\n\n      default:\n        for (Node child = n.getFirstChild(); child != null; ) {\n          // child could be replaced, in which case our child node\n          // would no longer point to the true next\n          Node next = child.getNext();\n          traverseBranch(child, n);\n          child = next;\n        }\n        break;\n    }\n\n    curNode = n;\n    callback.visit(this, n, parent);\n  }", "javadoc_start_line": 434, "annotations_start_line": 437, "method_start_line": 438, "end_line": 465}, {"file_path": "/src/com/google/javascript/jscomp/NodeTraversal.java", "method_name": "traverseFunction", "content": "  /**\n   * Traverses a function.\n   */\n  private void traverseFunction(Node n, Node parent) {\n    Preconditions.checkState(n.getChildCount() == 3);\n    Preconditions.checkState(n.getType() == Token.FUNCTION);\n\n    final Node fnName = n.getFirstChild();\n\n    boolean isFunctionExpression = (parent != null)\n        && NodeUtil.isFunctionExpression(n);\n\n    if (!isFunctionExpression) {\n      // Functions declarations are in the scope containing the declaration.\n      traverseBranch(fnName, n);\n    }\n\n    curNode = n;\n    pushScope(n);\n\n    if (isFunctionExpression) {\n      // Function expression names are only accessible within the function\n      // scope.\n      traverseBranch(fnName, n);\n    }\n\n    final Node args = fnName.getNext();\n    final Node body = args.getNext();\n\n    // Args\n    traverseBranch(args, n);\n\n    // Body\n    Preconditions.checkState(body.getNext() == null &&\n            body.getType() == Token.BLOCK);\n    traverseBranch(body, n);\n\n    popScope();\n  }", "javadoc_start_line": 467, "annotations_start_line": 470, "method_start_line": 470, "end_line": 505}, {"file_path": "/src/com/google/javascript/jscomp/NodeTraversal.java", "method_name": "pushScope", "content": "  /** Creates a new scope (e.g. when entering a function). */\n  private void pushScope(Node node) {\n    Preconditions.checkState(curNode != null);\n    scopeRoots.push(node);\n    cfgs.push(null);\n    if (scopeCallback != null) {\n      scopeCallback.enterScope(this);\n    }\n  }", "javadoc_start_line": 521, "annotations_start_line": 522, "method_start_line": 522, "end_line": 529}, {"file_path": "/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java", "method_name": "enterScope", "content": "  public void enterScope(NodeTraversal t) {\n    Scope scope = t.getScope();\n    // Global scope _SHOULD_ work, however, liveness won't finish without\n    // -Xmx1024 in closure. We might have to look at coding conventions for\n    // exported variables as well.\n    if (scope.isGlobal()) {\n      return;\n    }\n\n    // We are not going to do any dead assignment elimination in when there is\n    // at least one inner function because in most browsers, when there is a\n    // closure, ALL the variables are saved (escaped).\n    Node fnBlock = t.getScopeRoot().getLastChild();\n    if (NodeUtil.containsFunction(fnBlock)) {\n      return;\n    }\n\n    // We don't do any dead assignment elimination if there are no assigns\n    // to eliminate. :)\n    if (!NodeUtil.has(fnBlock, matchRemovableAssigns,\n            Predicates.<Node>alwaysTrue())) {\n      return;\n    }\n\n    // Computes liveness information first.\n    ControlFlowGraph<Node> cfg = t.getControlFlowGraph();\n    liveness = new LiveVariablesAnalysis(cfg, scope, compiler);\n    liveness.analyze();\n    tryRemoveDeadAssignments(t, cfg);\n  }", "javadoc_start_line": 70, "annotations_start_line": 69, "method_start_line": 70, "end_line": 99}, {"file_path": "/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java", "method_name": "tryRemoveDeadAssignments", "content": "  /**\n   * Try to remove useless assignments from a control flow graph that has been\n   * annotated with liveness information.\n   *\n   * @param t The node traversal.\n   * @param cfg The control flow graph of the program annotated with liveness\n   *        information.\n   */\n  private void tryRemoveDeadAssignments(NodeTraversal t,\n      ControlFlowGraph<Node> cfg) {\n    Iterable<DiGraphNode<Node, Branch>> nodes = cfg.getDirectedGraphNodes();\n\n    for (DiGraphNode<Node, Branch> cfgNode : nodes) {\n      FlowState<LiveVariableLattice> state =\n          cfgNode.getAnnotation();\n      Node n = cfgNode.getValue();\n      if (n == null) {\n        continue;\n      }\n      switch (n.getType()) {\n        case Token.IF:\n        case Token.WHILE:\n        case Token.DO:\n          tryRemoveAssignment(t, NodeUtil.getConditionExpression(n), state);\n          continue;\n        case Token.FOR:\n          if (!NodeUtil.isForIn(n)) {\n            tryRemoveAssignment(\n                t, NodeUtil.getConditionExpression(n), state);\n          }\n          continue;\n        case Token.SWITCH:\n        case Token.CASE:\n        case Token.RETURN:\n          if (n.hasChildren()) {\n            tryRemoveAssignment(t, n.getFirstChild(), state);\n          }\n          continue;\n        // TODO(user): case Token.VAR: Remove var a=1;a=2;.....\n      }\n\n      tryRemoveAssignment(t, n, state);\n    }\n  }", "javadoc_start_line": 109, "annotations_start_line": 117, "method_start_line": 118, "end_line": 152}, {"file_path": "/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java", "method_name": "tryRemoveAssignment", "content": "  private void tryRemoveAssignment(NodeTraversal t, Node n,\n      FlowState<LiveVariableLattice> state) {\n    tryRemoveAssignment(t, n, n, state);\n  }", "javadoc_start_line": 154, "annotations_start_line": 154, "method_start_line": 155, "end_line": 157}, {"file_path": "/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java", "method_name": "tryRemoveAssignment", "content": "  /**\n   * Determines if any local variables are dead after the instruction {@code n}\n   * and are assigned within the subtree of {@code n}. Removes those assignments\n   * if there are any.\n   *\n   * @param n Target instruction.\n   * @param exprRoot The CFG node where the liveness information in state is\n   *     still correct.\n   * @param state The liveness information at {@code n}.\n   */\n  private void tryRemoveAssignment(NodeTraversal t, Node n, Node exprRoot,\n      FlowState<LiveVariableLattice> state) {\n\n    Node parent = n.getParent();\n\n    if (NodeUtil.isAssignmentOp(n) ||\n        n.getType() == Token.INC || n.getType() == Token.DEC) {\n\n      Node lhs = n.getFirstChild();\n      Node rhs = lhs.getNext();\n\n      // Recurse first. Example: dead_x = dead_y = 1; We try to clean up dead_y\n      // first.\n      if (rhs != null) {\n        tryRemoveAssignment(t, rhs, exprRoot, state);\n        rhs = lhs.getNext();\n      }\n\n      Scope scope = t.getScope();\n      if (!NodeUtil.isName(lhs)) {\n        return; // Not a local variable assignment.\n      }\n      String name = lhs.getString();\n      if (!scope.isDeclared(name, false)) {\n        return;\n      }\n      Var var = scope.getVar(name);\n\n      if (liveness.getEscapedLocals().contains(var)) {\n        return; // Local variable that might be escaped due to closures.\n      }\n\n      // If we have an identity assignment such as a=a, always remove it\n      // regardless of what the liveness results because it\n      // does not change the result afterward.\n      if (rhs != null &&\n          NodeUtil.isName(rhs) &&\n          rhs.getString().equals(var.name) &&\n          NodeUtil.isAssign(n)) {\n        n.removeChild(rhs);\n        n.getParent().replaceChild(n, rhs);\n        compiler.reportCodeChange();\n        return;\n      }\n\n      if (state.getOut().isLive(var)) {\n        return; // Variable not dead.\n      }\n\n      if (state.getIn().isLive(var) &&\n          isVariableStillLiveWithinExpression(n, exprRoot, var.name)) {\n        // The variable is killed here but it is also live before it.\n        // This is possible if we have say:\n        //    if (X = a && a = C) {..} ; .......; a = S;\n        // In this case we are safe to remove \"a = C\" because it is dead.\n        // However if we have:\n        //    if (a = C && X = a) {..} ; .......; a = S;\n        // removing \"a = C\" is NOT correct, although the live set at the node\n        // is exactly the same.\n        // TODO(user): We need more fine grain CFA or we need to keep track\n        // of GEN sets when we recurse here.\n        return;\n      }\n\n      if (NodeUtil.isAssign(n)) {\n        n.removeChild(rhs);\n        n.getParent().replaceChild(n, rhs);\n      } else if (NodeUtil.isAssignmentOp(n)) {\n        n.removeChild(rhs);\n        n.removeChild(lhs);\n        Node op = new Node(NodeUtil.getOpFromAssignmentOp(n), lhs, rhs);\n        parent.replaceChild(n, op);\n      } else if (n.getType() == Token.INC || n.getType() == Token.DEC) {\n        if (NodeUtil.isExpressionNode(parent)) {\n          parent.replaceChild(n,\n              new Node(Token.VOID, Node.newNumber(0).copyInformationFrom(n)));\n        } else if(n.getType() == Token.COMMA && n != parent.getLastChild()) {\n          parent.removeChild(n);\n        } else if (parent.getType() == Token.FOR && !NodeUtil.isForIn(parent) &&\n            NodeUtil.getConditionExpression(parent) != n) {\n          parent.replaceChild(n, new Node(Token.EMPTY));\n        } else {\n          // Cannot replace x = a++ with x = a because that's not valid\n          // when a is not a number.\n          return;\n        }\n      } else {\n        // Not reachable.\n        Preconditions.checkState(false, \"Unknown statement\");\n      }\n\n      compiler.reportCodeChange();\n      return;\n\n    } else {\n      for (Node c = n.getFirstChild(); c != null;) {\n        Node next = c.getNext();\n        if (!ControlFlowGraph.isEnteringNewCfgNode(c)) {\n          tryRemoveAssignment(t, c, exprRoot, state);\n        }\n        c = next;\n      }\n      return;\n    }\n  }", "javadoc_start_line": 159, "annotations_start_line": 169, "method_start_line": 170, "end_line": 273}, {"file_path": "/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java", "method_name": "tryRemoveAssignment", "content": "  /**\n   * Determines if any local variables are dead after the instruction {@code n}\n   * and are assigned within the subtree of {@code n}. Removes those assignments\n   * if there are any.\n   *\n   * @param n Target instruction.\n   * @param exprRoot The CFG node where the liveness information in state is\n   *     still correct.\n   * @param state The liveness information at {@code n}.\n   */\n  private void tryRemoveAssignment(NodeTraversal t, Node n, Node exprRoot,\n      FlowState<LiveVariableLattice> state) {\n\n    Node parent = n.getParent();\n\n    if (NodeUtil.isAssignmentOp(n) ||\n        n.getType() == Token.INC || n.getType() == Token.DEC) {\n\n      Node lhs = n.getFirstChild();\n      Node rhs = lhs.getNext();\n\n      // Recurse first. Example: dead_x = dead_y = 1; We try to clean up dead_y\n      // first.\n      if (rhs != null) {\n        tryRemoveAssignment(t, rhs, exprRoot, state);\n        rhs = lhs.getNext();\n      }\n\n      Scope scope = t.getScope();\n      if (!NodeUtil.isName(lhs)) {\n        return; // Not a local variable assignment.\n      }\n      String name = lhs.getString();\n      if (!scope.isDeclared(name, false)) {\n        return;\n      }\n      Var var = scope.getVar(name);\n\n      if (liveness.getEscapedLocals().contains(var)) {\n        return; // Local variable that might be escaped due to closures.\n      }\n\n      // If we have an identity assignment such as a=a, always remove it\n      // regardless of what the liveness results because it\n      // does not change the result afterward.\n      if (rhs != null &&\n          NodeUtil.isName(rhs) &&\n          rhs.getString().equals(var.name) &&\n          NodeUtil.isAssign(n)) {\n        n.removeChild(rhs);\n        n.getParent().replaceChild(n, rhs);\n        compiler.reportCodeChange();\n        return;\n      }\n\n      if (state.getOut().isLive(var)) {\n        return; // Variable not dead.\n      }\n\n      if (state.getIn().isLive(var) &&\n          isVariableStillLiveWithinExpression(n, exprRoot, var.name)) {\n        // The variable is killed here but it is also live before it.\n        // This is possible if we have say:\n        //    if (X = a && a = C) {..} ; .......; a = S;\n        // In this case we are safe to remove \"a = C\" because it is dead.\n        // However if we have:\n        //    if (a = C && X = a) {..} ; .......; a = S;\n        // removing \"a = C\" is NOT correct, although the live set at the node\n        // is exactly the same.\n        // TODO(user): We need more fine grain CFA or we need to keep track\n        // of GEN sets when we recurse here.\n        return;\n      }\n\n      if (NodeUtil.isAssign(n)) {\n        n.removeChild(rhs);\n        n.getParent().replaceChild(n, rhs);\n      } else if (NodeUtil.isAssignmentOp(n)) {\n        n.removeChild(rhs);\n        n.removeChild(lhs);\n        Node op = new Node(NodeUtil.getOpFromAssignmentOp(n), lhs, rhs);\n        parent.replaceChild(n, op);\n      } else if (n.getType() == Token.INC || n.getType() == Token.DEC) {\n        if (NodeUtil.isExpressionNode(parent)) {\n          parent.replaceChild(n,\n              new Node(Token.VOID, Node.newNumber(0).copyInformationFrom(n)));\n        } else if(n.getType() == Token.COMMA && n != parent.getLastChild()) {\n          parent.removeChild(n);\n        } else if (parent.getType() == Token.FOR && !NodeUtil.isForIn(parent) &&\n            NodeUtil.getConditionExpression(parent) != n) {\n          parent.replaceChild(n, new Node(Token.EMPTY));\n        } else {\n          // Cannot replace x = a++ with x = a because that's not valid\n          // when a is not a number.\n          return;\n        }\n      } else {\n        // Not reachable.\n        Preconditions.checkState(false, \"Unknown statement\");\n      }\n\n      compiler.reportCodeChange();\n      return;\n\n    } else {\n      for (Node c = n.getFirstChild(); c != null;) {\n        Node next = c.getNext();\n        if (!ControlFlowGraph.isEnteringNewCfgNode(c)) {\n          tryRemoveAssignment(t, c, exprRoot, state);\n        }\n        c = next;\n      }\n      return;\n    }\n  }", "javadoc_start_line": 159, "annotations_start_line": 169, "method_start_line": 170, "end_line": 273}, {"file_path": "/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java", "method_name": "tryRemoveAssignment", "content": "  /**\n   * Determines if any local variables are dead after the instruction {@code n}\n   * and are assigned within the subtree of {@code n}. Removes those assignments\n   * if there are any.\n   *\n   * @param n Target instruction.\n   * @param exprRoot The CFG node where the liveness information in state is\n   *     still correct.\n   * @param state The liveness information at {@code n}.\n   */\n  private void tryRemoveAssignment(NodeTraversal t, Node n, Node exprRoot,\n      FlowState<LiveVariableLattice> state) {\n\n    Node parent = n.getParent();\n\n    if (NodeUtil.isAssignmentOp(n) ||\n        n.getType() == Token.INC || n.getType() == Token.DEC) {\n\n      Node lhs = n.getFirstChild();\n      Node rhs = lhs.getNext();\n\n      // Recurse first. Example: dead_x = dead_y = 1; We try to clean up dead_y\n      // first.\n      if (rhs != null) {\n        tryRemoveAssignment(t, rhs, exprRoot, state);\n        rhs = lhs.getNext();\n      }\n\n      Scope scope = t.getScope();\n      if (!NodeUtil.isName(lhs)) {\n        return; // Not a local variable assignment.\n      }\n      String name = lhs.getString();\n      if (!scope.isDeclared(name, false)) {\n        return;\n      }\n      Var var = scope.getVar(name);\n\n      if (liveness.getEscapedLocals().contains(var)) {\n        return; // Local variable that might be escaped due to closures.\n      }\n\n      // If we have an identity assignment such as a=a, always remove it\n      // regardless of what the liveness results because it\n      // does not change the result afterward.\n      if (rhs != null &&\n          NodeUtil.isName(rhs) &&\n          rhs.getString().equals(var.name) &&\n          NodeUtil.isAssign(n)) {\n        n.removeChild(rhs);\n        n.getParent().replaceChild(n, rhs);\n        compiler.reportCodeChange();\n        return;\n      }\n\n      if (state.getOut().isLive(var)) {\n        return; // Variable not dead.\n      }\n\n      if (state.getIn().isLive(var) &&\n          isVariableStillLiveWithinExpression(n, exprRoot, var.name)) {\n        // The variable is killed here but it is also live before it.\n        // This is possible if we have say:\n        //    if (X = a && a = C) {..} ; .......; a = S;\n        // In this case we are safe to remove \"a = C\" because it is dead.\n        // However if we have:\n        //    if (a = C && X = a) {..} ; .......; a = S;\n        // removing \"a = C\" is NOT correct, although the live set at the node\n        // is exactly the same.\n        // TODO(user): We need more fine grain CFA or we need to keep track\n        // of GEN sets when we recurse here.\n        return;\n      }\n\n      if (NodeUtil.isAssign(n)) {\n        n.removeChild(rhs);\n        n.getParent().replaceChild(n, rhs);\n      } else if (NodeUtil.isAssignmentOp(n)) {\n        n.removeChild(rhs);\n        n.removeChild(lhs);\n        Node op = new Node(NodeUtil.getOpFromAssignmentOp(n), lhs, rhs);\n        parent.replaceChild(n, op);\n      } else if (n.getType() == Token.INC || n.getType() == Token.DEC) {\n        if (NodeUtil.isExpressionNode(parent)) {\n          parent.replaceChild(n,\n              new Node(Token.VOID, Node.newNumber(0).copyInformationFrom(n)));\n        } else if(n.getType() == Token.COMMA && n != parent.getLastChild()) {\n          parent.removeChild(n);\n        } else if (parent.getType() == Token.FOR && !NodeUtil.isForIn(parent) &&\n            NodeUtil.getConditionExpression(parent) != n) {\n          parent.replaceChild(n, new Node(Token.EMPTY));\n        } else {\n          // Cannot replace x = a++ with x = a because that's not valid\n          // when a is not a number.\n          return;\n        }\n      } else {\n        // Not reachable.\n        Preconditions.checkState(false, \"Unknown statement\");\n      }\n\n      compiler.reportCodeChange();\n      return;\n\n    } else {\n      for (Node c = n.getFirstChild(); c != null;) {\n        Node next = c.getNext();\n        if (!ControlFlowGraph.isEnteringNewCfgNode(c)) {\n          tryRemoveAssignment(t, c, exprRoot, state);\n        }\n        c = next;\n      }\n      return;\n    }\n  }", "javadoc_start_line": 159, "annotations_start_line": 169, "method_start_line": 170, "end_line": 273}, {"file_path": "/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java", "method_name": "tryRemoveAssignment", "content": "  /**\n   * Determines if any local variables are dead after the instruction {@code n}\n   * and are assigned within the subtree of {@code n}. Removes those assignments\n   * if there are any.\n   *\n   * @param n Target instruction.\n   * @param exprRoot The CFG node where the liveness information in state is\n   *     still correct.\n   * @param state The liveness information at {@code n}.\n   */\n  private void tryRemoveAssignment(NodeTraversal t, Node n, Node exprRoot,\n      FlowState<LiveVariableLattice> state) {\n\n    Node parent = n.getParent();\n\n    if (NodeUtil.isAssignmentOp(n) ||\n        n.getType() == Token.INC || n.getType() == Token.DEC) {\n\n      Node lhs = n.getFirstChild();\n      Node rhs = lhs.getNext();\n\n      // Recurse first. Example: dead_x = dead_y = 1; We try to clean up dead_y\n      // first.\n      if (rhs != null) {\n        tryRemoveAssignment(t, rhs, exprRoot, state);\n        rhs = lhs.getNext();\n      }\n\n      Scope scope = t.getScope();\n      if (!NodeUtil.isName(lhs)) {\n        return; // Not a local variable assignment.\n      }\n      String name = lhs.getString();\n      if (!scope.isDeclared(name, false)) {\n        return;\n      }\n      Var var = scope.getVar(name);\n\n      if (liveness.getEscapedLocals().contains(var)) {\n        return; // Local variable that might be escaped due to closures.\n      }\n\n      // If we have an identity assignment such as a=a, always remove it\n      // regardless of what the liveness results because it\n      // does not change the result afterward.\n      if (rhs != null &&\n          NodeUtil.isName(rhs) &&\n          rhs.getString().equals(var.name) &&\n          NodeUtil.isAssign(n)) {\n        n.removeChild(rhs);\n        n.getParent().replaceChild(n, rhs);\n        compiler.reportCodeChange();\n        return;\n      }\n\n      if (state.getOut().isLive(var)) {\n        return; // Variable not dead.\n      }\n\n      if (state.getIn().isLive(var) &&\n          isVariableStillLiveWithinExpression(n, exprRoot, var.name)) {\n        // The variable is killed here but it is also live before it.\n        // This is possible if we have say:\n        //    if (X = a && a = C) {..} ; .......; a = S;\n        // In this case we are safe to remove \"a = C\" because it is dead.\n        // However if we have:\n        //    if (a = C && X = a) {..} ; .......; a = S;\n        // removing \"a = C\" is NOT correct, although the live set at the node\n        // is exactly the same.\n        // TODO(user): We need more fine grain CFA or we need to keep track\n        // of GEN sets when we recurse here.\n        return;\n      }\n\n      if (NodeUtil.isAssign(n)) {\n        n.removeChild(rhs);\n        n.getParent().replaceChild(n, rhs);\n      } else if (NodeUtil.isAssignmentOp(n)) {\n        n.removeChild(rhs);\n        n.removeChild(lhs);\n        Node op = new Node(NodeUtil.getOpFromAssignmentOp(n), lhs, rhs);\n        parent.replaceChild(n, op);\n      } else if (n.getType() == Token.INC || n.getType() == Token.DEC) {\n        if (NodeUtil.isExpressionNode(parent)) {\n          parent.replaceChild(n,\n              new Node(Token.VOID, Node.newNumber(0).copyInformationFrom(n)));\n        } else if(n.getType() == Token.COMMA && n != parent.getLastChild()) {\n          parent.removeChild(n);\n        } else if (parent.getType() == Token.FOR && !NodeUtil.isForIn(parent) &&\n            NodeUtil.getConditionExpression(parent) != n) {\n          parent.replaceChild(n, new Node(Token.EMPTY));\n        } else {\n          // Cannot replace x = a++ with x = a because that's not valid\n          // when a is not a number.\n          return;\n        }\n      } else {\n        // Not reachable.\n        Preconditions.checkState(false, \"Unknown statement\");\n      }\n\n      compiler.reportCodeChange();\n      return;\n\n    } else {\n      for (Node c = n.getFirstChild(); c != null;) {\n        Node next = c.getNext();\n        if (!ControlFlowGraph.isEnteringNewCfgNode(c)) {\n          tryRemoveAssignment(t, c, exprRoot, state);\n        }\n        c = next;\n      }\n      return;\n    }\n  }", "javadoc_start_line": 159, "annotations_start_line": 169, "method_start_line": 170, "end_line": 273}, {"file_path": "/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java", "method_name": "tryRemoveAssignment", "content": "  /**\n   * Determines if any local variables are dead after the instruction {@code n}\n   * and are assigned within the subtree of {@code n}. Removes those assignments\n   * if there are any.\n   *\n   * @param n Target instruction.\n   * @param exprRoot The CFG node where the liveness information in state is\n   *     still correct.\n   * @param state The liveness information at {@code n}.\n   */\n  private void tryRemoveAssignment(NodeTraversal t, Node n, Node exprRoot,\n      FlowState<LiveVariableLattice> state) {\n\n    Node parent = n.getParent();\n\n    if (NodeUtil.isAssignmentOp(n) ||\n        n.getType() == Token.INC || n.getType() == Token.DEC) {\n\n      Node lhs = n.getFirstChild();\n      Node rhs = lhs.getNext();\n\n      // Recurse first. Example: dead_x = dead_y = 1; We try to clean up dead_y\n      // first.\n      if (rhs != null) {\n        tryRemoveAssignment(t, rhs, exprRoot, state);\n        rhs = lhs.getNext();\n      }\n\n      Scope scope = t.getScope();\n      if (!NodeUtil.isName(lhs)) {\n        return; // Not a local variable assignment.\n      }\n      String name = lhs.getString();\n      if (!scope.isDeclared(name, false)) {\n        return;\n      }\n      Var var = scope.getVar(name);\n\n      if (liveness.getEscapedLocals().contains(var)) {\n        return; // Local variable that might be escaped due to closures.\n      }\n\n      // If we have an identity assignment such as a=a, always remove it\n      // regardless of what the liveness results because it\n      // does not change the result afterward.\n      if (rhs != null &&\n          NodeUtil.isName(rhs) &&\n          rhs.getString().equals(var.name) &&\n          NodeUtil.isAssign(n)) {\n        n.removeChild(rhs);\n        n.getParent().replaceChild(n, rhs);\n        compiler.reportCodeChange();\n        return;\n      }\n\n      if (state.getOut().isLive(var)) {\n        return; // Variable not dead.\n      }\n\n      if (state.getIn().isLive(var) &&\n          isVariableStillLiveWithinExpression(n, exprRoot, var.name)) {\n        // The variable is killed here but it is also live before it.\n        // This is possible if we have say:\n        //    if (X = a && a = C) {..} ; .......; a = S;\n        // In this case we are safe to remove \"a = C\" because it is dead.\n        // However if we have:\n        //    if (a = C && X = a) {..} ; .......; a = S;\n        // removing \"a = C\" is NOT correct, although the live set at the node\n        // is exactly the same.\n        // TODO(user): We need more fine grain CFA or we need to keep track\n        // of GEN sets when we recurse here.\n        return;\n      }\n\n      if (NodeUtil.isAssign(n)) {\n        n.removeChild(rhs);\n        n.getParent().replaceChild(n, rhs);\n      } else if (NodeUtil.isAssignmentOp(n)) {\n        n.removeChild(rhs);\n        n.removeChild(lhs);\n        Node op = new Node(NodeUtil.getOpFromAssignmentOp(n), lhs, rhs);\n        parent.replaceChild(n, op);\n      } else if (n.getType() == Token.INC || n.getType() == Token.DEC) {\n        if (NodeUtil.isExpressionNode(parent)) {\n          parent.replaceChild(n,\n              new Node(Token.VOID, Node.newNumber(0).copyInformationFrom(n)));\n        } else if(n.getType() == Token.COMMA && n != parent.getLastChild()) {\n          parent.removeChild(n);\n        } else if (parent.getType() == Token.FOR && !NodeUtil.isForIn(parent) &&\n            NodeUtil.getConditionExpression(parent) != n) {\n          parent.replaceChild(n, new Node(Token.EMPTY));\n        } else {\n          // Cannot replace x = a++ with x = a because that's not valid\n          // when a is not a number.\n          return;\n        }\n      } else {\n        // Not reachable.\n        Preconditions.checkState(false, \"Unknown statement\");\n      }\n\n      compiler.reportCodeChange();\n      return;\n\n    } else {\n      for (Node c = n.getFirstChild(); c != null;) {\n        Node next = c.getNext();\n        if (!ControlFlowGraph.isEnteringNewCfgNode(c)) {\n          tryRemoveAssignment(t, c, exprRoot, state);\n        }\n        c = next;\n      }\n      return;\n    }\n  }", "javadoc_start_line": 159, "annotations_start_line": 169, "method_start_line": 170, "end_line": 273}, {"file_path": "/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java", "method_name": "isVariableStillLiveWithinExpression", "content": "  /**\n   * Given a variable, node n in the tree and a sub-tree denoted by exprRoot as\n   * the root, this function returns true if there exists a read of that\n   * variable before a write to that variable that is on the right side of n.\n   *\n   * For example, suppose the node is x = 1:\n   *\n   * y = 1, x = 1; // false, there is no reads at all.\n   * y = 1, x = 1, print(x) // true, there is a read right of n.\n   * y = 1, x = 1, x = 2, print(x) // false, there is a read right of n but\n   *                               // it is after a write.\n   *\n   * @param n The current node we should look at.\n   * @param exprRoot The node\n   */\n  private boolean isVariableStillLiveWithinExpression(\n      Node n, Node exprRoot, String variable) {\n    while (n != exprRoot) {\n      VariableLiveness state = VariableLiveness.MAYBE_LIVE;\n      switch (n.getParent().getType()) {\n        case Token.OR:\n        case Token.AND:\n          // If the currently node is the first child of\n          // AND/OR, be conservative only consider the READs\n          // of the second operand.\n\n        case Token.HOOK:\n          // If current node is the condition, check each following\n          // branch, otherwise it is a conditional branch and the\n          // other branch can be ignored.\n\n        default:\n          for(Node sibling = n.getNext(); sibling != null;\n              sibling = sibling.getNext()) {\n            if (!ControlFlowGraph.isEnteringNewCfgNode(sibling)) {\n            state = isVariableReadBeforeKill(sibling, variable);\n\n      // If we see a READ or KILL there is no need to continue.\n      if (state == VariableLiveness.READ) {\n        return true;\n      } else if (state == VariableLiveness.KILL) {\n        return false;\n            }\n          }\n      }\n      }\n      n = n.getParent();\n    }\n    return false;\n  }", "javadoc_start_line": 275, "annotations_start_line": 290, "method_start_line": 291, "end_line": 324}]}, {"failing_test": {"className": " com.google.javascript.jscomp.DeadAssignmentsEliminationTest", "methodName": "testIssue384d", "error": "junit.framework.AssertionFailedError", "message": ""}, "patched_method": {"file_path": "/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java", "method_name": "isVariableReadBeforeKill", "content": "  /**\n   * Give an expression and a variable. It returns READ, if the first\n   * reference of that variable is a read. It returns KILL, if the first\n   * reference of that variable is an assignment. It returns MAY_LIVE otherwise.\n   */\n  private VariableLiveness isVariableReadBeforeKill(\n      Node n, String variable) {\n\n    if (NodeUtil.isName(n) && variable.equals(n.getString())) {\n      if (NodeUtil.isLhs(n, n.getParent())) {\n        Preconditions.checkState(n.getParent().getType() == Token.ASSIGN);\n        // The expression to which the assignment is made is evaluated before\n        // the RHS is evaluated (normal left to right evaluation) but the KILL\n        // occurs after the RHS is evaluated.\n        Node rhs = n.getNext();\n        VariableLiveness state = isVariableReadBeforeKill(rhs, variable);\n        if (state == VariableLiveness.READ) {\n          return state;\n        }\n        return VariableLiveness.KILL;\n      } else {\n        return VariableLiveness.READ;\n      }\n    }\n\n    switch (n.getType()) {\n      // Conditionals\n      case Token.OR:\n      case Token.AND:\n        // With a AND/OR the first branch always runs, but the second is\n        // may not.\n      case Token.HOOK:\n        return checkHookBranchReadBeforeKill(\n            n.getFirstChild().getNext(), n.getLastChild(), variable);\n\n      default:\n        // Expressions are evaluated left-right, depth first.\n        for (Node child = n.getFirstChild();\n            child != null; child = child.getNext()) {\n          if (!ControlFlowGraph.isEnteringNewCfgNode(child)) { // Not a FUNCTION\n          VariableLiveness state = isVariableReadBeforeKill(child, variable);\n          if (state != VariableLiveness.MAYBE_LIVE) {\n            return state;\n          }\n        }\n      }\n    }\n\n    return VariableLiveness.MAYBE_LIVE;\n  }", "javadoc_start_line": 333, "annotations_start_line": 338, "method_start_line": 339, "end_line": 382}, "steps": [{"file_path": "/src/com/google/javascript/jscomp/NodeTraversal.java", "method_name": "traverse", "content": "  /**\n   * Traverses a node recursively.\n   */\n  public static void traverse(\n      AbstractCompiler compiler, Node root, Callback cb) {\n    NodeTraversal t = new NodeTraversal(compiler, cb);\n    t.traverse(root);\n  }", "javadoc_start_line": 416, "annotations_start_line": 419, "method_start_line": 420, "end_line": 423}, {"file_path": "/src/com/google/javascript/jscomp/NodeTraversal.java", "method_name": "traverse", "content": "  /**\n   * Traverses a parse tree recursively.\n   */\n  public void traverse(Node root) {\n    try {\n      sourceName = \"\";\n      curNode = root;\n      pushScope(root);\n      traverseBranch(root, null);\n      popScope();\n    } catch (Exception unexpectedException) {\n      throwUnexpectedException(unexpectedException);\n    }\n  }", "javadoc_start_line": 241, "annotations_start_line": 244, "method_start_line": 244, "end_line": 254}, {"file_path": "/src/com/google/javascript/jscomp/NodeTraversal.java", "method_name": "traverseBranch", "content": "  /**\n   * Traverses a branch.\n   */\n  @SuppressWarnings(\"fallthrough\")\n  private void traverseBranch(Node n, Node parent) {\n    int type = n.getType();\n    if (type == Token.SCRIPT) {\n      sourceName = getSourceName(n);\n    }\n\n    curNode = n;\n    if (!callback.shouldTraverse(this, n, parent)) return;\n\n    switch (type) {\n      case Token.FUNCTION:\n        traverseFunction(n, parent);\n        break;\n\n      default:\n        for (Node child = n.getFirstChild(); child != null; ) {\n          // child could be replaced, in which case our child node\n          // would no longer point to the true next\n          Node next = child.getNext();\n          traverseBranch(child, n);\n          child = next;\n        }\n        break;\n    }\n\n    curNode = n;\n    callback.visit(this, n, parent);\n  }", "javadoc_start_line": 434, "annotations_start_line": 437, "method_start_line": 438, "end_line": 465}, {"file_path": "/src/com/google/javascript/jscomp/NodeTraversal.java", "method_name": "traverseBranch", "content": "  /**\n   * Traverses a branch.\n   */\n  @SuppressWarnings(\"fallthrough\")\n  private void traverseBranch(Node n, Node parent) {\n    int type = n.getType();\n    if (type == Token.SCRIPT) {\n      sourceName = getSourceName(n);\n    }\n\n    curNode = n;\n    if (!callback.shouldTraverse(this, n, parent)) return;\n\n    switch (type) {\n      case Token.FUNCTION:\n        traverseFunction(n, parent);\n        break;\n\n      default:\n        for (Node child = n.getFirstChild(); child != null; ) {\n          // child could be replaced, in which case our child node\n          // would no longer point to the true next\n          Node next = child.getNext();\n          traverseBranch(child, n);\n          child = next;\n        }\n        break;\n    }\n\n    curNode = n;\n    callback.visit(this, n, parent);\n  }", "javadoc_start_line": 434, "annotations_start_line": 437, "method_start_line": 438, "end_line": 465}, {"file_path": "/src/com/google/javascript/jscomp/NodeTraversal.java", "method_name": "traverseBranch", "content": "  /**\n   * Traverses a branch.\n   */\n  @SuppressWarnings(\"fallthrough\")\n  private void traverseBranch(Node n, Node parent) {\n    int type = n.getType();\n    if (type == Token.SCRIPT) {\n      sourceName = getSourceName(n);\n    }\n\n    curNode = n;\n    if (!callback.shouldTraverse(this, n, parent)) return;\n\n    switch (type) {\n      case Token.FUNCTION:\n        traverseFunction(n, parent);\n        break;\n\n      default:\n        for (Node child = n.getFirstChild(); child != null; ) {\n          // child could be replaced, in which case our child node\n          // would no longer point to the true next\n          Node next = child.getNext();\n          traverseBranch(child, n);\n          child = next;\n        }\n        break;\n    }\n\n    curNode = n;\n    callback.visit(this, n, parent);\n  }", "javadoc_start_line": 434, "annotations_start_line": 437, "method_start_line": 438, "end_line": 465}, {"file_path": "/src/com/google/javascript/jscomp/NodeTraversal.java", "method_name": "traverseFunction", "content": "  /**\n   * Traverses a function.\n   */\n  private void traverseFunction(Node n, Node parent) {\n    Preconditions.checkState(n.getChildCount() == 3);\n    Preconditions.checkState(n.getType() == Token.FUNCTION);\n\n    final Node fnName = n.getFirstChild();\n\n    boolean isFunctionExpression = (parent != null)\n        && NodeUtil.isFunctionExpression(n);\n\n    if (!isFunctionExpression) {\n      // Functions declarations are in the scope containing the declaration.\n      traverseBranch(fnName, n);\n    }\n\n    curNode = n;\n    pushScope(n);\n\n    if (isFunctionExpression) {\n      // Function expression names are only accessible within the function\n      // scope.\n      traverseBranch(fnName, n);\n    }\n\n    final Node args = fnName.getNext();\n    final Node body = args.getNext();\n\n    // Args\n    traverseBranch(args, n);\n\n    // Body\n    Preconditions.checkState(body.getNext() == null &&\n            body.getType() == Token.BLOCK);\n    traverseBranch(body, n);\n\n    popScope();\n  }", "javadoc_start_line": 467, "annotations_start_line": 470, "method_start_line": 470, "end_line": 505}, {"file_path": "/src/com/google/javascript/jscomp/NodeTraversal.java", "method_name": "pushScope", "content": "  /** Creates a new scope (e.g. when entering a function). */\n  private void pushScope(Node node) {\n    Preconditions.checkState(curNode != null);\n    scopeRoots.push(node);\n    cfgs.push(null);\n    if (scopeCallback != null) {\n      scopeCallback.enterScope(this);\n    }\n  }", "javadoc_start_line": 521, "annotations_start_line": 522, "method_start_line": 522, "end_line": 529}, {"file_path": "/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java", "method_name": "enterScope", "content": "  public void enterScope(NodeTraversal t) {\n    Scope scope = t.getScope();\n    // Global scope _SHOULD_ work, however, liveness won't finish without\n    // -Xmx1024 in closure. We might have to look at coding conventions for\n    // exported variables as well.\n    if (scope.isGlobal()) {\n      return;\n    }\n\n    // We are not going to do any dead assignment elimination in when there is\n    // at least one inner function because in most browsers, when there is a\n    // closure, ALL the variables are saved (escaped).\n    Node fnBlock = t.getScopeRoot().getLastChild();\n    if (NodeUtil.containsFunction(fnBlock)) {\n      return;\n    }\n\n    // We don't do any dead assignment elimination if there are no assigns\n    // to eliminate. :)\n    if (!NodeUtil.has(fnBlock, matchRemovableAssigns,\n            Predicates.<Node>alwaysTrue())) {\n      return;\n    }\n\n    // Computes liveness information first.\n    ControlFlowGraph<Node> cfg = t.getControlFlowGraph();\n    liveness = new LiveVariablesAnalysis(cfg, scope, compiler);\n    liveness.analyze();\n    tryRemoveDeadAssignments(t, cfg);\n  }", "javadoc_start_line": 70, "annotations_start_line": 69, "method_start_line": 70, "end_line": 99}, {"file_path": "/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java", "method_name": "tryRemoveDeadAssignments", "content": "  /**\n   * Try to remove useless assignments from a control flow graph that has been\n   * annotated with liveness information.\n   *\n   * @param t The node traversal.\n   * @param cfg The control flow graph of the program annotated with liveness\n   *        information.\n   */\n  private void tryRemoveDeadAssignments(NodeTraversal t,\n      ControlFlowGraph<Node> cfg) {\n    Iterable<DiGraphNode<Node, Branch>> nodes = cfg.getDirectedGraphNodes();\n\n    for (DiGraphNode<Node, Branch> cfgNode : nodes) {\n      FlowState<LiveVariableLattice> state =\n          cfgNode.getAnnotation();\n      Node n = cfgNode.getValue();\n      if (n == null) {\n        continue;\n      }\n      switch (n.getType()) {\n        case Token.IF:\n        case Token.WHILE:\n        case Token.DO:\n          tryRemoveAssignment(t, NodeUtil.getConditionExpression(n), state);\n          continue;\n        case Token.FOR:\n          if (!NodeUtil.isForIn(n)) {\n            tryRemoveAssignment(\n                t, NodeUtil.getConditionExpression(n), state);\n          }\n          continue;\n        case Token.SWITCH:\n        case Token.CASE:\n        case Token.RETURN:\n          if (n.hasChildren()) {\n            tryRemoveAssignment(t, n.getFirstChild(), state);\n          }\n          continue;\n        // TODO(user): case Token.VAR: Remove var a=1;a=2;.....\n      }\n\n      tryRemoveAssignment(t, n, state);\n    }\n  }", "javadoc_start_line": 109, "annotations_start_line": 117, "method_start_line": 118, "end_line": 152}, {"file_path": "/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java", "method_name": "tryRemoveAssignment", "content": "  private void tryRemoveAssignment(NodeTraversal t, Node n,\n      FlowState<LiveVariableLattice> state) {\n    tryRemoveAssignment(t, n, n, state);\n  }", "javadoc_start_line": 154, "annotations_start_line": 154, "method_start_line": 155, "end_line": 157}, {"file_path": "/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java", "method_name": "tryRemoveAssignment", "content": "  /**\n   * Determines if any local variables are dead after the instruction {@code n}\n   * and are assigned within the subtree of {@code n}. Removes those assignments\n   * if there are any.\n   *\n   * @param n Target instruction.\n   * @param exprRoot The CFG node where the liveness information in state is\n   *     still correct.\n   * @param state The liveness information at {@code n}.\n   */\n  private void tryRemoveAssignment(NodeTraversal t, Node n, Node exprRoot,\n      FlowState<LiveVariableLattice> state) {\n\n    Node parent = n.getParent();\n\n    if (NodeUtil.isAssignmentOp(n) ||\n        n.getType() == Token.INC || n.getType() == Token.DEC) {\n\n      Node lhs = n.getFirstChild();\n      Node rhs = lhs.getNext();\n\n      // Recurse first. Example: dead_x = dead_y = 1; We try to clean up dead_y\n      // first.\n      if (rhs != null) {\n        tryRemoveAssignment(t, rhs, exprRoot, state);\n        rhs = lhs.getNext();\n      }\n\n      Scope scope = t.getScope();\n      if (!NodeUtil.isName(lhs)) {\n        return; // Not a local variable assignment.\n      }\n      String name = lhs.getString();\n      if (!scope.isDeclared(name, false)) {\n        return;\n      }\n      Var var = scope.getVar(name);\n\n      if (liveness.getEscapedLocals().contains(var)) {\n        return; // Local variable that might be escaped due to closures.\n      }\n\n      // If we have an identity assignment such as a=a, always remove it\n      // regardless of what the liveness results because it\n      // does not change the result afterward.\n      if (rhs != null &&\n          NodeUtil.isName(rhs) &&\n          rhs.getString().equals(var.name) &&\n          NodeUtil.isAssign(n)) {\n        n.removeChild(rhs);\n        n.getParent().replaceChild(n, rhs);\n        compiler.reportCodeChange();\n        return;\n      }\n\n      if (state.getOut().isLive(var)) {\n        return; // Variable not dead.\n      }\n\n      if (state.getIn().isLive(var) &&\n          isVariableStillLiveWithinExpression(n, exprRoot, var.name)) {\n        // The variable is killed here but it is also live before it.\n        // This is possible if we have say:\n        //    if (X = a && a = C) {..} ; .......; a = S;\n        // In this case we are safe to remove \"a = C\" because it is dead.\n        // However if we have:\n        //    if (a = C && X = a) {..} ; .......; a = S;\n        // removing \"a = C\" is NOT correct, although the live set at the node\n        // is exactly the same.\n        // TODO(user): We need more fine grain CFA or we need to keep track\n        // of GEN sets when we recurse here.\n        return;\n      }\n\n      if (NodeUtil.isAssign(n)) {\n        n.removeChild(rhs);\n        n.getParent().replaceChild(n, rhs);\n      } else if (NodeUtil.isAssignmentOp(n)) {\n        n.removeChild(rhs);\n        n.removeChild(lhs);\n        Node op = new Node(NodeUtil.getOpFromAssignmentOp(n), lhs, rhs);\n        parent.replaceChild(n, op);\n      } else if (n.getType() == Token.INC || n.getType() == Token.DEC) {\n        if (NodeUtil.isExpressionNode(parent)) {\n          parent.replaceChild(n,\n              new Node(Token.VOID, Node.newNumber(0).copyInformationFrom(n)));\n        } else if(n.getType() == Token.COMMA && n != parent.getLastChild()) {\n          parent.removeChild(n);\n        } else if (parent.getType() == Token.FOR && !NodeUtil.isForIn(parent) &&\n            NodeUtil.getConditionExpression(parent) != n) {\n          parent.replaceChild(n, new Node(Token.EMPTY));\n        } else {\n          // Cannot replace x = a++ with x = a because that's not valid\n          // when a is not a number.\n          return;\n        }\n      } else {\n        // Not reachable.\n        Preconditions.checkState(false, \"Unknown statement\");\n      }\n\n      compiler.reportCodeChange();\n      return;\n\n    } else {\n      for (Node c = n.getFirstChild(); c != null;) {\n        Node next = c.getNext();\n        if (!ControlFlowGraph.isEnteringNewCfgNode(c)) {\n          tryRemoveAssignment(t, c, exprRoot, state);\n        }\n        c = next;\n      }\n      return;\n    }\n  }", "javadoc_start_line": 159, "annotations_start_line": 169, "method_start_line": 170, "end_line": 273}, {"file_path": "/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java", "method_name": "tryRemoveAssignment", "content": "  /**\n   * Determines if any local variables are dead after the instruction {@code n}\n   * and are assigned within the subtree of {@code n}. Removes those assignments\n   * if there are any.\n   *\n   * @param n Target instruction.\n   * @param exprRoot The CFG node where the liveness information in state is\n   *     still correct.\n   * @param state The liveness information at {@code n}.\n   */\n  private void tryRemoveAssignment(NodeTraversal t, Node n, Node exprRoot,\n      FlowState<LiveVariableLattice> state) {\n\n    Node parent = n.getParent();\n\n    if (NodeUtil.isAssignmentOp(n) ||\n        n.getType() == Token.INC || n.getType() == Token.DEC) {\n\n      Node lhs = n.getFirstChild();\n      Node rhs = lhs.getNext();\n\n      // Recurse first. Example: dead_x = dead_y = 1; We try to clean up dead_y\n      // first.\n      if (rhs != null) {\n        tryRemoveAssignment(t, rhs, exprRoot, state);\n        rhs = lhs.getNext();\n      }\n\n      Scope scope = t.getScope();\n      if (!NodeUtil.isName(lhs)) {\n        return; // Not a local variable assignment.\n      }\n      String name = lhs.getString();\n      if (!scope.isDeclared(name, false)) {\n        return;\n      }\n      Var var = scope.getVar(name);\n\n      if (liveness.getEscapedLocals().contains(var)) {\n        return; // Local variable that might be escaped due to closures.\n      }\n\n      // If we have an identity assignment such as a=a, always remove it\n      // regardless of what the liveness results because it\n      // does not change the result afterward.\n      if (rhs != null &&\n          NodeUtil.isName(rhs) &&\n          rhs.getString().equals(var.name) &&\n          NodeUtil.isAssign(n)) {\n        n.removeChild(rhs);\n        n.getParent().replaceChild(n, rhs);\n        compiler.reportCodeChange();\n        return;\n      }\n\n      if (state.getOut().isLive(var)) {\n        return; // Variable not dead.\n      }\n\n      if (state.getIn().isLive(var) &&\n          isVariableStillLiveWithinExpression(n, exprRoot, var.name)) {\n        // The variable is killed here but it is also live before it.\n        // This is possible if we have say:\n        //    if (X = a && a = C) {..} ; .......; a = S;\n        // In this case we are safe to remove \"a = C\" because it is dead.\n        // However if we have:\n        //    if (a = C && X = a) {..} ; .......; a = S;\n        // removing \"a = C\" is NOT correct, although the live set at the node\n        // is exactly the same.\n        // TODO(user): We need more fine grain CFA or we need to keep track\n        // of GEN sets when we recurse here.\n        return;\n      }\n\n      if (NodeUtil.isAssign(n)) {\n        n.removeChild(rhs);\n        n.getParent().replaceChild(n, rhs);\n      } else if (NodeUtil.isAssignmentOp(n)) {\n        n.removeChild(rhs);\n        n.removeChild(lhs);\n        Node op = new Node(NodeUtil.getOpFromAssignmentOp(n), lhs, rhs);\n        parent.replaceChild(n, op);\n      } else if (n.getType() == Token.INC || n.getType() == Token.DEC) {\n        if (NodeUtil.isExpressionNode(parent)) {\n          parent.replaceChild(n,\n              new Node(Token.VOID, Node.newNumber(0).copyInformationFrom(n)));\n        } else if(n.getType() == Token.COMMA && n != parent.getLastChild()) {\n          parent.removeChild(n);\n        } else if (parent.getType() == Token.FOR && !NodeUtil.isForIn(parent) &&\n            NodeUtil.getConditionExpression(parent) != n) {\n          parent.replaceChild(n, new Node(Token.EMPTY));\n        } else {\n          // Cannot replace x = a++ with x = a because that's not valid\n          // when a is not a number.\n          return;\n        }\n      } else {\n        // Not reachable.\n        Preconditions.checkState(false, \"Unknown statement\");\n      }\n\n      compiler.reportCodeChange();\n      return;\n\n    } else {\n      for (Node c = n.getFirstChild(); c != null;) {\n        Node next = c.getNext();\n        if (!ControlFlowGraph.isEnteringNewCfgNode(c)) {\n          tryRemoveAssignment(t, c, exprRoot, state);\n        }\n        c = next;\n      }\n      return;\n    }\n  }", "javadoc_start_line": 159, "annotations_start_line": 169, "method_start_line": 170, "end_line": 273}, {"file_path": "/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java", "method_name": "tryRemoveAssignment", "content": "  /**\n   * Determines if any local variables are dead after the instruction {@code n}\n   * and are assigned within the subtree of {@code n}. Removes those assignments\n   * if there are any.\n   *\n   * @param n Target instruction.\n   * @param exprRoot The CFG node where the liveness information in state is\n   *     still correct.\n   * @param state The liveness information at {@code n}.\n   */\n  private void tryRemoveAssignment(NodeTraversal t, Node n, Node exprRoot,\n      FlowState<LiveVariableLattice> state) {\n\n    Node parent = n.getParent();\n\n    if (NodeUtil.isAssignmentOp(n) ||\n        n.getType() == Token.INC || n.getType() == Token.DEC) {\n\n      Node lhs = n.getFirstChild();\n      Node rhs = lhs.getNext();\n\n      // Recurse first. Example: dead_x = dead_y = 1; We try to clean up dead_y\n      // first.\n      if (rhs != null) {\n        tryRemoveAssignment(t, rhs, exprRoot, state);\n        rhs = lhs.getNext();\n      }\n\n      Scope scope = t.getScope();\n      if (!NodeUtil.isName(lhs)) {\n        return; // Not a local variable assignment.\n      }\n      String name = lhs.getString();\n      if (!scope.isDeclared(name, false)) {\n        return;\n      }\n      Var var = scope.getVar(name);\n\n      if (liveness.getEscapedLocals().contains(var)) {\n        return; // Local variable that might be escaped due to closures.\n      }\n\n      // If we have an identity assignment such as a=a, always remove it\n      // regardless of what the liveness results because it\n      // does not change the result afterward.\n      if (rhs != null &&\n          NodeUtil.isName(rhs) &&\n          rhs.getString().equals(var.name) &&\n          NodeUtil.isAssign(n)) {\n        n.removeChild(rhs);\n        n.getParent().replaceChild(n, rhs);\n        compiler.reportCodeChange();\n        return;\n      }\n\n      if (state.getOut().isLive(var)) {\n        return; // Variable not dead.\n      }\n\n      if (state.getIn().isLive(var) &&\n          isVariableStillLiveWithinExpression(n, exprRoot, var.name)) {\n        // The variable is killed here but it is also live before it.\n        // This is possible if we have say:\n        //    if (X = a && a = C) {..} ; .......; a = S;\n        // In this case we are safe to remove \"a = C\" because it is dead.\n        // However if we have:\n        //    if (a = C && X = a) {..} ; .......; a = S;\n        // removing \"a = C\" is NOT correct, although the live set at the node\n        // is exactly the same.\n        // TODO(user): We need more fine grain CFA or we need to keep track\n        // of GEN sets when we recurse here.\n        return;\n      }\n\n      if (NodeUtil.isAssign(n)) {\n        n.removeChild(rhs);\n        n.getParent().replaceChild(n, rhs);\n      } else if (NodeUtil.isAssignmentOp(n)) {\n        n.removeChild(rhs);\n        n.removeChild(lhs);\n        Node op = new Node(NodeUtil.getOpFromAssignmentOp(n), lhs, rhs);\n        parent.replaceChild(n, op);\n      } else if (n.getType() == Token.INC || n.getType() == Token.DEC) {\n        if (NodeUtil.isExpressionNode(parent)) {\n          parent.replaceChild(n,\n              new Node(Token.VOID, Node.newNumber(0).copyInformationFrom(n)));\n        } else if(n.getType() == Token.COMMA && n != parent.getLastChild()) {\n          parent.removeChild(n);\n        } else if (parent.getType() == Token.FOR && !NodeUtil.isForIn(parent) &&\n            NodeUtil.getConditionExpression(parent) != n) {\n          parent.replaceChild(n, new Node(Token.EMPTY));\n        } else {\n          // Cannot replace x = a++ with x = a because that's not valid\n          // when a is not a number.\n          return;\n        }\n      } else {\n        // Not reachable.\n        Preconditions.checkState(false, \"Unknown statement\");\n      }\n\n      compiler.reportCodeChange();\n      return;\n\n    } else {\n      for (Node c = n.getFirstChild(); c != null;) {\n        Node next = c.getNext();\n        if (!ControlFlowGraph.isEnteringNewCfgNode(c)) {\n          tryRemoveAssignment(t, c, exprRoot, state);\n        }\n        c = next;\n      }\n      return;\n    }\n  }", "javadoc_start_line": 159, "annotations_start_line": 169, "method_start_line": 170, "end_line": 273}, {"file_path": "/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java", "method_name": "tryRemoveAssignment", "content": "  /**\n   * Determines if any local variables are dead after the instruction {@code n}\n   * and are assigned within the subtree of {@code n}. Removes those assignments\n   * if there are any.\n   *\n   * @param n Target instruction.\n   * @param exprRoot The CFG node where the liveness information in state is\n   *     still correct.\n   * @param state The liveness information at {@code n}.\n   */\n  private void tryRemoveAssignment(NodeTraversal t, Node n, Node exprRoot,\n      FlowState<LiveVariableLattice> state) {\n\n    Node parent = n.getParent();\n\n    if (NodeUtil.isAssignmentOp(n) ||\n        n.getType() == Token.INC || n.getType() == Token.DEC) {\n\n      Node lhs = n.getFirstChild();\n      Node rhs = lhs.getNext();\n\n      // Recurse first. Example: dead_x = dead_y = 1; We try to clean up dead_y\n      // first.\n      if (rhs != null) {\n        tryRemoveAssignment(t, rhs, exprRoot, state);\n        rhs = lhs.getNext();\n      }\n\n      Scope scope = t.getScope();\n      if (!NodeUtil.isName(lhs)) {\n        return; // Not a local variable assignment.\n      }\n      String name = lhs.getString();\n      if (!scope.isDeclared(name, false)) {\n        return;\n      }\n      Var var = scope.getVar(name);\n\n      if (liveness.getEscapedLocals().contains(var)) {\n        return; // Local variable that might be escaped due to closures.\n      }\n\n      // If we have an identity assignment such as a=a, always remove it\n      // regardless of what the liveness results because it\n      // does not change the result afterward.\n      if (rhs != null &&\n          NodeUtil.isName(rhs) &&\n          rhs.getString().equals(var.name) &&\n          NodeUtil.isAssign(n)) {\n        n.removeChild(rhs);\n        n.getParent().replaceChild(n, rhs);\n        compiler.reportCodeChange();\n        return;\n      }\n\n      if (state.getOut().isLive(var)) {\n        return; // Variable not dead.\n      }\n\n      if (state.getIn().isLive(var) &&\n          isVariableStillLiveWithinExpression(n, exprRoot, var.name)) {\n        // The variable is killed here but it is also live before it.\n        // This is possible if we have say:\n        //    if (X = a && a = C) {..} ; .......; a = S;\n        // In this case we are safe to remove \"a = C\" because it is dead.\n        // However if we have:\n        //    if (a = C && X = a) {..} ; .......; a = S;\n        // removing \"a = C\" is NOT correct, although the live set at the node\n        // is exactly the same.\n        // TODO(user): We need more fine grain CFA or we need to keep track\n        // of GEN sets when we recurse here.\n        return;\n      }\n\n      if (NodeUtil.isAssign(n)) {\n        n.removeChild(rhs);\n        n.getParent().replaceChild(n, rhs);\n      } else if (NodeUtil.isAssignmentOp(n)) {\n        n.removeChild(rhs);\n        n.removeChild(lhs);\n        Node op = new Node(NodeUtil.getOpFromAssignmentOp(n), lhs, rhs);\n        parent.replaceChild(n, op);\n      } else if (n.getType() == Token.INC || n.getType() == Token.DEC) {\n        if (NodeUtil.isExpressionNode(parent)) {\n          parent.replaceChild(n,\n              new Node(Token.VOID, Node.newNumber(0).copyInformationFrom(n)));\n        } else if(n.getType() == Token.COMMA && n != parent.getLastChild()) {\n          parent.removeChild(n);\n        } else if (parent.getType() == Token.FOR && !NodeUtil.isForIn(parent) &&\n            NodeUtil.getConditionExpression(parent) != n) {\n          parent.replaceChild(n, new Node(Token.EMPTY));\n        } else {\n          // Cannot replace x = a++ with x = a because that's not valid\n          // when a is not a number.\n          return;\n        }\n      } else {\n        // Not reachable.\n        Preconditions.checkState(false, \"Unknown statement\");\n      }\n\n      compiler.reportCodeChange();\n      return;\n\n    } else {\n      for (Node c = n.getFirstChild(); c != null;) {\n        Node next = c.getNext();\n        if (!ControlFlowGraph.isEnteringNewCfgNode(c)) {\n          tryRemoveAssignment(t, c, exprRoot, state);\n        }\n        c = next;\n      }\n      return;\n    }\n  }", "javadoc_start_line": 159, "annotations_start_line": 169, "method_start_line": 170, "end_line": 273}, {"file_path": "/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java", "method_name": "tryRemoveAssignment", "content": "  /**\n   * Determines if any local variables are dead after the instruction {@code n}\n   * and are assigned within the subtree of {@code n}. Removes those assignments\n   * if there are any.\n   *\n   * @param n Target instruction.\n   * @param exprRoot The CFG node where the liveness information in state is\n   *     still correct.\n   * @param state The liveness information at {@code n}.\n   */\n  private void tryRemoveAssignment(NodeTraversal t, Node n, Node exprRoot,\n      FlowState<LiveVariableLattice> state) {\n\n    Node parent = n.getParent();\n\n    if (NodeUtil.isAssignmentOp(n) ||\n        n.getType() == Token.INC || n.getType() == Token.DEC) {\n\n      Node lhs = n.getFirstChild();\n      Node rhs = lhs.getNext();\n\n      // Recurse first. Example: dead_x = dead_y = 1; We try to clean up dead_y\n      // first.\n      if (rhs != null) {\n        tryRemoveAssignment(t, rhs, exprRoot, state);\n        rhs = lhs.getNext();\n      }\n\n      Scope scope = t.getScope();\n      if (!NodeUtil.isName(lhs)) {\n        return; // Not a local variable assignment.\n      }\n      String name = lhs.getString();\n      if (!scope.isDeclared(name, false)) {\n        return;\n      }\n      Var var = scope.getVar(name);\n\n      if (liveness.getEscapedLocals().contains(var)) {\n        return; // Local variable that might be escaped due to closures.\n      }\n\n      // If we have an identity assignment such as a=a, always remove it\n      // regardless of what the liveness results because it\n      // does not change the result afterward.\n      if (rhs != null &&\n          NodeUtil.isName(rhs) &&\n          rhs.getString().equals(var.name) &&\n          NodeUtil.isAssign(n)) {\n        n.removeChild(rhs);\n        n.getParent().replaceChild(n, rhs);\n        compiler.reportCodeChange();\n        return;\n      }\n\n      if (state.getOut().isLive(var)) {\n        return; // Variable not dead.\n      }\n\n      if (state.getIn().isLive(var) &&\n          isVariableStillLiveWithinExpression(n, exprRoot, var.name)) {\n        // The variable is killed here but it is also live before it.\n        // This is possible if we have say:\n        //    if (X = a && a = C) {..} ; .......; a = S;\n        // In this case we are safe to remove \"a = C\" because it is dead.\n        // However if we have:\n        //    if (a = C && X = a) {..} ; .......; a = S;\n        // removing \"a = C\" is NOT correct, although the live set at the node\n        // is exactly the same.\n        // TODO(user): We need more fine grain CFA or we need to keep track\n        // of GEN sets when we recurse here.\n        return;\n      }\n\n      if (NodeUtil.isAssign(n)) {\n        n.removeChild(rhs);\n        n.getParent().replaceChild(n, rhs);\n      } else if (NodeUtil.isAssignmentOp(n)) {\n        n.removeChild(rhs);\n        n.removeChild(lhs);\n        Node op = new Node(NodeUtil.getOpFromAssignmentOp(n), lhs, rhs);\n        parent.replaceChild(n, op);\n      } else if (n.getType() == Token.INC || n.getType() == Token.DEC) {\n        if (NodeUtil.isExpressionNode(parent)) {\n          parent.replaceChild(n,\n              new Node(Token.VOID, Node.newNumber(0).copyInformationFrom(n)));\n        } else if(n.getType() == Token.COMMA && n != parent.getLastChild()) {\n          parent.removeChild(n);\n        } else if (parent.getType() == Token.FOR && !NodeUtil.isForIn(parent) &&\n            NodeUtil.getConditionExpression(parent) != n) {\n          parent.replaceChild(n, new Node(Token.EMPTY));\n        } else {\n          // Cannot replace x = a++ with x = a because that's not valid\n          // when a is not a number.\n          return;\n        }\n      } else {\n        // Not reachable.\n        Preconditions.checkState(false, \"Unknown statement\");\n      }\n\n      compiler.reportCodeChange();\n      return;\n\n    } else {\n      for (Node c = n.getFirstChild(); c != null;) {\n        Node next = c.getNext();\n        if (!ControlFlowGraph.isEnteringNewCfgNode(c)) {\n          tryRemoveAssignment(t, c, exprRoot, state);\n        }\n        c = next;\n      }\n      return;\n    }\n  }", "javadoc_start_line": 159, "annotations_start_line": 169, "method_start_line": 170, "end_line": 273}, {"file_path": "/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java", "method_name": "isVariableStillLiveWithinExpression", "content": "  /**\n   * Given a variable, node n in the tree and a sub-tree denoted by exprRoot as\n   * the root, this function returns true if there exists a read of that\n   * variable before a write to that variable that is on the right side of n.\n   *\n   * For example, suppose the node is x = 1:\n   *\n   * y = 1, x = 1; // false, there is no reads at all.\n   * y = 1, x = 1, print(x) // true, there is a read right of n.\n   * y = 1, x = 1, x = 2, print(x) // false, there is a read right of n but\n   *                               // it is after a write.\n   *\n   * @param n The current node we should look at.\n   * @param exprRoot The node\n   */\n  private boolean isVariableStillLiveWithinExpression(\n      Node n, Node exprRoot, String variable) {\n    while (n != exprRoot) {\n      VariableLiveness state = VariableLiveness.MAYBE_LIVE;\n      switch (n.getParent().getType()) {\n        case Token.OR:\n        case Token.AND:\n          // If the currently node is the first child of\n          // AND/OR, be conservative only consider the READs\n          // of the second operand.\n\n        case Token.HOOK:\n          // If current node is the condition, check each following\n          // branch, otherwise it is a conditional branch and the\n          // other branch can be ignored.\n\n        default:\n          for(Node sibling = n.getNext(); sibling != null;\n              sibling = sibling.getNext()) {\n            if (!ControlFlowGraph.isEnteringNewCfgNode(sibling)) {\n            state = isVariableReadBeforeKill(sibling, variable);\n\n      // If we see a READ or KILL there is no need to continue.\n      if (state == VariableLiveness.READ) {\n        return true;\n      } else if (state == VariableLiveness.KILL) {\n        return false;\n            }\n          }\n      }\n      }\n      n = n.getParent();\n    }\n    return false;\n  }", "javadoc_start_line": 275, "annotations_start_line": 290, "method_start_line": 291, "end_line": 324}, {"file_path": "/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java", "method_name": "isVariableReadBeforeKill", "content": "  /**\n   * Give an expression and a variable. It returns READ, if the first\n   * reference of that variable is a read. It returns KILL, if the first\n   * reference of that variable is an assignment. It returns MAY_LIVE otherwise.\n   */\n  private VariableLiveness isVariableReadBeforeKill(\n      Node n, String variable) {\n\n    if (NodeUtil.isName(n) && variable.equals(n.getString())) {\n      if (NodeUtil.isLhs(n, n.getParent())) {\n        Preconditions.checkState(n.getParent().getType() == Token.ASSIGN);\n        // The expression to which the assignment is made is evaluated before\n        // the RHS is evaluated (normal left to right evaluation) but the KILL\n        // occurs after the RHS is evaluated.\n        Node rhs = n.getNext();\n        VariableLiveness state = isVariableReadBeforeKill(rhs, variable);\n        if (state == VariableLiveness.READ) {\n          return state;\n        }\n        return VariableLiveness.KILL;\n      } else {\n        return VariableLiveness.READ;\n      }\n    }\n\n    switch (n.getType()) {\n      // Conditionals\n      case Token.OR:\n      case Token.AND:\n        // With a AND/OR the first branch always runs, but the second is\n        // may not.\n      case Token.HOOK:\n        return checkHookBranchReadBeforeKill(\n            n.getFirstChild().getNext(), n.getLastChild(), variable);\n\n      default:\n        // Expressions are evaluated left-right, depth first.\n        for (Node child = n.getFirstChild();\n            child != null; child = child.getNext()) {\n          if (!ControlFlowGraph.isEnteringNewCfgNode(child)) { // Not a FUNCTION\n          VariableLiveness state = isVariableReadBeforeKill(child, variable);\n          if (state != VariableLiveness.MAYBE_LIVE) {\n            return state;\n          }\n        }\n      }\n    }\n\n    return VariableLiveness.MAYBE_LIVE;\n  }", "javadoc_start_line": 333, "annotations_start_line": 338, "method_start_line": 339, "end_line": 382}]}, {"failing_test": {"className": " com.google.javascript.jscomp.DeadAssignmentsEliminationTest", "methodName": "testIssue384d", "error": "junit.framework.AssertionFailedError", "message": ""}, "patched_method": {"file_path": "/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java", "method_name": "isVariableStillLiveWithinExpression", "content": "  /**\n   * Given a variable, node n in the tree and a sub-tree denoted by exprRoot as\n   * the root, this function returns true if there exists a read of that\n   * variable before a write to that variable that is on the right side of n.\n   *\n   * For example, suppose the node is x = 1:\n   *\n   * y = 1, x = 1; // false, there is no reads at all.\n   * y = 1, x = 1, print(x) // true, there is a read right of n.\n   * y = 1, x = 1, x = 2, print(x) // false, there is a read right of n but\n   *                               // it is after a write.\n   *\n   * @param n The current node we should look at.\n   * @param exprRoot The node\n   */\n  private boolean isVariableStillLiveWithinExpression(\n      Node n, Node exprRoot, String variable) {\n    while (n != exprRoot) {\n      VariableLiveness state = VariableLiveness.MAYBE_LIVE;\n      switch (n.getParent().getType()) {\n        case Token.OR:\n        case Token.AND:\n          // If the currently node is the first child of\n          // AND/OR, be conservative only consider the READs\n          // of the second operand.\n\n        case Token.HOOK:\n          // If current node is the condition, check each following\n          // branch, otherwise it is a conditional branch and the\n          // other branch can be ignored.\n\n        default:\n          for(Node sibling = n.getNext(); sibling != null;\n              sibling = sibling.getNext()) {\n            if (!ControlFlowGraph.isEnteringNewCfgNode(sibling)) {\n            state = isVariableReadBeforeKill(sibling, variable);\n\n      // If we see a READ or KILL there is no need to continue.\n      if (state == VariableLiveness.READ) {\n        return true;\n      } else if (state == VariableLiveness.KILL) {\n        return false;\n            }\n          }\n      }\n      }\n      n = n.getParent();\n    }\n    return false;\n  }", "javadoc_start_line": 275, "annotations_start_line": 290, "method_start_line": 291, "end_line": 324}, "steps": [{"file_path": "/src/com/google/javascript/jscomp/NodeTraversal.java", "method_name": "traverse", "content": "  /**\n   * Traverses a node recursively.\n   */\n  public static void traverse(\n      AbstractCompiler compiler, Node root, Callback cb) {\n    NodeTraversal t = new NodeTraversal(compiler, cb);\n    t.traverse(root);\n  }", "javadoc_start_line": 416, "annotations_start_line": 419, "method_start_line": 420, "end_line": 423}, {"file_path": "/src/com/google/javascript/jscomp/NodeTraversal.java", "method_name": "traverse", "content": "  /**\n   * Traverses a parse tree recursively.\n   */\n  public void traverse(Node root) {\n    try {\n      sourceName = \"\";\n      curNode = root;\n      pushScope(root);\n      traverseBranch(root, null);\n      popScope();\n    } catch (Exception unexpectedException) {\n      throwUnexpectedException(unexpectedException);\n    }\n  }", "javadoc_start_line": 241, "annotations_start_line": 244, "method_start_line": 244, "end_line": 254}, {"file_path": "/src/com/google/javascript/jscomp/NodeTraversal.java", "method_name": "traverseBranch", "content": "  /**\n   * Traverses a branch.\n   */\n  @SuppressWarnings(\"fallthrough\")\n  private void traverseBranch(Node n, Node parent) {\n    int type = n.getType();\n    if (type == Token.SCRIPT) {\n      sourceName = getSourceName(n);\n    }\n\n    curNode = n;\n    if (!callback.shouldTraverse(this, n, parent)) return;\n\n    switch (type) {\n      case Token.FUNCTION:\n        traverseFunction(n, parent);\n        break;\n\n      default:\n        for (Node child = n.getFirstChild(); child != null; ) {\n          // child could be replaced, in which case our child node\n          // would no longer point to the true next\n          Node next = child.getNext();\n          traverseBranch(child, n);\n          child = next;\n        }\n        break;\n    }\n\n    curNode = n;\n    callback.visit(this, n, parent);\n  }", "javadoc_start_line": 434, "annotations_start_line": 437, "method_start_line": 438, "end_line": 465}, {"file_path": "/src/com/google/javascript/jscomp/NodeTraversal.java", "method_name": "traverseBranch", "content": "  /**\n   * Traverses a branch.\n   */\n  @SuppressWarnings(\"fallthrough\")\n  private void traverseBranch(Node n, Node parent) {\n    int type = n.getType();\n    if (type == Token.SCRIPT) {\n      sourceName = getSourceName(n);\n    }\n\n    curNode = n;\n    if (!callback.shouldTraverse(this, n, parent)) return;\n\n    switch (type) {\n      case Token.FUNCTION:\n        traverseFunction(n, parent);\n        break;\n\n      default:\n        for (Node child = n.getFirstChild(); child != null; ) {\n          // child could be replaced, in which case our child node\n          // would no longer point to the true next\n          Node next = child.getNext();\n          traverseBranch(child, n);\n          child = next;\n        }\n        break;\n    }\n\n    curNode = n;\n    callback.visit(this, n, parent);\n  }", "javadoc_start_line": 434, "annotations_start_line": 437, "method_start_line": 438, "end_line": 465}, {"file_path": "/src/com/google/javascript/jscomp/NodeTraversal.java", "method_name": "traverseBranch", "content": "  /**\n   * Traverses a branch.\n   */\n  @SuppressWarnings(\"fallthrough\")\n  private void traverseBranch(Node n, Node parent) {\n    int type = n.getType();\n    if (type == Token.SCRIPT) {\n      sourceName = getSourceName(n);\n    }\n\n    curNode = n;\n    if (!callback.shouldTraverse(this, n, parent)) return;\n\n    switch (type) {\n      case Token.FUNCTION:\n        traverseFunction(n, parent);\n        break;\n\n      default:\n        for (Node child = n.getFirstChild(); child != null; ) {\n          // child could be replaced, in which case our child node\n          // would no longer point to the true next\n          Node next = child.getNext();\n          traverseBranch(child, n);\n          child = next;\n        }\n        break;\n    }\n\n    curNode = n;\n    callback.visit(this, n, parent);\n  }", "javadoc_start_line": 434, "annotations_start_line": 437, "method_start_line": 438, "end_line": 465}, {"file_path": "/src/com/google/javascript/jscomp/NodeTraversal.java", "method_name": "traverseFunction", "content": "  /**\n   * Traverses a function.\n   */\n  private void traverseFunction(Node n, Node parent) {\n    Preconditions.checkState(n.getChildCount() == 3);\n    Preconditions.checkState(n.getType() == Token.FUNCTION);\n\n    final Node fnName = n.getFirstChild();\n\n    boolean isFunctionExpression = (parent != null)\n        && NodeUtil.isFunctionExpression(n);\n\n    if (!isFunctionExpression) {\n      // Functions declarations are in the scope containing the declaration.\n      traverseBranch(fnName, n);\n    }\n\n    curNode = n;\n    pushScope(n);\n\n    if (isFunctionExpression) {\n      // Function expression names are only accessible within the function\n      // scope.\n      traverseBranch(fnName, n);\n    }\n\n    final Node args = fnName.getNext();\n    final Node body = args.getNext();\n\n    // Args\n    traverseBranch(args, n);\n\n    // Body\n    Preconditions.checkState(body.getNext() == null &&\n            body.getType() == Token.BLOCK);\n    traverseBranch(body, n);\n\n    popScope();\n  }", "javadoc_start_line": 467, "annotations_start_line": 470, "method_start_line": 470, "end_line": 505}, {"file_path": "/src/com/google/javascript/jscomp/NodeTraversal.java", "method_name": "pushScope", "content": "  /** Creates a new scope (e.g. when entering a function). */\n  private void pushScope(Node node) {\n    Preconditions.checkState(curNode != null);\n    scopeRoots.push(node);\n    cfgs.push(null);\n    if (scopeCallback != null) {\n      scopeCallback.enterScope(this);\n    }\n  }", "javadoc_start_line": 521, "annotations_start_line": 522, "method_start_line": 522, "end_line": 529}, {"file_path": "/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java", "method_name": "enterScope", "content": "  public void enterScope(NodeTraversal t) {\n    Scope scope = t.getScope();\n    // Global scope _SHOULD_ work, however, liveness won't finish without\n    // -Xmx1024 in closure. We might have to look at coding conventions for\n    // exported variables as well.\n    if (scope.isGlobal()) {\n      return;\n    }\n\n    // We are not going to do any dead assignment elimination in when there is\n    // at least one inner function because in most browsers, when there is a\n    // closure, ALL the variables are saved (escaped).\n    Node fnBlock = t.getScopeRoot().getLastChild();\n    if (NodeUtil.containsFunction(fnBlock)) {\n      return;\n    }\n\n    // We don't do any dead assignment elimination if there are no assigns\n    // to eliminate. :)\n    if (!NodeUtil.has(fnBlock, matchRemovableAssigns,\n            Predicates.<Node>alwaysTrue())) {\n      return;\n    }\n\n    // Computes liveness information first.\n    ControlFlowGraph<Node> cfg = t.getControlFlowGraph();\n    liveness = new LiveVariablesAnalysis(cfg, scope, compiler);\n    liveness.analyze();\n    tryRemoveDeadAssignments(t, cfg);\n  }", "javadoc_start_line": 70, "annotations_start_line": 69, "method_start_line": 70, "end_line": 99}, {"file_path": "/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java", "method_name": "tryRemoveDeadAssignments", "content": "  /**\n   * Try to remove useless assignments from a control flow graph that has been\n   * annotated with liveness information.\n   *\n   * @param t The node traversal.\n   * @param cfg The control flow graph of the program annotated with liveness\n   *        information.\n   */\n  private void tryRemoveDeadAssignments(NodeTraversal t,\n      ControlFlowGraph<Node> cfg) {\n    Iterable<DiGraphNode<Node, Branch>> nodes = cfg.getDirectedGraphNodes();\n\n    for (DiGraphNode<Node, Branch> cfgNode : nodes) {\n      FlowState<LiveVariableLattice> state =\n          cfgNode.getAnnotation();\n      Node n = cfgNode.getValue();\n      if (n == null) {\n        continue;\n      }\n      switch (n.getType()) {\n        case Token.IF:\n        case Token.WHILE:\n        case Token.DO:\n          tryRemoveAssignment(t, NodeUtil.getConditionExpression(n), state);\n          continue;\n        case Token.FOR:\n          if (!NodeUtil.isForIn(n)) {\n            tryRemoveAssignment(\n                t, NodeUtil.getConditionExpression(n), state);\n          }\n          continue;\n        case Token.SWITCH:\n        case Token.CASE:\n        case Token.RETURN:\n          if (n.hasChildren()) {\n            tryRemoveAssignment(t, n.getFirstChild(), state);\n          }\n          continue;\n        // TODO(user): case Token.VAR: Remove var a=1;a=2;.....\n      }\n\n      tryRemoveAssignment(t, n, state);\n    }\n  }", "javadoc_start_line": 109, "annotations_start_line": 117, "method_start_line": 118, "end_line": 152}, {"file_path": "/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java", "method_name": "tryRemoveAssignment", "content": "  private void tryRemoveAssignment(NodeTraversal t, Node n,\n      FlowState<LiveVariableLattice> state) {\n    tryRemoveAssignment(t, n, n, state);\n  }", "javadoc_start_line": 154, "annotations_start_line": 154, "method_start_line": 155, "end_line": 157}, {"file_path": "/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java", "method_name": "tryRemoveAssignment", "content": "  /**\n   * Determines if any local variables are dead after the instruction {@code n}\n   * and are assigned within the subtree of {@code n}. Removes those assignments\n   * if there are any.\n   *\n   * @param n Target instruction.\n   * @param exprRoot The CFG node where the liveness information in state is\n   *     still correct.\n   * @param state The liveness information at {@code n}.\n   */\n  private void tryRemoveAssignment(NodeTraversal t, Node n, Node exprRoot,\n      FlowState<LiveVariableLattice> state) {\n\n    Node parent = n.getParent();\n\n    if (NodeUtil.isAssignmentOp(n) ||\n        n.getType() == Token.INC || n.getType() == Token.DEC) {\n\n      Node lhs = n.getFirstChild();\n      Node rhs = lhs.getNext();\n\n      // Recurse first. Example: dead_x = dead_y = 1; We try to clean up dead_y\n      // first.\n      if (rhs != null) {\n        tryRemoveAssignment(t, rhs, exprRoot, state);\n        rhs = lhs.getNext();\n      }\n\n      Scope scope = t.getScope();\n      if (!NodeUtil.isName(lhs)) {\n        return; // Not a local variable assignment.\n      }\n      String name = lhs.getString();\n      if (!scope.isDeclared(name, false)) {\n        return;\n      }\n      Var var = scope.getVar(name);\n\n      if (liveness.getEscapedLocals().contains(var)) {\n        return; // Local variable that might be escaped due to closures.\n      }\n\n      // If we have an identity assignment such as a=a, always remove it\n      // regardless of what the liveness results because it\n      // does not change the result afterward.\n      if (rhs != null &&\n          NodeUtil.isName(rhs) &&\n          rhs.getString().equals(var.name) &&\n          NodeUtil.isAssign(n)) {\n        n.removeChild(rhs);\n        n.getParent().replaceChild(n, rhs);\n        compiler.reportCodeChange();\n        return;\n      }\n\n      if (state.getOut().isLive(var)) {\n        return; // Variable not dead.\n      }\n\n      if (state.getIn().isLive(var) &&\n          isVariableStillLiveWithinExpression(n, exprRoot, var.name)) {\n        // The variable is killed here but it is also live before it.\n        // This is possible if we have say:\n        //    if (X = a && a = C) {..} ; .......; a = S;\n        // In this case we are safe to remove \"a = C\" because it is dead.\n        // However if we have:\n        //    if (a = C && X = a) {..} ; .......; a = S;\n        // removing \"a = C\" is NOT correct, although the live set at the node\n        // is exactly the same.\n        // TODO(user): We need more fine grain CFA or we need to keep track\n        // of GEN sets when we recurse here.\n        return;\n      }\n\n      if (NodeUtil.isAssign(n)) {\n        n.removeChild(rhs);\n        n.getParent().replaceChild(n, rhs);\n      } else if (NodeUtil.isAssignmentOp(n)) {\n        n.removeChild(rhs);\n        n.removeChild(lhs);\n        Node op = new Node(NodeUtil.getOpFromAssignmentOp(n), lhs, rhs);\n        parent.replaceChild(n, op);\n      } else if (n.getType() == Token.INC || n.getType() == Token.DEC) {\n        if (NodeUtil.isExpressionNode(parent)) {\n          parent.replaceChild(n,\n              new Node(Token.VOID, Node.newNumber(0).copyInformationFrom(n)));\n        } else if(n.getType() == Token.COMMA && n != parent.getLastChild()) {\n          parent.removeChild(n);\n        } else if (parent.getType() == Token.FOR && !NodeUtil.isForIn(parent) &&\n            NodeUtil.getConditionExpression(parent) != n) {\n          parent.replaceChild(n, new Node(Token.EMPTY));\n        } else {\n          // Cannot replace x = a++ with x = a because that's not valid\n          // when a is not a number.\n          return;\n        }\n      } else {\n        // Not reachable.\n        Preconditions.checkState(false, \"Unknown statement\");\n      }\n\n      compiler.reportCodeChange();\n      return;\n\n    } else {\n      for (Node c = n.getFirstChild(); c != null;) {\n        Node next = c.getNext();\n        if (!ControlFlowGraph.isEnteringNewCfgNode(c)) {\n          tryRemoveAssignment(t, c, exprRoot, state);\n        }\n        c = next;\n      }\n      return;\n    }\n  }", "javadoc_start_line": 159, "annotations_start_line": 169, "method_start_line": 170, "end_line": 273}, {"file_path": "/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java", "method_name": "tryRemoveAssignment", "content": "  /**\n   * Determines if any local variables are dead after the instruction {@code n}\n   * and are assigned within the subtree of {@code n}. Removes those assignments\n   * if there are any.\n   *\n   * @param n Target instruction.\n   * @param exprRoot The CFG node where the liveness information in state is\n   *     still correct.\n   * @param state The liveness information at {@code n}.\n   */\n  private void tryRemoveAssignment(NodeTraversal t, Node n, Node exprRoot,\n      FlowState<LiveVariableLattice> state) {\n\n    Node parent = n.getParent();\n\n    if (NodeUtil.isAssignmentOp(n) ||\n        n.getType() == Token.INC || n.getType() == Token.DEC) {\n\n      Node lhs = n.getFirstChild();\n      Node rhs = lhs.getNext();\n\n      // Recurse first. Example: dead_x = dead_y = 1; We try to clean up dead_y\n      // first.\n      if (rhs != null) {\n        tryRemoveAssignment(t, rhs, exprRoot, state);\n        rhs = lhs.getNext();\n      }\n\n      Scope scope = t.getScope();\n      if (!NodeUtil.isName(lhs)) {\n        return; // Not a local variable assignment.\n      }\n      String name = lhs.getString();\n      if (!scope.isDeclared(name, false)) {\n        return;\n      }\n      Var var = scope.getVar(name);\n\n      if (liveness.getEscapedLocals().contains(var)) {\n        return; // Local variable that might be escaped due to closures.\n      }\n\n      // If we have an identity assignment such as a=a, always remove it\n      // regardless of what the liveness results because it\n      // does not change the result afterward.\n      if (rhs != null &&\n          NodeUtil.isName(rhs) &&\n          rhs.getString().equals(var.name) &&\n          NodeUtil.isAssign(n)) {\n        n.removeChild(rhs);\n        n.getParent().replaceChild(n, rhs);\n        compiler.reportCodeChange();\n        return;\n      }\n\n      if (state.getOut().isLive(var)) {\n        return; // Variable not dead.\n      }\n\n      if (state.getIn().isLive(var) &&\n          isVariableStillLiveWithinExpression(n, exprRoot, var.name)) {\n        // The variable is killed here but it is also live before it.\n        // This is possible if we have say:\n        //    if (X = a && a = C) {..} ; .......; a = S;\n        // In this case we are safe to remove \"a = C\" because it is dead.\n        // However if we have:\n        //    if (a = C && X = a) {..} ; .......; a = S;\n        // removing \"a = C\" is NOT correct, although the live set at the node\n        // is exactly the same.\n        // TODO(user): We need more fine grain CFA or we need to keep track\n        // of GEN sets when we recurse here.\n        return;\n      }\n\n      if (NodeUtil.isAssign(n)) {\n        n.removeChild(rhs);\n        n.getParent().replaceChild(n, rhs);\n      } else if (NodeUtil.isAssignmentOp(n)) {\n        n.removeChild(rhs);\n        n.removeChild(lhs);\n        Node op = new Node(NodeUtil.getOpFromAssignmentOp(n), lhs, rhs);\n        parent.replaceChild(n, op);\n      } else if (n.getType() == Token.INC || n.getType() == Token.DEC) {\n        if (NodeUtil.isExpressionNode(parent)) {\n          parent.replaceChild(n,\n              new Node(Token.VOID, Node.newNumber(0).copyInformationFrom(n)));\n        } else if(n.getType() == Token.COMMA && n != parent.getLastChild()) {\n          parent.removeChild(n);\n        } else if (parent.getType() == Token.FOR && !NodeUtil.isForIn(parent) &&\n            NodeUtil.getConditionExpression(parent) != n) {\n          parent.replaceChild(n, new Node(Token.EMPTY));\n        } else {\n          // Cannot replace x = a++ with x = a because that's not valid\n          // when a is not a number.\n          return;\n        }\n      } else {\n        // Not reachable.\n        Preconditions.checkState(false, \"Unknown statement\");\n      }\n\n      compiler.reportCodeChange();\n      return;\n\n    } else {\n      for (Node c = n.getFirstChild(); c != null;) {\n        Node next = c.getNext();\n        if (!ControlFlowGraph.isEnteringNewCfgNode(c)) {\n          tryRemoveAssignment(t, c, exprRoot, state);\n        }\n        c = next;\n      }\n      return;\n    }\n  }", "javadoc_start_line": 159, "annotations_start_line": 169, "method_start_line": 170, "end_line": 273}, {"file_path": "/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java", "method_name": "tryRemoveAssignment", "content": "  /**\n   * Determines if any local variables are dead after the instruction {@code n}\n   * and are assigned within the subtree of {@code n}. Removes those assignments\n   * if there are any.\n   *\n   * @param n Target instruction.\n   * @param exprRoot The CFG node where the liveness information in state is\n   *     still correct.\n   * @param state The liveness information at {@code n}.\n   */\n  private void tryRemoveAssignment(NodeTraversal t, Node n, Node exprRoot,\n      FlowState<LiveVariableLattice> state) {\n\n    Node parent = n.getParent();\n\n    if (NodeUtil.isAssignmentOp(n) ||\n        n.getType() == Token.INC || n.getType() == Token.DEC) {\n\n      Node lhs = n.getFirstChild();\n      Node rhs = lhs.getNext();\n\n      // Recurse first. Example: dead_x = dead_y = 1; We try to clean up dead_y\n      // first.\n      if (rhs != null) {\n        tryRemoveAssignment(t, rhs, exprRoot, state);\n        rhs = lhs.getNext();\n      }\n\n      Scope scope = t.getScope();\n      if (!NodeUtil.isName(lhs)) {\n        return; // Not a local variable assignment.\n      }\n      String name = lhs.getString();\n      if (!scope.isDeclared(name, false)) {\n        return;\n      }\n      Var var = scope.getVar(name);\n\n      if (liveness.getEscapedLocals().contains(var)) {\n        return; // Local variable that might be escaped due to closures.\n      }\n\n      // If we have an identity assignment such as a=a, always remove it\n      // regardless of what the liveness results because it\n      // does not change the result afterward.\n      if (rhs != null &&\n          NodeUtil.isName(rhs) &&\n          rhs.getString().equals(var.name) &&\n          NodeUtil.isAssign(n)) {\n        n.removeChild(rhs);\n        n.getParent().replaceChild(n, rhs);\n        compiler.reportCodeChange();\n        return;\n      }\n\n      if (state.getOut().isLive(var)) {\n        return; // Variable not dead.\n      }\n\n      if (state.getIn().isLive(var) &&\n          isVariableStillLiveWithinExpression(n, exprRoot, var.name)) {\n        // The variable is killed here but it is also live before it.\n        // This is possible if we have say:\n        //    if (X = a && a = C) {..} ; .......; a = S;\n        // In this case we are safe to remove \"a = C\" because it is dead.\n        // However if we have:\n        //    if (a = C && X = a) {..} ; .......; a = S;\n        // removing \"a = C\" is NOT correct, although the live set at the node\n        // is exactly the same.\n        // TODO(user): We need more fine grain CFA or we need to keep track\n        // of GEN sets when we recurse here.\n        return;\n      }\n\n      if (NodeUtil.isAssign(n)) {\n        n.removeChild(rhs);\n        n.getParent().replaceChild(n, rhs);\n      } else if (NodeUtil.isAssignmentOp(n)) {\n        n.removeChild(rhs);\n        n.removeChild(lhs);\n        Node op = new Node(NodeUtil.getOpFromAssignmentOp(n), lhs, rhs);\n        parent.replaceChild(n, op);\n      } else if (n.getType() == Token.INC || n.getType() == Token.DEC) {\n        if (NodeUtil.isExpressionNode(parent)) {\n          parent.replaceChild(n,\n              new Node(Token.VOID, Node.newNumber(0).copyInformationFrom(n)));\n        } else if(n.getType() == Token.COMMA && n != parent.getLastChild()) {\n          parent.removeChild(n);\n        } else if (parent.getType() == Token.FOR && !NodeUtil.isForIn(parent) &&\n            NodeUtil.getConditionExpression(parent) != n) {\n          parent.replaceChild(n, new Node(Token.EMPTY));\n        } else {\n          // Cannot replace x = a++ with x = a because that's not valid\n          // when a is not a number.\n          return;\n        }\n      } else {\n        // Not reachable.\n        Preconditions.checkState(false, \"Unknown statement\");\n      }\n\n      compiler.reportCodeChange();\n      return;\n\n    } else {\n      for (Node c = n.getFirstChild(); c != null;) {\n        Node next = c.getNext();\n        if (!ControlFlowGraph.isEnteringNewCfgNode(c)) {\n          tryRemoveAssignment(t, c, exprRoot, state);\n        }\n        c = next;\n      }\n      return;\n    }\n  }", "javadoc_start_line": 159, "annotations_start_line": 169, "method_start_line": 170, "end_line": 273}, {"file_path": "/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java", "method_name": "tryRemoveAssignment", "content": "  /**\n   * Determines if any local variables are dead after the instruction {@code n}\n   * and are assigned within the subtree of {@code n}. Removes those assignments\n   * if there are any.\n   *\n   * @param n Target instruction.\n   * @param exprRoot The CFG node where the liveness information in state is\n   *     still correct.\n   * @param state The liveness information at {@code n}.\n   */\n  private void tryRemoveAssignment(NodeTraversal t, Node n, Node exprRoot,\n      FlowState<LiveVariableLattice> state) {\n\n    Node parent = n.getParent();\n\n    if (NodeUtil.isAssignmentOp(n) ||\n        n.getType() == Token.INC || n.getType() == Token.DEC) {\n\n      Node lhs = n.getFirstChild();\n      Node rhs = lhs.getNext();\n\n      // Recurse first. Example: dead_x = dead_y = 1; We try to clean up dead_y\n      // first.\n      if (rhs != null) {\n        tryRemoveAssignment(t, rhs, exprRoot, state);\n        rhs = lhs.getNext();\n      }\n\n      Scope scope = t.getScope();\n      if (!NodeUtil.isName(lhs)) {\n        return; // Not a local variable assignment.\n      }\n      String name = lhs.getString();\n      if (!scope.isDeclared(name, false)) {\n        return;\n      }\n      Var var = scope.getVar(name);\n\n      if (liveness.getEscapedLocals().contains(var)) {\n        return; // Local variable that might be escaped due to closures.\n      }\n\n      // If we have an identity assignment such as a=a, always remove it\n      // regardless of what the liveness results because it\n      // does not change the result afterward.\n      if (rhs != null &&\n          NodeUtil.isName(rhs) &&\n          rhs.getString().equals(var.name) &&\n          NodeUtil.isAssign(n)) {\n        n.removeChild(rhs);\n        n.getParent().replaceChild(n, rhs);\n        compiler.reportCodeChange();\n        return;\n      }\n\n      if (state.getOut().isLive(var)) {\n        return; // Variable not dead.\n      }\n\n      if (state.getIn().isLive(var) &&\n          isVariableStillLiveWithinExpression(n, exprRoot, var.name)) {\n        // The variable is killed here but it is also live before it.\n        // This is possible if we have say:\n        //    if (X = a && a = C) {..} ; .......; a = S;\n        // In this case we are safe to remove \"a = C\" because it is dead.\n        // However if we have:\n        //    if (a = C && X = a) {..} ; .......; a = S;\n        // removing \"a = C\" is NOT correct, although the live set at the node\n        // is exactly the same.\n        // TODO(user): We need more fine grain CFA or we need to keep track\n        // of GEN sets when we recurse here.\n        return;\n      }\n\n      if (NodeUtil.isAssign(n)) {\n        n.removeChild(rhs);\n        n.getParent().replaceChild(n, rhs);\n      } else if (NodeUtil.isAssignmentOp(n)) {\n        n.removeChild(rhs);\n        n.removeChild(lhs);\n        Node op = new Node(NodeUtil.getOpFromAssignmentOp(n), lhs, rhs);\n        parent.replaceChild(n, op);\n      } else if (n.getType() == Token.INC || n.getType() == Token.DEC) {\n        if (NodeUtil.isExpressionNode(parent)) {\n          parent.replaceChild(n,\n              new Node(Token.VOID, Node.newNumber(0).copyInformationFrom(n)));\n        } else if(n.getType() == Token.COMMA && n != parent.getLastChild()) {\n          parent.removeChild(n);\n        } else if (parent.getType() == Token.FOR && !NodeUtil.isForIn(parent) &&\n            NodeUtil.getConditionExpression(parent) != n) {\n          parent.replaceChild(n, new Node(Token.EMPTY));\n        } else {\n          // Cannot replace x = a++ with x = a because that's not valid\n          // when a is not a number.\n          return;\n        }\n      } else {\n        // Not reachable.\n        Preconditions.checkState(false, \"Unknown statement\");\n      }\n\n      compiler.reportCodeChange();\n      return;\n\n    } else {\n      for (Node c = n.getFirstChild(); c != null;) {\n        Node next = c.getNext();\n        if (!ControlFlowGraph.isEnteringNewCfgNode(c)) {\n          tryRemoveAssignment(t, c, exprRoot, state);\n        }\n        c = next;\n      }\n      return;\n    }\n  }", "javadoc_start_line": 159, "annotations_start_line": 169, "method_start_line": 170, "end_line": 273}, {"file_path": "/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java", "method_name": "tryRemoveAssignment", "content": "  /**\n   * Determines if any local variables are dead after the instruction {@code n}\n   * and are assigned within the subtree of {@code n}. Removes those assignments\n   * if there are any.\n   *\n   * @param n Target instruction.\n   * @param exprRoot The CFG node where the liveness information in state is\n   *     still correct.\n   * @param state The liveness information at {@code n}.\n   */\n  private void tryRemoveAssignment(NodeTraversal t, Node n, Node exprRoot,\n      FlowState<LiveVariableLattice> state) {\n\n    Node parent = n.getParent();\n\n    if (NodeUtil.isAssignmentOp(n) ||\n        n.getType() == Token.INC || n.getType() == Token.DEC) {\n\n      Node lhs = n.getFirstChild();\n      Node rhs = lhs.getNext();\n\n      // Recurse first. Example: dead_x = dead_y = 1; We try to clean up dead_y\n      // first.\n      if (rhs != null) {\n        tryRemoveAssignment(t, rhs, exprRoot, state);\n        rhs = lhs.getNext();\n      }\n\n      Scope scope = t.getScope();\n      if (!NodeUtil.isName(lhs)) {\n        return; // Not a local variable assignment.\n      }\n      String name = lhs.getString();\n      if (!scope.isDeclared(name, false)) {\n        return;\n      }\n      Var var = scope.getVar(name);\n\n      if (liveness.getEscapedLocals().contains(var)) {\n        return; // Local variable that might be escaped due to closures.\n      }\n\n      // If we have an identity assignment such as a=a, always remove it\n      // regardless of what the liveness results because it\n      // does not change the result afterward.\n      if (rhs != null &&\n          NodeUtil.isName(rhs) &&\n          rhs.getString().equals(var.name) &&\n          NodeUtil.isAssign(n)) {\n        n.removeChild(rhs);\n        n.getParent().replaceChild(n, rhs);\n        compiler.reportCodeChange();\n        return;\n      }\n\n      if (state.getOut().isLive(var)) {\n        return; // Variable not dead.\n      }\n\n      if (state.getIn().isLive(var) &&\n          isVariableStillLiveWithinExpression(n, exprRoot, var.name)) {\n        // The variable is killed here but it is also live before it.\n        // This is possible if we have say:\n        //    if (X = a && a = C) {..} ; .......; a = S;\n        // In this case we are safe to remove \"a = C\" because it is dead.\n        // However if we have:\n        //    if (a = C && X = a) {..} ; .......; a = S;\n        // removing \"a = C\" is NOT correct, although the live set at the node\n        // is exactly the same.\n        // TODO(user): We need more fine grain CFA or we need to keep track\n        // of GEN sets when we recurse here.\n        return;\n      }\n\n      if (NodeUtil.isAssign(n)) {\n        n.removeChild(rhs);\n        n.getParent().replaceChild(n, rhs);\n      } else if (NodeUtil.isAssignmentOp(n)) {\n        n.removeChild(rhs);\n        n.removeChild(lhs);\n        Node op = new Node(NodeUtil.getOpFromAssignmentOp(n), lhs, rhs);\n        parent.replaceChild(n, op);\n      } else if (n.getType() == Token.INC || n.getType() == Token.DEC) {\n        if (NodeUtil.isExpressionNode(parent)) {\n          parent.replaceChild(n,\n              new Node(Token.VOID, Node.newNumber(0).copyInformationFrom(n)));\n        } else if(n.getType() == Token.COMMA && n != parent.getLastChild()) {\n          parent.removeChild(n);\n        } else if (parent.getType() == Token.FOR && !NodeUtil.isForIn(parent) &&\n            NodeUtil.getConditionExpression(parent) != n) {\n          parent.replaceChild(n, new Node(Token.EMPTY));\n        } else {\n          // Cannot replace x = a++ with x = a because that's not valid\n          // when a is not a number.\n          return;\n        }\n      } else {\n        // Not reachable.\n        Preconditions.checkState(false, \"Unknown statement\");\n      }\n\n      compiler.reportCodeChange();\n      return;\n\n    } else {\n      for (Node c = n.getFirstChild(); c != null;) {\n        Node next = c.getNext();\n        if (!ControlFlowGraph.isEnteringNewCfgNode(c)) {\n          tryRemoveAssignment(t, c, exprRoot, state);\n        }\n        c = next;\n      }\n      return;\n    }\n  }", "javadoc_start_line": 159, "annotations_start_line": 169, "method_start_line": 170, "end_line": 273}, {"file_path": "/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java", "method_name": "isVariableStillLiveWithinExpression", "content": "  /**\n   * Given a variable, node n in the tree and a sub-tree denoted by exprRoot as\n   * the root, this function returns true if there exists a read of that\n   * variable before a write to that variable that is on the right side of n.\n   *\n   * For example, suppose the node is x = 1:\n   *\n   * y = 1, x = 1; // false, there is no reads at all.\n   * y = 1, x = 1, print(x) // true, there is a read right of n.\n   * y = 1, x = 1, x = 2, print(x) // false, there is a read right of n but\n   *                               // it is after a write.\n   *\n   * @param n The current node we should look at.\n   * @param exprRoot The node\n   */\n  private boolean isVariableStillLiveWithinExpression(\n      Node n, Node exprRoot, String variable) {\n    while (n != exprRoot) {\n      VariableLiveness state = VariableLiveness.MAYBE_LIVE;\n      switch (n.getParent().getType()) {\n        case Token.OR:\n        case Token.AND:\n          // If the currently node is the first child of\n          // AND/OR, be conservative only consider the READs\n          // of the second operand.\n\n        case Token.HOOK:\n          // If current node is the condition, check each following\n          // branch, otherwise it is a conditional branch and the\n          // other branch can be ignored.\n\n        default:\n          for(Node sibling = n.getNext(); sibling != null;\n              sibling = sibling.getNext()) {\n            if (!ControlFlowGraph.isEnteringNewCfgNode(sibling)) {\n            state = isVariableReadBeforeKill(sibling, variable);\n\n      // If we see a READ or KILL there is no need to continue.\n      if (state == VariableLiveness.READ) {\n        return true;\n      } else if (state == VariableLiveness.KILL) {\n        return false;\n            }\n          }\n      }\n      }\n      n = n.getParent();\n    }\n    return false;\n  }", "javadoc_start_line": 275, "annotations_start_line": 290, "method_start_line": 291, "end_line": 324}]}], "project": {"name": "Closure", "version": 76}}