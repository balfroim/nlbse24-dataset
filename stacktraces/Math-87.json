{"tours": [{"failing_test": {"className": " org.apache.commons.math.optimization.linear.SimplexSolverTest", "methodName": "testSingleVariableAndConstraint", "error": "junit.framework.AssertionFailedError", "message": "expected:<10.0> but was:<0.0>"}, "patched_method": {"file_path": "/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java", "method_name": "getBasicRow", "content": "    /**\n     * Checks whether the given column is basic.\n     * @param col index of the column to check\n     * @return the row that the variable is basic in.  null if the column is not basic\n     */\n    private Integer getBasicRow(final int col) {\n        Integer row = null;\n        for (int i = getNumObjectiveFunctions(); i < getHeight(); i++) {\n            if (!MathUtils.equals(getEntry(i, col), 0.0, epsilon)) {\n                if (row == null) {\n                row = i;\n                } else {\n                return null;\n                }\n            }\n        }\n        return row;\n    }", "javadoc_start_line": 267, "annotations_start_line": 272, "method_start_line": 272, "end_line": 284}, "steps": [{"file_path": "/src/test/org/apache/commons/math/optimization/linear/SimplexSolverTest.java", "method_name": "testSingleVariableAndConstraint", "content": "    public void testSingleVariableAndConstraint() throws OptimizationException {\n        LinearObjectiveFunction f = new LinearObjectiveFunction(new double[] { 3 }, 0);\n        Collection<LinearConstraint> constraints = new ArrayList<LinearConstraint>();\n        constraints.add(new LinearConstraint(new double[] { 1 }, Relationship.LEQ, 10));\n\n        SimplexSolver solver = new SimplexSolver();\n        RealPointValuePair solution = solver.optimize(f, constraints, GoalType.MAXIMIZE, false);\n        assertEquals(10.0, solution.getPoint()[0], 0.0);\n        assertEquals(30.0, solution.getValue(), 0.0);\n    }", "javadoc_start_line": 68, "annotations_start_line": 67, "method_start_line": 68, "end_line": 77}, {"file_path": "/src/java/org/apache/commons/math/optimization/linear/AbstractLinearOptimizer.java", "method_name": "optimize", "content": "    /** {@inheritDoc} */\n    public RealPointValuePair optimize(final LinearObjectiveFunction f,\n                                       final Collection<LinearConstraint> constraints,\n                                       final GoalType goalType, final boolean restrictToNonNegative)\n         throws OptimizationException {\n\n        // store linear problem characteristics\n        this.f                     = f;\n        this.constraints           = constraints;\n        this.goalType              = goalType;\n        this.restrictToNonNegative = restrictToNonNegative;\n\n        iterations = 0;\n\n        // solve the problem\n        return doOptimize();\n\n    }", "javadoc_start_line": 93, "annotations_start_line": 94, "method_start_line": 97, "end_line": 110}, {"file_path": "/src/java/org/apache/commons/math/optimization/linear/SimplexSolver.java", "method_name": "doOptimize", "content": "    /** {@inheritDoc} */\n    @Override\n    public RealPointValuePair doOptimize()\n        throws OptimizationException {\n        final SimplexTableau tableau =\n            new SimplexTableau(f, constraints, goalType, restrictToNonNegative, epsilon);\n        solvePhase1(tableau);\n        tableau.discardArtificialVariables();\n        while (!isOptimal(tableau)) {\n            doIteration(tableau);\n        }\n        return tableau.getSolution();\n    }", "javadoc_start_line": 181, "annotations_start_line": 182, "method_start_line": 184, "end_line": 193}, {"file_path": "/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java", "method_name": "getSolution", "content": "    /**\n     * Get the current solution.\n     * <p>\n     * {@link #solve} should be called first for this to be the optimal solution.\n     * </p>\n     * @return current solution\n     */\n    protected RealPointValuePair getSolution() {\n        double[] coefficients = new double[getOriginalNumDecisionVariables()];\n        Integer basicRow =\n            getBasicRow(getNumObjectiveFunctions() + getOriginalNumDecisionVariables());\n        double mostNegative = basicRow == null ? 0 : getEntry(basicRow, getRhsOffset());\n        Set<Integer> basicRows = new HashSet<Integer>();\n        for (int i = 0; i < coefficients.length; i++) {\n            basicRow = getBasicRow(getNumObjectiveFunctions() + i);\n            if (basicRows.contains(basicRow)) {\n                // if multiple variables can take a given value \n                // then we choose the first and set the rest equal to 0\n                coefficients[i] = 0;\n            } else {\n                basicRows.add(basicRow);\n                coefficients[i] =\n                    (basicRow == null ? 0 : getEntry(basicRow, getRhsOffset())) -\n                    (restrictToNonNegative ? 0 : mostNegative);\n            }\n        }\n        return new RealPointValuePair(coefficients, f.getValue(coefficients));\n    }", "javadoc_start_line": 317, "annotations_start_line": 324, "method_start_line": 324, "end_line": 344}, {"file_path": "/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java", "method_name": "getBasicRow", "content": "    /**\n     * Checks whether the given column is basic.\n     * @param col index of the column to check\n     * @return the row that the variable is basic in.  null if the column is not basic\n     */\n    private Integer getBasicRow(final int col) {\n        Integer row = null;\n        for (int i = getNumObjectiveFunctions(); i < getHeight(); i++) {\n            if (!MathUtils.equals(getEntry(i, col), 0.0, epsilon)) {\n                if (row == null) {\n                row = i;\n                } else {\n                return null;\n                }\n            }\n        }\n        return row;\n    }", "javadoc_start_line": 267, "annotations_start_line": 272, "method_start_line": 272, "end_line": 284}]}], "project": {"name": "Math", "version": 87}}