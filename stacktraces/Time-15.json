{"tours": [{"failing_test": {"className": " org.joda.time.field.TestFieldUtils", "methodName": "testSafeMultiplyLongInt", "error": "junit.framework.AssertionFailedError", "message": ""}, "patched_method": {"file_path": "/src/main/java/org/joda/time/field/FieldUtils.java", "method_name": "safeMultiply", "content": "    /**\n     * Multiply two values throwing an exception if overflow occurs.\n     * \n     * @param val1  the first value\n     * @param val2  the second value\n     * @return the new total\n     * @throws ArithmeticException if the value is too big or too small\n     * @since 1.2\n     */\n    public static long safeMultiply(long val1, int val2) {\n        switch (val2) {\n            case -1:\n                return -val1;\n            case 0:\n                return 0L;\n            case 1:\n                return val1;\n        }\n        long total = val1 * val2;\n        if (total / val2 != val1) {\n          throw new ArithmeticException(\"Multiplication overflows a long: \" + val1 + \" * \" + val2);\n        }\n        return total;\n    }", "javadoc_start_line": 126, "annotations_start_line": 135, "method_start_line": 135, "end_line": 149}, "steps": [{"file_path": "/src/test/java/org/joda/time/field/TestFieldUtils.java", "method_name": "testSafeMultiplyLongInt", "content": "    public void testSafeMultiplyLongInt() {\n        assertEquals(0L, FieldUtils.safeMultiply(0L, 0));\n        \n        assertEquals(1L, FieldUtils.safeMultiply(1L, 1));\n        assertEquals(3L, FieldUtils.safeMultiply(1L, 3));\n        assertEquals(3L, FieldUtils.safeMultiply(3L, 1));\n        \n        assertEquals(6L, FieldUtils.safeMultiply(2L, 3));\n        assertEquals(-6L, FieldUtils.safeMultiply(2L, -3));\n        assertEquals(-6L, FieldUtils.safeMultiply(-2L, 3));\n        assertEquals(6L, FieldUtils.safeMultiply(-2L, -3));\n        \n        assertEquals(-1L * Integer.MIN_VALUE, FieldUtils.safeMultiply(-1L, Integer.MIN_VALUE));\n        \n        assertEquals(Long.MAX_VALUE, FieldUtils.safeMultiply(Long.MAX_VALUE, 1));\n        assertEquals(Long.MIN_VALUE, FieldUtils.safeMultiply(Long.MIN_VALUE, 1));\n        assertEquals(-Long.MAX_VALUE, FieldUtils.safeMultiply(Long.MAX_VALUE, -1));\n        \n        try {\n            FieldUtils.safeMultiply(Long.MIN_VALUE, -1);\n            fail();\n        } catch (ArithmeticException e) {\n        }\n        \n        try {\n            FieldUtils.safeMultiply(Long.MIN_VALUE, 100);\n            fail();\n        } catch (ArithmeticException e) {\n        }\n        \n        try {\n            FieldUtils.safeMultiply(Long.MIN_VALUE, Integer.MAX_VALUE);\n            fail();\n        } catch (ArithmeticException e) {\n        }\n        \n        try {\n            FieldUtils.safeMultiply(Long.MAX_VALUE, Integer.MIN_VALUE);\n            fail();\n        } catch (ArithmeticException e) {\n        }\n    }", "javadoc_start_line": 241, "annotations_start_line": 241, "method_start_line": 241, "end_line": 282}, {"file_path": "/src/main/java/org/joda/time/field/FieldUtils.java", "method_name": "safeMultiply", "content": "    /**\n     * Multiply two values throwing an exception if overflow occurs.\n     * \n     * @param val1  the first value\n     * @param val2  the second value\n     * @return the new total\n     * @throws ArithmeticException if the value is too big or too small\n     * @since 1.2\n     */\n    public static long safeMultiply(long val1, int val2) {\n        switch (val2) {\n            case -1:\n                return -val1;\n            case 0:\n                return 0L;\n            case 1:\n                return val1;\n        }\n        long total = val1 * val2;\n        if (total / val2 != val1) {\n          throw new ArithmeticException(\"Multiplication overflows a long: \" + val1 + \" * \" + val2);\n        }\n        return total;\n    }", "javadoc_start_line": 126, "annotations_start_line": 135, "method_start_line": 135, "end_line": 149}]}], "project": {"name": "Time", "version": 15}}