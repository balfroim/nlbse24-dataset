{"tours": [{"failing_test": {"className": " org.apache.commons.lang3.text.translate.NumericEntityUnescaperTest", "methodName": "testSupplementaryUnescaping", "error": "junit.framework.ComparisonFailure", "message": "Failed to unescape numeric entities supplementary characters expected:<[\ud803\udc22]> but was:<[\u0c22]>"}, "patched_method": {"file_path": "/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java", "method_name": "translate", "content": "    /**\n     * {@inheritDoc}\n     */\n    @Override\n    public int translate(CharSequence input, int index, Writer out) throws IOException {\n        // TODO: Protect from ArrayIndexOutOfBounds\n        if(input.charAt(index) == '&' && input.charAt(index + 1) == '#') {\n            int start = index + 2;\n            boolean isHex = false;\n\n            char firstChar = input.charAt(start);\n            if(firstChar == 'x' || firstChar == 'X') {\n                start++;\n                isHex = true;\n            }\n\n            int end = start;\n            while(input.charAt(end) != ';') {\n                end++;\n            }\n\n            int entityValue;\n            try {\n                if(isHex) {\n                    entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 16);\n                } else {\n                    entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 10);\n                }\n            } catch(NumberFormatException nfe) {\n                return 0;\n            }\n\n                out.write(entityValue);\n            return 2 + (end - start) + (isHex ? 1 : 0) + 1;\n        }\n        return 0;\n    }", "javadoc_start_line": 31, "annotations_start_line": 34, "method_start_line": 35, "end_line": 67}, "steps": [{"file_path": "/src/test/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaperTest.java", "method_name": "testSupplementaryUnescaping", "content": "    public void testSupplementaryUnescaping() {\n        NumericEntityUnescaper neu = new NumericEntityUnescaper();\n        String input = \"&#68642;\";\n        String expected = \"\\uD803\\uDC22\";\n\n        String result = neu.translate(input);\n        assertEquals(\"Failed to unescape numeric entities supplementary characters\", expected, result);\n    }", "javadoc_start_line": 27, "annotations_start_line": 27, "method_start_line": 27, "end_line": 34}, {"file_path": "/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java", "method_name": "translate", "content": "    /**\n     * Helper for non-Writer usage. \n     * @param input CharSequence to be translated\n     * @return String output of translation\n     */\n    public final String translate(CharSequence input) {\n        if (input == null) {\n            return null;\n        }\n        try {\n            StringWriter writer = new StringWriter(input.length() * 2);  // TODO: Make the 2 part of the API???\n            translate(input, writer);\n            return writer.toString();\n        } catch (IOException ioe) {\n            // this should never ever happen while writing to a StringWriter\n            throw new RuntimeException(ioe);\n        }\n    }", "javadoc_start_line": 48, "annotations_start_line": 53, "method_start_line": 53, "end_line": 65}]}], "project": {"name": "Lang", "version": 28}}