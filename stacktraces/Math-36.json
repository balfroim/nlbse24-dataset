{"tours": [{"failing_test": {"className": " org.apache.commons.math.fraction.BigFractionTest", "methodName": "testFloatValueForLargeNumeratorAndDenominator", "error": "junit.framework.AssertionFailedError", "message": "expected:<5.0> but was:<NaN>"}, "patched_method": {"file_path": "/src/main/java/org/apache/commons/math/fraction/BigFraction.java", "method_name": "floatValue", "content": "    /**\n     * <p>\n     * Gets the fraction as a <tt>float</tt>. This calculates the fraction as\n     * the numerator divided by denominator.\n     * </p>\n     *\n     * @return the fraction as a <tt>float</tt>.\n     * @see java.lang.Number#floatValue()\n     */\n    @Override\n    public float floatValue() {\n        float result = numerator.floatValue() / denominator.floatValue();\n            // Numerator and/or denominator must be out of range:\n            // Calculate how far to shift them to put them in range.\n        return result;\n    }", "javadoc_start_line": 721, "annotations_start_line": 730, "method_start_line": 731, "end_line": 736}, "steps": [{"file_path": "/src/test/java/org/apache/commons/math/fraction/BigFractionTest.java", "method_name": "testFloatValueForLargeNumeratorAndDenominator", "content": "    public void testFloatValueForLargeNumeratorAndDenominator() {\n        final BigInteger pow400 = BigInteger.TEN.pow(400);\n        final BigInteger pow401 = BigInteger.TEN.pow(401);\n        final BigInteger two = new BigInteger(\"2\");\n        final BigFraction large = new BigFraction(pow401.add(BigInteger.ONE),\n                                                  pow400.multiply(two));\n\n        Assert.assertEquals(5, large.floatValue(), 1e-15);\n    }", "javadoc_start_line": 215, "annotations_start_line": 214, "method_start_line": 215, "end_line": 223}, {"file_path": "/src/main/java/org/apache/commons/math/fraction/BigFraction.java", "method_name": "floatValue", "content": "    /**\n     * <p>\n     * Gets the fraction as a <tt>float</tt>. This calculates the fraction as\n     * the numerator divided by denominator.\n     * </p>\n     *\n     * @return the fraction as a <tt>float</tt>.\n     * @see java.lang.Number#floatValue()\n     */\n    @Override\n    public float floatValue() {\n        float result = numerator.floatValue() / denominator.floatValue();\n            // Numerator and/or denominator must be out of range:\n            // Calculate how far to shift them to put them in range.\n        return result;\n    }", "javadoc_start_line": 721, "annotations_start_line": 730, "method_start_line": 731, "end_line": 736}]}, {"failing_test": {"className": " org.apache.commons.math.fraction.BigFractionTest", "methodName": "testFloatValueForLargeNumeratorAndDenominator", "error": "junit.framework.AssertionFailedError", "message": "expected:<5.0> but was:<NaN>"}, "patched_method": {"file_path": "/src/main/java/org/apache/commons/math/fraction/BigFraction.java", "method_name": "doubleValue", "content": "    /**\n     * <p>\n     * Gets the fraction as a <tt>double</tt>. This calculates the fraction as\n     * the numerator divided by denominator.\n     * </p>\n     *\n     * @return the fraction as a <tt>double</tt>\n     * @see java.lang.Number#doubleValue()\n     */\n    @Override\n    public double doubleValue() {\n        double result = numerator.doubleValue() / denominator.doubleValue();\n            // Numerator and/or denominator must be out of range:\n            // Calculate how far to shift them to put them in range.\n        return result;\n    }", "javadoc_start_line": 674, "annotations_start_line": 683, "method_start_line": 684, "end_line": 689}, "steps": [], "generation_failure": {"error": "Failed to generate stacktrace", "error_message": "[Errno 2] No such file or directory: './projects/Math/36/results/stacktrace-testFloatValueForLargeNumeratorAndDenominator-doubleValue.csv'"}}, {"failing_test": {"className": " org.apache.commons.math.fraction.BigFractionTest", "methodName": "testDoubleValueForLargeNumeratorAndDenominator", "error": "junit.framework.AssertionFailedError", "message": "expected:<5.0> but was:<NaN>"}, "patched_method": {"file_path": "/src/main/java/org/apache/commons/math/fraction/BigFraction.java", "method_name": "floatValue", "content": "    /**\n     * <p>\n     * Gets the fraction as a <tt>float</tt>. This calculates the fraction as\n     * the numerator divided by denominator.\n     * </p>\n     *\n     * @return the fraction as a <tt>float</tt>.\n     * @see java.lang.Number#floatValue()\n     */\n    @Override\n    public float floatValue() {\n        float result = numerator.floatValue() / denominator.floatValue();\n            // Numerator and/or denominator must be out of range:\n            // Calculate how far to shift them to put them in range.\n        return result;\n    }", "javadoc_start_line": 721, "annotations_start_line": 730, "method_start_line": 731, "end_line": 736}, "steps": [], "generation_failure": {"error": "Failed to generate stacktrace", "error_message": "[Errno 2] No such file or directory: './projects/Math/36/results/stacktrace-testDoubleValueForLargeNumeratorAndDenominator-floatValue.csv'"}}, {"failing_test": {"className": " org.apache.commons.math.fraction.BigFractionTest", "methodName": "testDoubleValueForLargeNumeratorAndDenominator", "error": "junit.framework.AssertionFailedError", "message": "expected:<5.0> but was:<NaN>"}, "patched_method": {"file_path": "/src/main/java/org/apache/commons/math/fraction/BigFraction.java", "method_name": "doubleValue", "content": "    /**\n     * <p>\n     * Gets the fraction as a <tt>double</tt>. This calculates the fraction as\n     * the numerator divided by denominator.\n     * </p>\n     *\n     * @return the fraction as a <tt>double</tt>\n     * @see java.lang.Number#doubleValue()\n     */\n    @Override\n    public double doubleValue() {\n        double result = numerator.doubleValue() / denominator.doubleValue();\n            // Numerator and/or denominator must be out of range:\n            // Calculate how far to shift them to put them in range.\n        return result;\n    }", "javadoc_start_line": 674, "annotations_start_line": 683, "method_start_line": 684, "end_line": 689}, "steps": [{"file_path": "/src/test/java/org/apache/commons/math/fraction/BigFractionTest.java", "method_name": "testDoubleValueForLargeNumeratorAndDenominator", "content": "    public void testDoubleValueForLargeNumeratorAndDenominator() {\n        final BigInteger pow400 = BigInteger.TEN.pow(400);\n        final BigInteger pow401 = BigInteger.TEN.pow(401);\n        final BigInteger two = new BigInteger(\"2\");\n        final BigFraction large = new BigFraction(pow401.add(BigInteger.ONE),\n                                                  pow400.multiply(two));\n\n        Assert.assertEquals(5, large.doubleValue(), 1e-15);\n    }", "javadoc_start_line": 203, "annotations_start_line": 202, "method_start_line": 203, "end_line": 211}, {"file_path": "/src/main/java/org/apache/commons/math/fraction/BigFraction.java", "method_name": "doubleValue", "content": "    /**\n     * <p>\n     * Gets the fraction as a <tt>double</tt>. This calculates the fraction as\n     * the numerator divided by denominator.\n     * </p>\n     *\n     * @return the fraction as a <tt>double</tt>\n     * @see java.lang.Number#doubleValue()\n     */\n    @Override\n    public double doubleValue() {\n        double result = numerator.doubleValue() / denominator.doubleValue();\n            // Numerator and/or denominator must be out of range:\n            // Calculate how far to shift them to put them in range.\n        return result;\n    }", "javadoc_start_line": 674, "annotations_start_line": 683, "method_start_line": 684, "end_line": 689}]}], "project": {"name": "Math", "version": 36}}