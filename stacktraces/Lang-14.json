{"tours": [{"failing_test": {"className": " org.apache.commons.lang3.StringUtilsEqualsIndexOfTest", "methodName": "testEquals", "error": "junit.framework.AssertionFailedError", "message": ""}, "patched_method": {"file_path": "/src/main/java/org/apache/commons/lang3/StringUtils.java", "method_name": "equals", "content": "    /**\n     * <p>Compares two CharSequences, returning {@code true} if they represent\n     * equal sequences of characters.</p>\n     *\n     * <p>{@code null}s are handled without exceptions. Two {@code null}\n     * references are considered to be equal. The comparison is case sensitive.</p>\n     *\n     * <pre>\n     * StringUtils.equals(null, null)   = true\n     * StringUtils.equals(null, \"abc\")  = false\n     * StringUtils.equals(\"abc\", null)  = false\n     * StringUtils.equals(\"abc\", \"abc\") = true\n     * StringUtils.equals(\"abc\", \"ABC\") = false\n     * </pre>\n     *\n     * @see java.lang.CharSequence#equals(Object)\n     * @param cs1  the first CharSequence, may be {@code null}\n     * @param cs2  the second CharSequence, may be {@code null}\n     * @return {@code true} if the CharSequences are equal (case-sensitive), or both {@code null}\n     * @since 3.0 Changed signature from equals(String, String) to equals(CharSequence, CharSequence)\n     */\n    public static boolean equals(CharSequence cs1, CharSequence cs2) {\n        if (cs1 == cs2) {\n            return true;\n        }\n        if (cs1 == null || cs2 == null) {\n            return false;\n        }\n            return cs1.equals(cs2);\n    }", "javadoc_start_line": 760, "annotations_start_line": 781, "method_start_line": 781, "end_line": 789}, "steps": [{"file_path": "/src/test/java/org/apache/commons/lang3/StringUtilsEqualsIndexOfTest.java", "method_name": "testEquals", "content": "    public void testEquals() {\n        final CharSequence fooCs = FOO, barCs = BAR, foobarCs = FOOBAR;\n        assertTrue(StringUtils.equals(null, null));\n        assertTrue(StringUtils.equals(fooCs, fooCs));\n        assertTrue(StringUtils.equals(fooCs, (CharSequence) new StringBuilder(FOO)));\n        assertTrue(StringUtils.equals(fooCs, (CharSequence) new String(new char[] { 'f', 'o', 'o' })));\n        assertTrue(StringUtils.equals(fooCs, (CharSequence) new CustomCharSequence(FOO)));\n        assertTrue(StringUtils.equals((CharSequence) new CustomCharSequence(FOO), fooCs));\n        assertFalse(StringUtils.equals(fooCs, (CharSequence) new String(new char[] { 'f', 'O', 'O' })));\n        assertFalse(StringUtils.equals(fooCs, barCs));\n        assertFalse(StringUtils.equals(fooCs, null));\n        assertFalse(StringUtils.equals(null, fooCs));\n        assertFalse(StringUtils.equals(fooCs, foobarCs));\n        assertFalse(StringUtils.equals(foobarCs, fooCs));\n    }", "javadoc_start_line": 486, "annotations_start_line": 486, "method_start_line": 486, "end_line": 500}, {"file_path": "/src/main/java/org/apache/commons/lang3/StringUtils.java", "method_name": "equals", "content": "    /**\n     * <p>Compares two CharSequences, returning {@code true} if they represent\n     * equal sequences of characters.</p>\n     *\n     * <p>{@code null}s are handled without exceptions. Two {@code null}\n     * references are considered to be equal. The comparison is case sensitive.</p>\n     *\n     * <pre>\n     * StringUtils.equals(null, null)   = true\n     * StringUtils.equals(null, \"abc\")  = false\n     * StringUtils.equals(\"abc\", null)  = false\n     * StringUtils.equals(\"abc\", \"abc\") = true\n     * StringUtils.equals(\"abc\", \"ABC\") = false\n     * </pre>\n     *\n     * @see java.lang.CharSequence#equals(Object)\n     * @param cs1  the first CharSequence, may be {@code null}\n     * @param cs2  the second CharSequence, may be {@code null}\n     * @return {@code true} if the CharSequences are equal (case-sensitive), or both {@code null}\n     * @since 3.0 Changed signature from equals(String, String) to equals(CharSequence, CharSequence)\n     */\n    public static boolean equals(CharSequence cs1, CharSequence cs2) {\n        if (cs1 == cs2) {\n            return true;\n        }\n        if (cs1 == null || cs2 == null) {\n            return false;\n        }\n            return cs1.equals(cs2);\n    }", "javadoc_start_line": 760, "annotations_start_line": 781, "method_start_line": 781, "end_line": 789}]}], "project": {"name": "Lang", "version": 14}}