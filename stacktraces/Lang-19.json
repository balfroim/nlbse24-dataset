{"tours": [{"failing_test": {"className": " org.apache.commons.lang3.text.translate.NumericEntityUnescaperTest", "methodName": "testUnfinishedEntity", "error": "java.lang.StringIndexOutOfBoundsException", "message": "String index out of range: 19"}, "patched_method": {"file_path": "/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java", "method_name": "translate", "content": "    /**\n     * {@inheritDoc}\n     */\n    @Override\n    public int translate(CharSequence input, int index, Writer out) throws IOException {\n        int seqEnd = input.length();\n        // Uses -2 to ensure there is something after the &#\n        if(input.charAt(index) == '&' && index < seqEnd - 1 && input.charAt(index + 1) == '#') {\n            int start = index + 2;\n            boolean isHex = false;\n\n            char firstChar = input.charAt(start);\n            if(firstChar == 'x' || firstChar == 'X') {\n                start++;\n                isHex = true;\n\n                // Check there's more than just an x after the &#\n            }\n\n            int end = start;\n            // Note that this supports character codes without a ; on the end\n            while(input.charAt(end) != ';') \n            {\n                end++;\n            }\n\n            int entityValue;\n            try {\n                if(isHex) {\n                    entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 16);\n                } else {\n                    entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 10);\n                }\n            } catch(NumberFormatException nfe) {\n            System.err.println(\"FAIL: \" + input.subSequence(start, end) + \"[\" + start +\"][\"+ end +\"]\");\n                return 0;\n            }\n\n            if(entityValue > 0xFFFF) {\n                char[] chrs = Character.toChars(entityValue);\n                out.write(chrs[0]);\n                out.write(chrs[1]);\n            } else {\n                out.write(entityValue);\n            }\n\n\n            return 2 + (end - start) + (isHex ? 1 : 0) + 1;\n        }\n        return 0;\n    }", "javadoc_start_line": 33, "annotations_start_line": 36, "method_start_line": 37, "end_line": 83}, "steps": [{"file_path": "/src/test/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaperTest.java", "method_name": "testUnfinishedEntity", "content": "    public void testUnfinishedEntity() {\n        NumericEntityUnescaper neu = new NumericEntityUnescaper();\n        String input = \"Test &#x30 not test\";\n        String expected = \"Test \\u0030 not test\";\n\n        String result = neu.translate(input);\n        assertEquals(\"Failed to support unfinished entities (i.e. missing semi-colon\", expected, result);\n    }", "javadoc_start_line": 46, "annotations_start_line": 46, "method_start_line": 46, "end_line": 53}, {"file_path": "/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java", "method_name": "translate", "content": "    /**\n     * Helper for non-Writer usage. \n     * @param input CharSequence to be translated\n     * @return String output of translation\n     */\n    public final String translate(CharSequence input) {\n        if (input == null) {\n            return null;\n        }\n        try {\n            StringWriter writer = new StringWriter(input.length() * 2);\n            translate(input, writer);\n            return writer.toString();\n        } catch (IOException ioe) {\n            // this should never ever happen while writing to a StringWriter\n            throw new RuntimeException(ioe);\n        }\n    }", "javadoc_start_line": 48, "annotations_start_line": 53, "method_start_line": 53, "end_line": 65}]}, {"failing_test": {"className": " org.apache.commons.lang3.text.translate.NumericEntityUnescaperTest", "methodName": "testOutOfBounds", "error": "java.lang.StringIndexOutOfBoundsException", "message": "String index out of range: 7"}, "patched_method": {"file_path": "/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java", "method_name": "translate", "content": "    /**\n     * {@inheritDoc}\n     */\n    @Override\n    public int translate(CharSequence input, int index, Writer out) throws IOException {\n        int seqEnd = input.length();\n        // Uses -2 to ensure there is something after the &#\n        if(input.charAt(index) == '&' && index < seqEnd - 1 && input.charAt(index + 1) == '#') {\n            int start = index + 2;\n            boolean isHex = false;\n\n            char firstChar = input.charAt(start);\n            if(firstChar == 'x' || firstChar == 'X') {\n                start++;\n                isHex = true;\n\n                // Check there's more than just an x after the &#\n            }\n\n            int end = start;\n            // Note that this supports character codes without a ; on the end\n            while(input.charAt(end) != ';') \n            {\n                end++;\n            }\n\n            int entityValue;\n            try {\n                if(isHex) {\n                    entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 16);\n                } else {\n                    entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 10);\n                }\n            } catch(NumberFormatException nfe) {\n            System.err.println(\"FAIL: \" + input.subSequence(start, end) + \"[\" + start +\"][\"+ end +\"]\");\n                return 0;\n            }\n\n            if(entityValue > 0xFFFF) {\n                char[] chrs = Character.toChars(entityValue);\n                out.write(chrs[0]);\n                out.write(chrs[1]);\n            } else {\n                out.write(entityValue);\n            }\n\n\n            return 2 + (end - start) + (isHex ? 1 : 0) + 1;\n        }\n        return 0;\n    }", "javadoc_start_line": 33, "annotations_start_line": 36, "method_start_line": 37, "end_line": 83}, "steps": [{"file_path": "/src/test/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaperTest.java", "method_name": "testOutOfBounds", "content": "    public void testOutOfBounds() {\n        NumericEntityUnescaper neu = new NumericEntityUnescaper();\n\n        assertEquals(\"Failed to ignore when last character is &\", \"Test &\", neu.translate(\"Test &\"));\n        assertEquals(\"Failed to ignore when last character is &\", \"Test &#\", neu.translate(\"Test &#\"));\n        assertEquals(\"Failed to ignore when last character is &\", \"Test &#x\", neu.translate(\"Test &#x\"));\n        assertEquals(\"Failed to ignore when last character is &\", \"Test &#X\", neu.translate(\"Test &#X\"));\n    }", "javadoc_start_line": 37, "annotations_start_line": 37, "method_start_line": 37, "end_line": 44}, {"file_path": "/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java", "method_name": "translate", "content": "    /**\n     * Helper for non-Writer usage. \n     * @param input CharSequence to be translated\n     * @return String output of translation\n     */\n    public final String translate(CharSequence input) {\n        if (input == null) {\n            return null;\n        }\n        try {\n            StringWriter writer = new StringWriter(input.length() * 2);\n            translate(input, writer);\n            return writer.toString();\n        } catch (IOException ioe) {\n            // this should never ever happen while writing to a StringWriter\n            throw new RuntimeException(ioe);\n        }\n    }", "javadoc_start_line": 48, "annotations_start_line": 53, "method_start_line": 53, "end_line": 65}]}], "project": {"name": "Lang", "version": 19}}