{"tours": [{"failing_test": {"className": " org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegratorTest", "methodName": "polynomial", "error": "junit.framework.AssertionFailedError", "message": ""}, "patched_method": {"file_path": "/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java", "method_name": "integrate", "content": "  /** {@inheritDoc} */\n  @Override\n  public double integrate(final FirstOrderDifferentialEquations equations,\n                          final double t0, final double[] y0,\n                          final double t, final double[] y)\n  throws DerivativeException, IntegratorException {\n\n    sanityChecks(equations, t0, y0, t, y);\n    setEquations(equations);\n    resetEvaluations();\n    final boolean forward = t > t0;\n\n    // create some internal working arrays\n    final int stages = c.length + 1;\n    if (y != y0) {\n      System.arraycopy(y0, 0, y, 0, y0.length);\n    }\n    final double[][] yDotK = new double[stages][y0.length];\n    final double[] yTmp = new double[y0.length];\n\n    // set up an interpolator sharing the integrator arrays\n    AbstractStepInterpolator interpolator;\n    if (requiresDenseOutput() || (! eventsHandlersManager.isEmpty())) {\n      final RungeKuttaStepInterpolator rki = (RungeKuttaStepInterpolator) prototype.copy();\n      rki.reinitialize(this, yTmp, yDotK, forward);\n      interpolator = rki;\n    } else {\n      interpolator = new DummyStepInterpolator(yTmp, forward);\n    }\n    interpolator.storeTime(t0);\n\n    // set up integration control objects\n    stepStart         = t0;\n    double  hNew      = 0;\n    boolean firstTime = true;\n    for (StepHandler handler : stepHandlers) {\n        handler.reset();\n    }\n    CombinedEventsManager manager = addEndTimeChecker(t0, t, eventsHandlersManager);\n    boolean lastStep = false;\n\n    // main integration loop\n    while (!lastStep) {\n\n      interpolator.shift();\n\n      double error = 0;\n      for (boolean loop = true; loop;) {\n\n        if (firstTime || !fsal) {\n          // first stage\n          computeDerivatives(stepStart, y, yDotK[0]);\n        }\n\n        if (firstTime) {\n          final double[] scale;\n          if (vecAbsoluteTolerance == null) {\n              scale = new double[y0.length];\n              java.util.Arrays.fill(scale, scalAbsoluteTolerance);\n            } else {\n              scale = vecAbsoluteTolerance;\n            }\n          hNew = initializeStep(equations, forward, getOrder(), scale,\n                                stepStart, y, yDotK[0], yTmp, yDotK[1]);\n          firstTime = false;\n        }\n\n        stepSize = hNew;\n\n        // next stages\n        for (int k = 1; k < stages; ++k) {\n\n          for (int j = 0; j < y0.length; ++j) {\n            double sum = a[k-1][0] * yDotK[0][j];\n            for (int l = 1; l < k; ++l) {\n              sum += a[k-1][l] * yDotK[l][j];\n            }\n            yTmp[j] = y[j] + stepSize * sum;\n          }\n\n          computeDerivatives(stepStart + c[k-1] * stepSize, yTmp, yDotK[k]);\n\n        }\n\n        // estimate the state at the end of the step\n        for (int j = 0; j < y0.length; ++j) {\n          double sum    = b[0] * yDotK[0][j];\n          for (int l = 1; l < stages; ++l) {\n            sum    += b[l] * yDotK[l][j];\n          }\n          yTmp[j] = y[j] + stepSize * sum;\n        }\n\n        // estimate the error at the end of the step\n        error = estimateError(yDotK, y, yTmp, stepSize);\n        if (error <= 1.0) {\n\n          // discrete events handling\n          interpolator.storeTime(stepStart + stepSize);\n          if (manager.evaluateStep(interpolator)) {\n              final double dt = manager.getEventTime() - stepStart;\n              if (Math.abs(dt) <= Math.ulp(stepStart)) {\n                  // rejecting the step would lead to a too small next step, we accept it\n                  loop = false;\n              } else {\n                  // reject the step to match exactly the next switch time\n                  hNew = dt;\n              }\n          } else {\n            // accept the step\n            loop = false;\n          }\n\n        } else {\n          // reject the step and attempt to reduce error by stepsize control\n          final double factor =\n              Math.min(maxGrowth,\n                       Math.max(minReduction, safety * Math.pow(error, exp)));\n          hNew = filterStep(stepSize * factor, forward, false);\n        }\n\n      }\n\n      // the step has been accepted\n      final double nextStep = stepStart + stepSize;\n      System.arraycopy(yTmp, 0, y, 0, y0.length);\n      manager.stepAccepted(nextStep, y);\n      lastStep = manager.stop();\n\n      // provide the step data to the step handler\n      interpolator.storeTime(nextStep);\n      for (StepHandler handler : stepHandlers) {\n          handler.handleStep(interpolator, lastStep);\n      }\n      stepStart = nextStep;\n\n      if (fsal) {\n        // save the last evaluation for the next step\n        System.arraycopy(yDotK[stages - 1], 0, yDotK[0], 0, y0.length);\n      }\n\n      if (manager.reset(stepStart, y) && ! lastStep) {\n        // some event handler has triggered changes that\n        // invalidate the derivatives, we need to recompute them\n        computeDerivatives(stepStart, y, yDotK[0]);\n      }\n\n      if (! lastStep) {\n        // in some rare cases we may get here with stepSize = 0, for example\n        // when an event occurs at integration start, reducing the first step\n        // to zero; we have to reset the step to some safe non zero value\n          stepSize = filterStep(stepSize, forward, true);\n\n        // stepsize control for next step\n        final double factor = Math.min(maxGrowth,\n                                       Math.max(minReduction,\n                                                safety * Math.pow(error, exp)));\n        final double  scaledH    = stepSize * factor;\n        final double  nextT      = stepStart + scaledH;\n        final boolean nextIsLast = forward ? (nextT >= t) : (nextT <= t);\n        hNew = filterStep(scaledH, forward, nextIsLast);\n      }\n\n    }\n\n    final double stopTime = stepStart;\n    resetInternalState();\n    return stopTime;\n\n  }", "javadoc_start_line": 190, "annotations_start_line": 191, "method_start_line": 195, "end_line": 359}, "steps": [{"file_path": "/src/test/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java", "method_name": "polynomial", "content": "    public void polynomial() throws DerivativeException, IntegratorException {\n        TestProblem6 pb = new TestProblem6();\n        double range = Math.abs(pb.getFinalTime() - pb.getInitialTime());\n\n        for (int nSteps = 1; nSteps < 7; ++nSteps) {\n            AdamsMoultonIntegrator integ =\n                new AdamsMoultonIntegrator(nSteps, 1.0e-6 * range, 0.1 * range, 1.0e-9, 1.0e-9);\n            TestProblemHandler handler = new TestProblemHandler(pb, integ);\n            integ.addStepHandler(handler);\n            integ.integrate(pb, pb.getInitialTime(), pb.getInitialState(),\n                            pb.getFinalTime(), new double[pb.getDimension()]);\n            if (nSteps < 4) {\n                assertTrue(integ.getEvaluations() > 140);\n            } else {\n                assertTrue(integ.getEvaluations() < 90);\n            }\n        }\n\n    }", "javadoc_start_line": 136, "annotations_start_line": 135, "method_start_line": 136, "end_line": 154}, {"file_path": "/src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java", "method_name": "integrate", "content": "    /** {@inheritDoc} */\n    @Override\n    public double integrate(final FirstOrderDifferentialEquations equations,\n                            final double t0, final double[] y0,\n                            final double t, final double[] y)\n        throws DerivativeException, IntegratorException {\n\n        final int n = y0.length;\n        sanityChecks(equations, t0, y0, t, y);\n        setEquations(equations);\n        resetEvaluations();\n        final boolean forward = t > t0;\n\n        // initialize working arrays\n        if (y != y0) {\n            System.arraycopy(y0, 0, y, 0, n);\n        }\n        final double[] yDot = new double[y0.length];\n        final double[] yTmp = new double[y0.length];\n\n        // set up two interpolators sharing the integrator arrays\n        final NordsieckStepInterpolator interpolator = new NordsieckStepInterpolator();\n        interpolator.reinitialize(y, forward);\n        final NordsieckStepInterpolator interpolatorTmp = new NordsieckStepInterpolator();\n        interpolatorTmp.reinitialize(yTmp, forward);\n\n        // set up integration control objects\n        for (StepHandler handler : stepHandlers) {\n            handler.reset();\n        }\n        CombinedEventsManager manager = addEndTimeChecker(t0, t, eventsHandlersManager);\n\n\n        // compute the initial Nordsieck vector using the configured starter integrator\n        start(t0, y, t);\n        interpolator.reinitialize(stepStart, stepSize, scaled, nordsieck);\n        interpolator.storeTime(stepStart);\n\n        double hNew = stepSize;\n        interpolator.rescale(hNew);\n\n        boolean lastStep = false;\n        while (!lastStep) {\n\n            // shift all data\n            interpolator.shift();\n\n            double error = 0;\n            for (boolean loop = true; loop;) {\n\n                stepSize = hNew;\n\n                // predict a first estimate of the state at step end (P in the PECE sequence)\n                final double stepEnd = stepStart + stepSize;\n                interpolator.setInterpolatedTime(stepEnd);\n                System.arraycopy(interpolator.getInterpolatedState(), 0, yTmp, 0, y0.length);\n\n                // evaluate a first estimate of the derivative (first E in the PECE sequence)\n                computeDerivatives(stepEnd, yTmp, yDot);\n\n                // update Nordsieck vector\n                final double[] predictedScaled = new double[y0.length];\n                for (int j = 0; j < y0.length; ++j) {\n                    predictedScaled[j] = stepSize * yDot[j];\n                }\n                final Array2DRowRealMatrix nordsieckTmp = updateHighOrderDerivativesPhase1(nordsieck);\n                updateHighOrderDerivativesPhase2(scaled, predictedScaled, nordsieckTmp);\n\n                // apply correction (C in the PECE sequence)\n                error = nordsieckTmp.walkInOptimizedOrder(new Corrector(y, predictedScaled, yTmp));\n\n                if (error <= 1.0) {\n\n                    // evaluate a final estimate of the derivative (second E in the PECE sequence)\n                    computeDerivatives(stepEnd, yTmp, yDot);\n\n                    // update Nordsieck vector\n                    final double[] correctedScaled = new double[y0.length];\n                    for (int j = 0; j < y0.length; ++j) {\n                        correctedScaled[j] = stepSize * yDot[j];\n                    }\n                    updateHighOrderDerivativesPhase2(predictedScaled, correctedScaled, nordsieckTmp);\n\n                    // discrete events handling\n                    interpolatorTmp.reinitialize(stepEnd, stepSize, correctedScaled, nordsieckTmp);\n                    interpolatorTmp.storeTime(stepStart);\n                    interpolatorTmp.shift();\n                    interpolatorTmp.storeTime(stepEnd);\n                    if (manager.evaluateStep(interpolatorTmp)) {\n                        final double dt = manager.getEventTime() - stepStart;\n                        if (Math.abs(dt) <= Math.ulp(stepStart)) {\n                            // rejecting the step would lead to a too small next step, we accept it\n                            loop = false;\n                        } else {\n                            // reject the step to match exactly the next switch time\n                            hNew = dt;\n                            interpolator.rescale(hNew);\n                        }\n                    } else {\n                        // accept the step\n                        scaled    = correctedScaled;\n                        nordsieck = nordsieckTmp;\n                        interpolator.reinitialize(stepEnd, stepSize, scaled, nordsieck);\n                        loop = false;\n                    }\n\n                } else {\n                    // reject the step and attempt to reduce error by stepsize control\n                    final double factor = computeStepGrowShrinkFactor(error);\n                    hNew = filterStep(stepSize * factor, forward, false);\n                    interpolator.rescale(hNew);\n                }\n\n            }\n\n            // the step has been accepted (may have been truncated)\n            final double nextStep = stepStart + stepSize;\n            System.arraycopy(yTmp, 0, y, 0, n);\n            interpolator.storeTime(nextStep);\n            manager.stepAccepted(nextStep, y);\n            lastStep = manager.stop();\n\n            // provide the step data to the step handler\n            for (StepHandler handler : stepHandlers) {\n                interpolator.setInterpolatedTime(nextStep);\n                handler.handleStep(interpolator, lastStep);\n            }\n            stepStart = nextStep;\n\n            if (!lastStep && manager.reset(stepStart, y)) {\n\n                // some events handler has triggered changes that\n                // invalidate the derivatives, we need to restart from scratch\n                start(stepStart, y, t);\n                interpolator.reinitialize(stepStart, stepSize, scaled, nordsieck);\n\n            }\n\n            if (! lastStep) {\n                // in some rare cases we may get here with stepSize = 0, for example\n                // when an event occurs at integration start, reducing the first step\n                // to zero; we have to reset the step to some safe non zero value\n                stepSize = filterStep(stepSize, forward, true);\n\n                // stepsize control for next step\n                final double  factor     = computeStepGrowShrinkFactor(error);\n                final double  scaledH    = stepSize * factor;\n                final double  nextT      = stepStart + scaledH;\n                final boolean nextIsLast = forward ? (nextT >= t) : (nextT <= t);\n                hNew = filterStep(scaledH, forward, nextIsLast);\n                interpolator.rescale(hNew);\n            }\n\n        }\n\n        final double stopTime  = stepStart;\n        stepStart = Double.NaN;\n        stepSize  = Double.NaN;\n        return stopTime;\n\n    }", "javadoc_start_line": 201, "annotations_start_line": 202, "method_start_line": 206, "end_line": 361}]}], "project": {"name": "Math", "version": 74}}