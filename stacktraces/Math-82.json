{"tours": [{"failing_test": {"className": " org.apache.commons.math.optimization.linear.SimplexSolverTest", "methodName": "testMath288", "error": "junit.framework.AssertionFailedError", "message": "expected:<10.0> but was:<11.5>"}, "patched_method": {"file_path": "/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java", "method_name": "getPivotRow", "content": "    /**\n     * Returns the row with the minimum ratio as given by the minimum ratio test (MRT).\n     * @param tableau simple tableau for the problem\n     * @param col the column to test the ratio of.  See {@link #getPivotColumn(SimplexTableau)}\n     * @return row with the minimum ratio\n     */\n    private Integer getPivotRow(final int col, final SimplexTableau tableau) {\n        double minRatio = Double.MAX_VALUE;\n        Integer minRatioPos = null;\n        for (int i = tableau.getNumObjectiveFunctions(); i < tableau.getHeight(); i++) {\n            final double rhs = tableau.getEntry(i, tableau.getWidth() - 1);\n            final double entry = tableau.getEntry(i, col);\n            if (MathUtils.compareTo(entry, 0, epsilon) >= 0) {\n                final double ratio = rhs / entry;\n                if (ratio < minRatio) {\n                    minRatio = ratio;\n                    minRatioPos = i; \n                }\n            }\n        }\n        return minRatioPos;\n    }", "javadoc_start_line": 70, "annotations_start_line": 76, "method_start_line": 76, "end_line": 91}, "steps": [{"file_path": "/src/test/java/org/apache/commons/math/optimization/linear/SimplexSolverTest.java", "method_name": "testMath288", "content": "    public void testMath288() throws OptimizationException {\n        LinearObjectiveFunction f = new LinearObjectiveFunction(new double[] { 7, 3, 0, 0 }, 0 );\n        Collection<LinearConstraint> constraints = new ArrayList<LinearConstraint>();\n        constraints.add(new LinearConstraint(new double[] { 3, 0, -5, 0 }, Relationship.LEQ, 0.0));\n        constraints.add(new LinearConstraint(new double[] { 2, 0, 0, -5 }, Relationship.LEQ, 0.0));\n        constraints.add(new LinearConstraint(new double[] { 0, 3, 0, -5 }, Relationship.LEQ, 0.0));\n        constraints.add(new LinearConstraint(new double[] { 1, 0, 0, 0 }, Relationship.LEQ, 1.0));\n        constraints.add(new LinearConstraint(new double[] { 0, 1, 0, 0 }, Relationship.LEQ, 1.0));\n\n        SimplexSolver solver = new SimplexSolver();\n        RealPointValuePair solution = solver.optimize(f, constraints, GoalType.MAXIMIZE, true);\n        assertEquals(10.0, solution.getValue(), .0000001);\n    }", "javadoc_start_line": 62, "annotations_start_line": 61, "method_start_line": 62, "end_line": 74}, {"file_path": "/src/main/java/org/apache/commons/math/optimization/linear/AbstractLinearOptimizer.java", "method_name": "optimize", "content": "    /** {@inheritDoc} */\n    public RealPointValuePair optimize(final LinearObjectiveFunction f,\n                                       final Collection<LinearConstraint> constraints,\n                                       final GoalType goalType, final boolean restrictToNonNegative)\n         throws OptimizationException {\n\n        // store linear problem characteristics\n        this.f                     = f;\n        this.constraints           = constraints;\n        this.goalType              = goalType;\n        this.restrictToNonNegative = restrictToNonNegative;\n\n        iterations  = 0;\n\n        // solve the problem\n        return doOptimize();\n\n    }", "javadoc_start_line": 91, "annotations_start_line": 92, "method_start_line": 95, "end_line": 108}, {"file_path": "/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java", "method_name": "doOptimize", "content": "    /** {@inheritDoc} */\n    @Override\n    public RealPointValuePair doOptimize()\n        throws OptimizationException {\n        final SimplexTableau tableau =\n            new SimplexTableau(f, constraints, goalType, restrictToNonNegative, epsilon);\n        solvePhase1(tableau);\n        tableau.discardArtificialVariables();\n        while (!isOptimal(tableau)) {\n            doIteration(tableau);\n        }\n        return tableau.getSolution();\n    }", "javadoc_start_line": 182, "annotations_start_line": 183, "method_start_line": 185, "end_line": 194}, {"file_path": "/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java", "method_name": "doIteration", "content": "    /**\n     * Runs one iteration of the Simplex method on the given model.\n     * @param tableau simple tableau for the problem\n     * @throws OptimizationException if the maximal iteration count has been\n     * exceeded or if the model is found not to have a bounded solution\n     */\n    protected void doIteration(final SimplexTableau tableau)\n        throws OptimizationException {\n\n        incrementIterationsCounter();\n\n        Integer pivotCol = getPivotColumn(tableau);\n        Integer pivotRow = getPivotRow(pivotCol, tableau);\n        if (pivotRow == null) {\n            throw new UnboundedSolutionException();\n        }\n\n        // set the pivot element to 1\n        double pivotVal = tableau.getEntry(pivotRow, pivotCol);\n        tableau.divideRow(pivotRow, pivotVal);\n\n        // set the rest of the pivot column to 0\n        for (int i = 0; i < tableau.getHeight(); i++) {\n            if (i != pivotRow) {\n                double multiplier = tableau.getEntry(i, pivotCol);\n                tableau.subtractRow(i, pivotRow, multiplier);\n            }\n        }\n    }", "javadoc_start_line": 94, "annotations_start_line": 100, "method_start_line": 101, "end_line": 122}, {"file_path": "/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java", "method_name": "getPivotRow", "content": "    /**\n     * Returns the row with the minimum ratio as given by the minimum ratio test (MRT).\n     * @param tableau simple tableau for the problem\n     * @param col the column to test the ratio of.  See {@link #getPivotColumn(SimplexTableau)}\n     * @return row with the minimum ratio\n     */\n    private Integer getPivotRow(final int col, final SimplexTableau tableau) {\n        double minRatio = Double.MAX_VALUE;\n        Integer minRatioPos = null;\n        for (int i = tableau.getNumObjectiveFunctions(); i < tableau.getHeight(); i++) {\n            final double rhs = tableau.getEntry(i, tableau.getWidth() - 1);\n            final double entry = tableau.getEntry(i, col);\n            if (MathUtils.compareTo(entry, 0, epsilon) >= 0) {\n                final double ratio = rhs / entry;\n                if (ratio < minRatio) {\n                    minRatio = ratio;\n                    minRatioPos = i; \n                }\n            }\n        }\n        return minRatioPos;\n    }", "javadoc_start_line": 70, "annotations_start_line": 76, "method_start_line": 76, "end_line": 91}]}], "project": {"name": "Math", "version": 82}}