{"tours": [{"failing_test": {"className": " org.apache.commons.math3.optimization.fitting.HarmonicFitterTest", "methodName": "testMath844", "error": "junit.framework.AssertionFailedError", "message": "Expected exception: org.apache.commons.math3.exception.MathIllegalStateException"}, "patched_method": {"file_path": "/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java", "method_name": "guessAOmega", "content": "        /**\n         * Estimate a first guess of the amplitude and angular frequency.\n         * This method assumes that the {@link #sortObservations()} method\n         * has been called previously.\n         *\n         * @throws ZeroException if the abscissa range is zero.\n         * @throws MathIllegalStateException when the guessing procedure cannot\n         * produce sensible results.\n         */\n        private void guessAOmega() {\n            // initialize the sums for the linear model between the two integrals\n            double sx2 = 0;\n            double sy2 = 0;\n            double sxy = 0;\n            double sxz = 0;\n            double syz = 0;\n\n            double currentX = observations[0].getX();\n            double currentY = observations[0].getY();\n            double f2Integral = 0;\n            double fPrime2Integral = 0;\n            final double startX = currentX;\n            for (int i = 1; i < observations.length; ++i) {\n                // one step forward\n                final double previousX = currentX;\n                final double previousY = currentY;\n                currentX = observations[i].getX();\n                currentY = observations[i].getY();\n\n                // update the integrals of f<sup>2</sup> and f'<sup>2</sup>\n                // considering a linear model for f (and therefore constant f')\n                final double dx = currentX - previousX;\n                final double dy = currentY - previousY;\n                final double f2StepIntegral =\n                    dx * (previousY * previousY + previousY * currentY + currentY * currentY) / 3;\n                final double fPrime2StepIntegral = dy * dy / dx;\n\n                final double x = currentX - startX;\n                f2Integral += f2StepIntegral;\n                fPrime2Integral += fPrime2StepIntegral;\n\n                sx2 += x * x;\n                sy2 += f2Integral * f2Integral;\n                sxy += x * f2Integral;\n                sxz += x * fPrime2Integral;\n                syz += f2Integral * fPrime2Integral;\n            }\n\n            // compute the amplitude and pulsation coefficients\n            double c1 = sy2 * sxz - sxy * syz;\n            double c2 = sxy * sxz - sx2 * syz;\n            double c3 = sx2 * sy2 - sxy * sxy;\n            if ((c1 / c2 < 0) || (c2 / c3 < 0)) {\n                final int last = observations.length - 1;\n                // Range of the observations, assuming that the\n                // observations are sorted.\n                final double xRange = observations[last].getX() - observations[0].getX();\n                if (xRange == 0) {\n                    throw new ZeroException();\n                }\n                omega = 2 * Math.PI / xRange;\n\n                double yMin = Double.POSITIVE_INFINITY;\n                double yMax = Double.NEGATIVE_INFINITY;\n                for (int i = 1; i < observations.length; ++i) {\n                    final double y = observations[i].getY();\n                    if (y < yMin) {\n                        yMin = y;\n                    }\n                    if (y > yMax) {\n                        yMax = y;\n                    }\n                }\n                a = 0.5 * (yMax - yMin);\n            } else {\n                    // In some ill-conditioned cases (cf. MATH-844), the guesser\n                    // procedure cannot produce sensible results.\n\n                a = FastMath.sqrt(c1 / c2);\n                omega = FastMath.sqrt(c2 / c3);\n            }\n        }", "javadoc_start_line": 248, "annotations_start_line": 257, "method_start_line": 257, "end_line": 329}, "steps": [{"file_path": "/src/test/java/org/apache/commons/math3/optimization/fitting/HarmonicFitterTest.java", "method_name": "testMath844", "content": "    public void testMath844() {\n        final double[] y = { 0, 1, 2, 3, 2, 1,\n                             0, -1, -2, -3, -2, -1,\n                             0, 1, 2, 3, 2, 1,\n                             0, -1, -2, -3, -2, -1,\n                             0, 1, 2, 3, 2, 1, 0 };\n        final int len = y.length;\n        final WeightedObservedPoint[] points = new WeightedObservedPoint[len];\n        for (int i = 0; i < len; i++) {\n            points[i] = new WeightedObservedPoint(1, i, y[i]);\n        }\n\n        final HarmonicFitter.ParameterGuesser guesser\n            = new HarmonicFitter.ParameterGuesser(points);\n\n        // The guesser fails because the function is far from an harmonic\n        // function: It is a triangular periodic function with amplitude 3\n        // and period 12, and all sample points are taken at integer abscissae\n        // so function values all belong to the integer subset {-3, -2, -1, 0,\n        // 1, 2, 3}.\n        guesser.guess();\n    }", "javadoc_start_line": 182, "annotations_start_line": 181, "method_start_line": 182, "end_line": 203}]}], "project": {"name": "Math", "version": 25}}