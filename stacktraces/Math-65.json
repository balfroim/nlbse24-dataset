{"tours": [{"failing_test": {"className": " org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizerTest", "methodName": "testCircleFitting", "error": "junit.framework.AssertionFailedError", "message": "expected:<0.004> but was:<0.0019737107108948474>"}, "patched_method": {"file_path": "/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java", "method_name": "getChiSquare", "content": "    /**\n     * Get a Chi-Square-like value assuming the N residuals follow N\n     * distinct normal distributions centered on 0 and whose variances are\n     * the reciprocal of the weights.\n     * @return chi-square value\n     */\n    public double getChiSquare() {\n        double chiSquare = 0;\n        for (int i = 0; i < rows; ++i) {\n            final double residual = residuals[i];\n            chiSquare += residual * residual / residualsWeights[i];\n        }\n        return chiSquare;\n    }", "javadoc_start_line": 248, "annotations_start_line": 254, "method_start_line": 254, "end_line": 261}, "steps": [{"file_path": "/src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java", "method_name": "testCircleFitting", "content": "    public void testCircleFitting() throws FunctionEvaluationException, OptimizationException {\n        Circle circle = new Circle();\n        circle.addPoint( 30.0,  68.0);\n        circle.addPoint( 50.0,  -6.0);\n        circle.addPoint(110.0, -20.0);\n        circle.addPoint( 35.0,  15.0);\n        circle.addPoint( 45.0,  97.0);\n        LevenbergMarquardtOptimizer optimizer = new LevenbergMarquardtOptimizer();\n        VectorialPointValuePair optimum =\n            optimizer.optimize(circle, new double[] { 0, 0, 0, 0, 0 }, new double[] { 1, 1, 1, 1, 1 },\n                               new double[] { 98.680, 47.345 });\n        assertTrue(optimizer.getEvaluations() < 10);\n        assertTrue(optimizer.getJacobianEvaluations() < 10);\n        double rms = optimizer.getRMS();\n        assertEquals(1.768262623567235,  Math.sqrt(circle.getN()) * rms,  1.0e-10);\n        Point2D.Double center = new Point2D.Double(optimum.getPointRef()[0], optimum.getPointRef()[1]);\n        assertEquals(69.96016176931406, circle.getRadius(center), 1.0e-10);\n        assertEquals(96.07590211815305, center.x,      1.0e-10);\n        assertEquals(48.13516790438953, center.y,      1.0e-10);\n        double[][] cov = optimizer.getCovariances();\n        assertEquals(1.839, cov[0][0], 0.001);\n        assertEquals(0.731, cov[0][1], 0.001);\n        assertEquals(cov[0][1], cov[1][0], 1.0e-14);\n        assertEquals(0.786, cov[1][1], 0.001);\n        double[] errors = optimizer.guessParametersErrors();\n        assertEquals(1.384, errors[0], 0.001);\n        assertEquals(0.905, errors[1], 0.001);\n\n        // add perfect measurements and check errors are reduced\n        double  r = circle.getRadius(center);\n        for (double d= 0; d < 2 * Math.PI; d += 0.01) {\n            circle.addPoint(center.x + r * Math.cos(d), center.y + r * Math.sin(d));\n        }\n        double[] target = new double[circle.getN()];\n        Arrays.fill(target, 0.0);\n        double[] weights = new double[circle.getN()];\n        Arrays.fill(weights, 2.0);\n        optimizer.optimize(circle, target, weights, new double[] { 98.680, 47.345 });\n        cov = optimizer.getCovariances();\n        assertEquals(0.0016, cov[0][0], 0.001);\n        assertEquals(3.2e-7, cov[0][1], 1.0e-9);\n        assertEquals(cov[0][1], cov[1][0], 1.0e-14);\n        assertEquals(0.0016, cov[1][1], 0.001);\n        errors = optimizer.guessParametersErrors();\n        assertEquals(0.004, errors[0], 0.001);\n        assertEquals(0.004, errors[1], 0.001);\n\n    }", "javadoc_start_line": 398, "annotations_start_line": 398, "method_start_line": 398, "end_line": 445}, {"file_path": "/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java", "method_name": "guessParametersErrors", "content": "    /**\n     * Guess the errors in optimized parameters.\n     * <p>Guessing is covariance-based, it only gives rough order of magnitude.</p>\n     * @return errors in optimized parameters\n     * @exception FunctionEvaluationException if the function jacobian cannot b evaluated\n     * @exception OptimizationException if the covariances matrix cannot be computed\n     * or the number of degrees of freedom is not positive (number of measurements\n     * lesser or equal to number of parameters)\n     */\n    public double[] guessParametersErrors()\n        throws FunctionEvaluationException, OptimizationException {\n        if (rows <= cols) {\n            throw new OptimizationException(\n                    LocalizedFormats.NO_DEGREES_OF_FREEDOM,\n                    rows, cols);\n        }\n        double[] errors = new double[cols];\n        final double c = Math.sqrt(getChiSquare() / (rows - cols));\n        double[][] covar = getCovariances();\n        for (int i = 0; i < errors.length; ++i) {\n            errors[i] = Math.sqrt(covar[i][i]) * c;\n        }\n        return errors;\n    }", "javadoc_start_line": 301, "annotations_start_line": 310, "method_start_line": 311, "end_line": 324}, {"file_path": "/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java", "method_name": "getChiSquare", "content": "    /**\n     * Get a Chi-Square-like value assuming the N residuals follow N\n     * distinct normal distributions centered on 0 and whose variances are\n     * the reciprocal of the weights.\n     * @return chi-square value\n     */\n    public double getChiSquare() {\n        double chiSquare = 0;\n        for (int i = 0; i < rows; ++i) {\n            final double residual = residuals[i];\n            chiSquare += residual * residual / residualsWeights[i];\n        }\n        return chiSquare;\n    }", "javadoc_start_line": 248, "annotations_start_line": 254, "method_start_line": 254, "end_line": 261}]}, {"failing_test": {"className": " org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizerTest", "methodName": "testCircleFitting", "error": "junit.framework.AssertionFailedError", "message": "expected:<0.004> but was:<0.0019737107108948474>"}, "patched_method": {"file_path": "/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java", "method_name": "getRMS", "content": "    /**\n     * Get the Root Mean Square value.\n     * Get the Root Mean Square value, i.e. the root of the arithmetic\n     * mean of the square of all weighted residuals. This is related to the\n     * criterion that is minimized by the optimizer as follows: if\n     * <em>c</em> if the criterion, and <em>n</em> is the number of\n     * measurements, then the RMS is <em>sqrt (c/n)</em>.\n     *\n     * @return RMS value\n     */\n    public double getRMS() {\n        double criterion = 0;\n        for (int i = 0; i < rows; ++i) {\n            final double residual = residuals[i];\n            criterion += residual * residual * residualsWeights[i];\n        }\n        return Math.sqrt(criterion / rows);\n    }", "javadoc_start_line": 229, "annotations_start_line": 239, "method_start_line": 239, "end_line": 246}, "steps": [{"file_path": "/src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java", "method_name": "testCircleFitting", "content": "    public void testCircleFitting() throws FunctionEvaluationException, OptimizationException {\n        Circle circle = new Circle();\n        circle.addPoint( 30.0,  68.0);\n        circle.addPoint( 50.0,  -6.0);\n        circle.addPoint(110.0, -20.0);\n        circle.addPoint( 35.0,  15.0);\n        circle.addPoint( 45.0,  97.0);\n        LevenbergMarquardtOptimizer optimizer = new LevenbergMarquardtOptimizer();\n        VectorialPointValuePair optimum =\n            optimizer.optimize(circle, new double[] { 0, 0, 0, 0, 0 }, new double[] { 1, 1, 1, 1, 1 },\n                               new double[] { 98.680, 47.345 });\n        assertTrue(optimizer.getEvaluations() < 10);\n        assertTrue(optimizer.getJacobianEvaluations() < 10);\n        double rms = optimizer.getRMS();\n        assertEquals(1.768262623567235,  Math.sqrt(circle.getN()) * rms,  1.0e-10);\n        Point2D.Double center = new Point2D.Double(optimum.getPointRef()[0], optimum.getPointRef()[1]);\n        assertEquals(69.96016176931406, circle.getRadius(center), 1.0e-10);\n        assertEquals(96.07590211815305, center.x,      1.0e-10);\n        assertEquals(48.13516790438953, center.y,      1.0e-10);\n        double[][] cov = optimizer.getCovariances();\n        assertEquals(1.839, cov[0][0], 0.001);\n        assertEquals(0.731, cov[0][1], 0.001);\n        assertEquals(cov[0][1], cov[1][0], 1.0e-14);\n        assertEquals(0.786, cov[1][1], 0.001);\n        double[] errors = optimizer.guessParametersErrors();\n        assertEquals(1.384, errors[0], 0.001);\n        assertEquals(0.905, errors[1], 0.001);\n\n        // add perfect measurements and check errors are reduced\n        double  r = circle.getRadius(center);\n        for (double d= 0; d < 2 * Math.PI; d += 0.01) {\n            circle.addPoint(center.x + r * Math.cos(d), center.y + r * Math.sin(d));\n        }\n        double[] target = new double[circle.getN()];\n        Arrays.fill(target, 0.0);\n        double[] weights = new double[circle.getN()];\n        Arrays.fill(weights, 2.0);\n        optimizer.optimize(circle, target, weights, new double[] { 98.680, 47.345 });\n        cov = optimizer.getCovariances();\n        assertEquals(0.0016, cov[0][0], 0.001);\n        assertEquals(3.2e-7, cov[0][1], 1.0e-9);\n        assertEquals(cov[0][1], cov[1][0], 1.0e-14);\n        assertEquals(0.0016, cov[1][1], 0.001);\n        errors = optimizer.guessParametersErrors();\n        assertEquals(0.004, errors[0], 0.001);\n        assertEquals(0.004, errors[1], 0.001);\n\n    }", "javadoc_start_line": 398, "annotations_start_line": 398, "method_start_line": 398, "end_line": 445}, {"file_path": "/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java", "method_name": "getRMS", "content": "    /**\n     * Get the Root Mean Square value.\n     * Get the Root Mean Square value, i.e. the root of the arithmetic\n     * mean of the square of all weighted residuals. This is related to the\n     * criterion that is minimized by the optimizer as follows: if\n     * <em>c</em> if the criterion, and <em>n</em> is the number of\n     * measurements, then the RMS is <em>sqrt (c/n)</em>.\n     *\n     * @return RMS value\n     */\n    public double getRMS() {\n        double criterion = 0;\n        for (int i = 0; i < rows; ++i) {\n            final double residual = residuals[i];\n            criterion += residual * residual * residualsWeights[i];\n        }\n        return Math.sqrt(criterion / rows);\n    }", "javadoc_start_line": 229, "annotations_start_line": 239, "method_start_line": 239, "end_line": 246}]}], "project": {"name": "Math", "version": 65}}