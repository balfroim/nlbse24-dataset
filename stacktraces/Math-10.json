{"tours": [{"failing_test": {"className": " org.apache.commons.math3.analysis.differentiation.DerivativeStructureTest", "methodName": "testAtan2SpecialCases", "error": "junit.framework.AssertionFailedError", "message": "expected:<0.0> but was:<NaN>"}, "patched_method": {"file_path": "/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java", "method_name": "atan2", "content": "    /** Compute two arguments arc tangent of a derivative structure.\n     * @param y array holding the first operand\n     * @param yOffset offset of the first operand in its array\n     * @param x array holding the second operand\n     * @param xOffset offset of the second operand in its array\n     * @param result array where result must be stored (for\n     * two arguments arc tangent the result array <em>cannot</em>\n     * be the input array)\n     * @param resultOffset offset of the result in its array\n     */\n    public void atan2(final double[] y, final int yOffset,\n                      final double[] x, final int xOffset,\n                      final double[] result, final int resultOffset) {\n\n        // compute r = sqrt(x^2+y^2)\n        double[] tmp1 = new double[getSize()];\n        multiply(x, xOffset, x, xOffset, tmp1, 0);      // x^2\n        double[] tmp2 = new double[getSize()];\n        multiply(y, yOffset, y, yOffset, tmp2, 0);      // y^2\n        add(tmp1, 0, tmp2, 0, tmp2, 0);                 // x^2 + y^2\n        rootN(tmp2, 0, 2, tmp1, 0);                     // r = sqrt(x^2 + y^2)\n\n        if (x[xOffset] >= 0) {\n\n            // compute atan2(y, x) = 2 atan(y / (r + x))\n            add(tmp1, 0, x, xOffset, tmp2, 0);          // r + x\n            divide(y, yOffset, tmp2, 0, tmp1, 0);       // y /(r + x)\n            atan(tmp1, 0, tmp2, 0);                     // atan(y / (r + x))\n            for (int i = 0; i < tmp2.length; ++i) {\n                result[resultOffset + i] = 2 * tmp2[i]; // 2 * atan(y / (r + x))\n            }\n\n        } else {\n\n            // compute atan2(y, x) = +/- pi - 2 atan(y / (r - x))\n            subtract(tmp1, 0, x, xOffset, tmp2, 0);     // r - x\n            divide(y, yOffset, tmp2, 0, tmp1, 0);       // y /(r - x)\n            atan(tmp1, 0, tmp2, 0);                     // atan(y / (r - x))\n            result[resultOffset] =\n                    ((tmp2[0] <= 0) ? -FastMath.PI : FastMath.PI) - 2 * tmp2[0]; // +/-pi - 2 * atan(y / (r - x))\n            for (int i = 1; i < tmp2.length; ++i) {\n                result[resultOffset + i] = -2 * tmp2[i]; // +/-pi - 2 * atan(y / (r - x))\n            }\n\n        }\n\n        // fix value to take special cases (+0/+0, +0/-0, -0/+0, -0/-0, +/-infinity) correctly\n\n    }", "javadoc_start_line": 1372, "annotations_start_line": 1382, "method_start_line": 1384, "end_line": 1420}, "steps": [{"file_path": "/src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java", "method_name": "testAtan2SpecialCases", "content": "    public void testAtan2SpecialCases() {\n\n        DerivativeStructure pp =\n                DerivativeStructure.atan2(new DerivativeStructure(2, 2, 1, +0.0),\n                                          new DerivativeStructure(2, 2, 1, +0.0));\n        Assert.assertEquals(0, pp.getValue(), 1.0e-15);\n        Assert.assertEquals(+1, FastMath.copySign(1, pp.getValue()), 1.0e-15);\n\n        DerivativeStructure pn =\n                DerivativeStructure.atan2(new DerivativeStructure(2, 2, 1, +0.0),\n                                          new DerivativeStructure(2, 2, 1, -0.0));\n        Assert.assertEquals(FastMath.PI, pn.getValue(), 1.0e-15);\n\n        DerivativeStructure np =\n                DerivativeStructure.atan2(new DerivativeStructure(2, 2, 1, -0.0),\n                                          new DerivativeStructure(2, 2, 1, +0.0));\n        Assert.assertEquals(0, np.getValue(), 1.0e-15);\n        Assert.assertEquals(-1, FastMath.copySign(1, np.getValue()), 1.0e-15);\n\n        DerivativeStructure nn =\n                DerivativeStructure.atan2(new DerivativeStructure(2, 2, 1, -0.0),\n                                          new DerivativeStructure(2, 2, 1, -0.0));\n        Assert.assertEquals(-FastMath.PI, nn.getValue(), 1.0e-15);\n\n    }", "javadoc_start_line": 811, "annotations_start_line": 810, "method_start_line": 811, "end_line": 835}, {"file_path": "/src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java", "method_name": "atan2", "content": "    /** Two arguments arc tangent operation.\n     * @param y first argument of the arc tangent\n     * @param x second argument of the arc tangent\n     * @return atan2(y, x)\n     * @exception DimensionMismatchException if number of free parameters or orders are inconsistent\n     */\n    public static DerivativeStructure atan2(final DerivativeStructure y, final DerivativeStructure x)\n        throws DimensionMismatchException {\n        y.compiler.checkCompatibility(x.compiler);\n        final DerivativeStructure result = new DerivativeStructure(y.compiler);\n        y.compiler.atan2(y.data, 0, x.data, 0, result.data, 0);\n        return result;\n    }", "javadoc_start_line": 748, "annotations_start_line": 754, "method_start_line": 755, "end_line": 760}]}], "project": {"name": "Math", "version": 10}}