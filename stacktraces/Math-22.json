{"tours": [{"failing_test": {"className": " org.apache.commons.math3.distribution.FDistributionTest", "methodName": "testIsSupportLowerBoundInclusive", "error": "junit.framework.AssertionFailedError", "message": "expected:<false> but was:<true>"}, "patched_method": {"file_path": "/src/main/java/org/apache/commons/math3/distribution/FDistribution.java", "method_name": "isSupportLowerBoundInclusive", "content": "    /** {@inheritDoc} */\n    public boolean isSupportLowerBoundInclusive() {\n        return true;\n    }", "javadoc_start_line": 273, "annotations_start_line": 274, "method_start_line": 274, "end_line": 276}, "steps": [{"file_path": "/src/test/java/org/apache/commons/math3/distribution/RealDistributionAbstractTest.java", "method_name": "testIsSupportLowerBoundInclusive", "content": "    /**\n     * Verify that isSupportLowerBoundInclusvie returns true iff the lower bound\n     * is finite and density is non-NaN, non-infinite there.\n     */\n    @Test\n    public void testIsSupportLowerBoundInclusive() {\n        final double lowerBound = distribution.getSupportLowerBound();\n        double result = Double.NaN;\n        result = distribution.density(lowerBound);\n        Assert.assertEquals(\n                !Double.isInfinite(lowerBound) && !Double.isNaN(result) &&\n                !Double.isInfinite(result),\n                distribution.isSupportLowerBoundInclusive());\n         \n    }", "javadoc_start_line": 342, "annotations_start_line": 346, "method_start_line": 347, "end_line": 356}, {"file_path": "/src/main/java/org/apache/commons/math3/distribution/FDistribution.java", "method_name": "isSupportLowerBoundInclusive", "content": "    /** {@inheritDoc} */\n    public boolean isSupportLowerBoundInclusive() {\n        return true;\n    }", "javadoc_start_line": 273, "annotations_start_line": 274, "method_start_line": 274, "end_line": 276}]}, {"failing_test": {"className": " org.apache.commons.math3.distribution.FDistributionTest", "methodName": "testIsSupportLowerBoundInclusive", "error": "junit.framework.AssertionFailedError", "message": "expected:<false> but was:<true>"}, "patched_method": {"file_path": "/src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java", "method_name": "isSupportUpperBoundInclusive", "content": "    /** {@inheritDoc} */\n    public boolean isSupportUpperBoundInclusive() {\n        return false;\n    }", "javadoc_start_line": 182, "annotations_start_line": 183, "method_start_line": 183, "end_line": 185}, "steps": [], "generation_failure": {"error": "Failed to generate stacktrace", "error_message": "[Errno 2] No such file or directory: './projects/Math/22/results/stacktrace-testIsSupportLowerBoundInclusive-isSupportUpperBoundInclusive.csv'"}}, {"failing_test": {"className": " org.apache.commons.math3.distribution.UniformRealDistributionTest", "methodName": "testIsSupportUpperBoundInclusive", "error": "junit.framework.AssertionFailedError", "message": "expected:<true> but was:<false>"}, "patched_method": {"file_path": "/src/main/java/org/apache/commons/math3/distribution/FDistribution.java", "method_name": "isSupportLowerBoundInclusive", "content": "    /** {@inheritDoc} */\n    public boolean isSupportLowerBoundInclusive() {\n        return true;\n    }", "javadoc_start_line": 273, "annotations_start_line": 274, "method_start_line": 274, "end_line": 276}, "steps": [], "generation_failure": {"error": "Failed to generate stacktrace", "error_message": "[Errno 2] No such file or directory: './projects/Math/22/results/stacktrace-testIsSupportUpperBoundInclusive-isSupportLowerBoundInclusive.csv'"}}, {"failing_test": {"className": " org.apache.commons.math3.distribution.UniformRealDistributionTest", "methodName": "testIsSupportUpperBoundInclusive", "error": "junit.framework.AssertionFailedError", "message": "expected:<true> but was:<false>"}, "patched_method": {"file_path": "/src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java", "method_name": "isSupportUpperBoundInclusive", "content": "    /** {@inheritDoc} */\n    public boolean isSupportUpperBoundInclusive() {\n        return false;\n    }", "javadoc_start_line": 182, "annotations_start_line": 183, "method_start_line": 183, "end_line": 185}, "steps": [{"file_path": "/src/test/java/org/apache/commons/math3/distribution/RealDistributionAbstractTest.java", "method_name": "testIsSupportUpperBoundInclusive", "content": "    /**\n     * Verify that isSupportUpperBoundInclusvie returns true iff the upper bound\n     * is finite and density is non-NaN, non-infinite there.\n     */\n    @Test\n    public void testIsSupportUpperBoundInclusive() {\n        final double upperBound = distribution.getSupportUpperBound();\n        double result = Double.NaN;\n        result = distribution.density(upperBound);\n        Assert.assertEquals(\n                !Double.isInfinite(upperBound) && !Double.isNaN(result) &&\n                !Double.isInfinite(result),\n                distribution.isSupportUpperBoundInclusive());\n         \n    }", "javadoc_start_line": 358, "annotations_start_line": 362, "method_start_line": 363, "end_line": 372}, {"file_path": "/src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java", "method_name": "isSupportUpperBoundInclusive", "content": "    /** {@inheritDoc} */\n    public boolean isSupportUpperBoundInclusive() {\n        return false;\n    }", "javadoc_start_line": 182, "annotations_start_line": 183, "method_start_line": 183, "end_line": 185}]}], "project": {"name": "Math", "version": 22}}