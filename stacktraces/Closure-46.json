{"tours": [{"failing_test": {"className": " com.google.javascript.rhino.jstype.JSTypeTest", "methodName": "testRecordTypeLeastSuperType2", "error": "junit.framework.AssertionFailedError", "message": "Expected: ({a: number, b: string}|{b: string, c: string, e: number})"}, "patched_method": {"file_path": "/src/com/google/javascript/rhino/jstype/RecordType.java", "method_name": "getLeastSupertype", "content": "  public JSType getLeastSupertype(JSType that) {\n    if (!that.isRecordType()) {\n      return super.getLeastSupertype(that);\n    }\n    RecordTypeBuilder builder = new RecordTypeBuilder(registry);\n    for (String property : properties.keySet()) {\n      if (that.toMaybeRecordType().hasProperty(property) &&\n          that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(\n              getPropertyType(property))) {\n        builder.addProperty(property, getPropertyType(property),\n            getPropertyNode(property));\n      }\n    }\n    return builder.build();\n  }", "javadoc_start_line": 141, "annotations_start_line": 140, "method_start_line": 141, "end_line": 155}, "steps": [{"file_path": "/src/com/google/javascript/rhino/jstype/RecordType.java", "method_name": "getLeastSupertype", "content": "  public JSType getLeastSupertype(JSType that) {\n    if (!that.isRecordType()) {\n      return super.getLeastSupertype(that);\n    }\n    RecordTypeBuilder builder = new RecordTypeBuilder(registry);\n    for (String property : properties.keySet()) {\n      if (that.toMaybeRecordType().hasProperty(property) &&\n          that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(\n              getPropertyType(property))) {\n        builder.addProperty(property, getPropertyType(property),\n            getPropertyNode(property));\n      }\n    }\n    return builder.build();\n  }", "javadoc_start_line": 141, "annotations_start_line": 140, "method_start_line": 141, "end_line": 155}]}, {"failing_test": {"className": " com.google.javascript.rhino.jstype.JSTypeTest", "methodName": "testRecordTypeLeastSuperType3", "error": "junit.framework.AssertionFailedError", "message": "Expected: ({a: number, b: string}|{d: number, e: string, f: string})"}, "patched_method": {"file_path": "/src/com/google/javascript/rhino/jstype/RecordType.java", "method_name": "getLeastSupertype", "content": "  public JSType getLeastSupertype(JSType that) {\n    if (!that.isRecordType()) {\n      return super.getLeastSupertype(that);\n    }\n    RecordTypeBuilder builder = new RecordTypeBuilder(registry);\n    for (String property : properties.keySet()) {\n      if (that.toMaybeRecordType().hasProperty(property) &&\n          that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(\n              getPropertyType(property))) {\n        builder.addProperty(property, getPropertyType(property),\n            getPropertyNode(property));\n      }\n    }\n    return builder.build();\n  }", "javadoc_start_line": 141, "annotations_start_line": 140, "method_start_line": 141, "end_line": 155}, "steps": [{"file_path": "/src/com/google/javascript/rhino/jstype/RecordType.java", "method_name": "getLeastSupertype", "content": "  public JSType getLeastSupertype(JSType that) {\n    if (!that.isRecordType()) {\n      return super.getLeastSupertype(that);\n    }\n    RecordTypeBuilder builder = new RecordTypeBuilder(registry);\n    for (String property : properties.keySet()) {\n      if (that.toMaybeRecordType().hasProperty(property) &&\n          that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(\n              getPropertyType(property))) {\n        builder.addProperty(property, getPropertyType(property),\n            getPropertyNode(property));\n      }\n    }\n    return builder.build();\n  }", "javadoc_start_line": 141, "annotations_start_line": 140, "method_start_line": 141, "end_line": 155}]}, {"failing_test": {"className": " com.google.javascript.rhino.jstype.RecordTypeTest", "methodName": "testSupAndInf", "error": "junit.framework.AssertionFailedError", "message": "Expected: ({a: number, b: number}|{b: number, c: number})"}, "patched_method": {"file_path": "/src/com/google/javascript/rhino/jstype/RecordType.java", "method_name": "getLeastSupertype", "content": "  public JSType getLeastSupertype(JSType that) {\n    if (!that.isRecordType()) {\n      return super.getLeastSupertype(that);\n    }\n    RecordTypeBuilder builder = new RecordTypeBuilder(registry);\n    for (String property : properties.keySet()) {\n      if (that.toMaybeRecordType().hasProperty(property) &&\n          that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(\n              getPropertyType(property))) {\n        builder.addProperty(property, getPropertyType(property),\n            getPropertyNode(property));\n      }\n    }\n    return builder.build();\n  }", "javadoc_start_line": 141, "annotations_start_line": 140, "method_start_line": 141, "end_line": 155}, "steps": [{"file_path": "/src/com/google/javascript/rhino/jstype/RecordType.java", "method_name": "getLeastSupertype", "content": "  public JSType getLeastSupertype(JSType that) {\n    if (!that.isRecordType()) {\n      return super.getLeastSupertype(that);\n    }\n    RecordTypeBuilder builder = new RecordTypeBuilder(registry);\n    for (String property : properties.keySet()) {\n      if (that.toMaybeRecordType().hasProperty(property) &&\n          that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(\n              getPropertyType(property))) {\n        builder.addProperty(property, getPropertyType(property),\n            getPropertyNode(property));\n      }\n    }\n    return builder.build();\n  }", "javadoc_start_line": 141, "annotations_start_line": 140, "method_start_line": 141, "end_line": 155}]}], "project": {"name": "Closure", "version": 46}}