{"tours": [{"failing_test": {"className": " org.joda.time.format.TestDateTimeFormatter", "methodName": "testParseLocalDate_weekyear_month_week_2010", "error": "junit.framework.AssertionFailedError", "message": "expected:<2010-01-04> but was:<2008-12-29>"}, "patched_method": {"file_path": "/src/main/java/org/joda/time/format/DateTimeParserBucket.java", "method_name": "computeMillis", "content": "    /**\n     * Computes the parsed datetime by setting the saved fields.\n     * This method is idempotent, but it is not thread-safe.\n     *\n     * @param resetFields false by default, but when true, unsaved field values are cleared\n     * @param text optional text being parsed, to be included in any error message\n     * @return milliseconds since 1970-01-01T00:00:00Z\n     * @throws IllegalArgumentException if any field is out of range\n     * @since 1.3\n     */\n    public long computeMillis(boolean resetFields, String text) {\n        SavedField[] savedFields = iSavedFields;\n        int count = iSavedFieldsCount;\n        if (iSavedFieldsShared) {\n            iSavedFields = savedFields = (SavedField[])iSavedFields.clone();\n            iSavedFieldsShared = false;\n        }\n        sort(savedFields, count);\n        if (count > 0) {\n            // alter base year for parsing if first field is month or day\n            DurationField months = DurationFieldType.months().getField(iChrono);\n            DurationField days = DurationFieldType.days().getField(iChrono);\n            DurationField first = savedFields[0].iField.getDurationField();\n            if (compareReverse(first, months) >= 0 && compareReverse(first, days) <= 0) {\n                saveField(DateTimeFieldType.year(), iDefaultYear);\n                return computeMillis(resetFields, text);\n            }\n        }\n\n        long millis = iMillis;\n        try {\n            for (int i = 0; i < count; i++) {\n                millis = savedFields[i].set(millis, resetFields);\n            }\n        } catch (IllegalFieldValueException e) {\n            if (text != null) {\n                e.prependMessage(\"Cannot parse \\\"\" + text + '\"');\n            }\n            throw e;\n        }\n        \n        if (iZone == null) {\n            millis -= iOffset;\n        } else {\n            int offset = iZone.getOffsetFromLocal(millis);\n            millis -= offset;\n            if (offset != iZone.getOffset(millis)) {\n                String message =\n                    \"Illegal instant due to time zone offset transition (\" + iZone + ')';\n                if (text != null) {\n                    message = \"Cannot parse \\\"\" + text + \"\\\": \" + message;\n                }\n                throw new IllegalArgumentException(message);\n            }\n        }\n        \n        return millis;\n    }", "javadoc_start_line": 321, "annotations_start_line": 331, "method_start_line": 331, "end_line": 378}, "steps": [{"file_path": "/src/test/java/org/joda/time/format/TestDateTimeFormatter.java", "method_name": "testParseLocalDate_weekyear_month_week_2010", "content": "    public void testParseLocalDate_weekyear_month_week_2010() {\n        Chronology chrono = GJChronology.getInstanceUTC();\n        DateTimeFormatter f = DateTimeFormat.forPattern(\"xxxx-MM-ww\").withChronology(chrono);\n        assertEquals(new LocalDate(2010, 1, 4, chrono), f.parseLocalDate(\"2010-01-01\"));\n    }", "javadoc_start_line": 425, "annotations_start_line": 425, "method_start_line": 425, "end_line": 429}, {"file_path": "/src/main/java/org/joda/time/format/DateTimeFormatter.java", "method_name": "parseLocalDate", "content": "    /**\n     * Parses only the local date from the given text, returning a new LocalDate.\n     * <p>\n     * This will parse the text fully according to the formatter, using the UTC zone.\n     * Once parsed, only the local date will be used.\n     * This means that any parsed time, time-zone or offset field is completely ignored.\n     * It also means that the zone and offset-parsed settings are ignored.\n     *\n     * @param text  the text to parse, not null\n     * @return the parsed date, never null\n     * @throws UnsupportedOperationException if parsing is not supported\n     * @throws IllegalArgumentException if the text to parse is invalid\n     * @since 2.0\n     */\n    public LocalDate parseLocalDate(String text) {\n        return parseLocalDateTime(text).toLocalDate();\n    }", "javadoc_start_line": 744, "annotations_start_line": 758, "method_start_line": 758, "end_line": 760}, {"file_path": "/src/main/java/org/joda/time/format/DateTimeFormatter.java", "method_name": "parseLocalDateTime", "content": "    /**\n     * Parses only the local date-time from the given text, returning a new LocalDate.\n     * <p>\n     * This will parse the text fully according to the formatter, using the UTC zone.\n     * Once parsed, only the local date-time will be used.\n     * This means that any parsed time-zone or offset field is completely ignored.\n     * It also means that the zone and offset-parsed settings are ignored.\n     *\n     * @param text  the text to parse, not null\n     * @return the parsed date-time, never null\n     * @throws UnsupportedOperationException if parsing is not supported\n     * @throws IllegalArgumentException if the text to parse is invalid\n     * @since 2.0\n     */\n    public LocalDateTime parseLocalDateTime(String text) {\n        DateTimeParser parser = requireParser();\n        \n        Chronology chrono = selectChronology(null).withUTC();  // always use UTC, avoiding DST gaps\n        DateTimeParserBucket bucket = new DateTimeParserBucket(0, chrono, iLocale, iPivotYear, iDefaultYear);\n        int newPos = parser.parseInto(bucket, text, 0);\n        if (newPos >= 0) {\n            if (newPos >= text.length()) {\n                long millis = bucket.computeMillis(true, text);\n                if (bucket.getZone() == null) {  // treat withOffsetParsed() as being true\n                    int parsedOffset = bucket.getOffset();\n                    DateTimeZone parsedZone = DateTimeZone.forOffsetMillis(parsedOffset);\n                    chrono = chrono.withZone(parsedZone);\n                }\n                return new LocalDateTime(millis, chrono);\n            }\n        } else {\n            newPos = ~newPos;\n        }\n        throw new IllegalArgumentException(FormatUtils.createErrorMessage(text, newPos));\n    }", "javadoc_start_line": 780, "annotations_start_line": 794, "method_start_line": 794, "end_line": 814}, {"file_path": "/src/main/java/org/joda/time/format/DateTimeParserBucket.java", "method_name": "computeMillis", "content": "    /**\n     * Computes the parsed datetime by setting the saved fields.\n     * This method is idempotent, but it is not thread-safe.\n     *\n     * @param resetFields false by default, but when true, unsaved field values are cleared\n     * @param text optional text being parsed, to be included in any error message\n     * @return milliseconds since 1970-01-01T00:00:00Z\n     * @throws IllegalArgumentException if any field is out of range\n     * @since 1.3\n     */\n    public long computeMillis(boolean resetFields, String text) {\n        SavedField[] savedFields = iSavedFields;\n        int count = iSavedFieldsCount;\n        if (iSavedFieldsShared) {\n            iSavedFields = savedFields = (SavedField[])iSavedFields.clone();\n            iSavedFieldsShared = false;\n        }\n        sort(savedFields, count);\n        if (count > 0) {\n            // alter base year for parsing if first field is month or day\n            DurationField months = DurationFieldType.months().getField(iChrono);\n            DurationField days = DurationFieldType.days().getField(iChrono);\n            DurationField first = savedFields[0].iField.getDurationField();\n            if (compareReverse(first, months) >= 0 && compareReverse(first, days) <= 0) {\n                saveField(DateTimeFieldType.year(), iDefaultYear);\n                return computeMillis(resetFields, text);\n            }\n        }\n\n        long millis = iMillis;\n        try {\n            for (int i = 0; i < count; i++) {\n                millis = savedFields[i].set(millis, resetFields);\n            }\n        } catch (IllegalFieldValueException e) {\n            if (text != null) {\n                e.prependMessage(\"Cannot parse \\\"\" + text + '\"');\n            }\n            throw e;\n        }\n        \n        if (iZone == null) {\n            millis -= iOffset;\n        } else {\n            int offset = iZone.getOffsetFromLocal(millis);\n            millis -= offset;\n            if (offset != iZone.getOffset(millis)) {\n                String message =\n                    \"Illegal instant due to time zone offset transition (\" + iZone + ')';\n                if (text != null) {\n                    message = \"Cannot parse \\\"\" + text + \"\\\": \" + message;\n                }\n                throw new IllegalArgumentException(message);\n            }\n        }\n        \n        return millis;\n    }", "javadoc_start_line": 321, "annotations_start_line": 331, "method_start_line": 331, "end_line": 378}]}, {"failing_test": {"className": " org.joda.time.format.TestDateTimeFormatter", "methodName": "testParseLocalDate_weekyear_month_week_2011", "error": "junit.framework.AssertionFailedError", "message": "expected:<2011-01-03> but was:<2010-01-04>"}, "patched_method": {"file_path": "/src/main/java/org/joda/time/format/DateTimeParserBucket.java", "method_name": "computeMillis", "content": "    /**\n     * Computes the parsed datetime by setting the saved fields.\n     * This method is idempotent, but it is not thread-safe.\n     *\n     * @param resetFields false by default, but when true, unsaved field values are cleared\n     * @param text optional text being parsed, to be included in any error message\n     * @return milliseconds since 1970-01-01T00:00:00Z\n     * @throws IllegalArgumentException if any field is out of range\n     * @since 1.3\n     */\n    public long computeMillis(boolean resetFields, String text) {\n        SavedField[] savedFields = iSavedFields;\n        int count = iSavedFieldsCount;\n        if (iSavedFieldsShared) {\n            iSavedFields = savedFields = (SavedField[])iSavedFields.clone();\n            iSavedFieldsShared = false;\n        }\n        sort(savedFields, count);\n        if (count > 0) {\n            // alter base year for parsing if first field is month or day\n            DurationField months = DurationFieldType.months().getField(iChrono);\n            DurationField days = DurationFieldType.days().getField(iChrono);\n            DurationField first = savedFields[0].iField.getDurationField();\n            if (compareReverse(first, months) >= 0 && compareReverse(first, days) <= 0) {\n                saveField(DateTimeFieldType.year(), iDefaultYear);\n                return computeMillis(resetFields, text);\n            }\n        }\n\n        long millis = iMillis;\n        try {\n            for (int i = 0; i < count; i++) {\n                millis = savedFields[i].set(millis, resetFields);\n            }\n        } catch (IllegalFieldValueException e) {\n            if (text != null) {\n                e.prependMessage(\"Cannot parse \\\"\" + text + '\"');\n            }\n            throw e;\n        }\n        \n        if (iZone == null) {\n            millis -= iOffset;\n        } else {\n            int offset = iZone.getOffsetFromLocal(millis);\n            millis -= offset;\n            if (offset != iZone.getOffset(millis)) {\n                String message =\n                    \"Illegal instant due to time zone offset transition (\" + iZone + ')';\n                if (text != null) {\n                    message = \"Cannot parse \\\"\" + text + \"\\\": \" + message;\n                }\n                throw new IllegalArgumentException(message);\n            }\n        }\n        \n        return millis;\n    }", "javadoc_start_line": 321, "annotations_start_line": 331, "method_start_line": 331, "end_line": 378}, "steps": [{"file_path": "/src/test/java/org/joda/time/format/TestDateTimeFormatter.java", "method_name": "testParseLocalDate_weekyear_month_week_2011", "content": "    public void testParseLocalDate_weekyear_month_week_2011() {\n        Chronology chrono = GJChronology.getInstanceUTC();\n        DateTimeFormatter f = DateTimeFormat.forPattern(\"xxxx-MM-ww\").withChronology(chrono);\n        assertEquals(new LocalDate(2011, 1, 3, chrono), f.parseLocalDate(\"2011-01-01\"));\n    }", "javadoc_start_line": 431, "annotations_start_line": 431, "method_start_line": 431, "end_line": 435}, {"file_path": "/src/main/java/org/joda/time/format/DateTimeFormatter.java", "method_name": "parseLocalDate", "content": "    /**\n     * Parses only the local date from the given text, returning a new LocalDate.\n     * <p>\n     * This will parse the text fully according to the formatter, using the UTC zone.\n     * Once parsed, only the local date will be used.\n     * This means that any parsed time, time-zone or offset field is completely ignored.\n     * It also means that the zone and offset-parsed settings are ignored.\n     *\n     * @param text  the text to parse, not null\n     * @return the parsed date, never null\n     * @throws UnsupportedOperationException if parsing is not supported\n     * @throws IllegalArgumentException if the text to parse is invalid\n     * @since 2.0\n     */\n    public LocalDate parseLocalDate(String text) {\n        return parseLocalDateTime(text).toLocalDate();\n    }", "javadoc_start_line": 744, "annotations_start_line": 758, "method_start_line": 758, "end_line": 760}, {"file_path": "/src/main/java/org/joda/time/format/DateTimeFormatter.java", "method_name": "parseLocalDateTime", "content": "    /**\n     * Parses only the local date-time from the given text, returning a new LocalDate.\n     * <p>\n     * This will parse the text fully according to the formatter, using the UTC zone.\n     * Once parsed, only the local date-time will be used.\n     * This means that any parsed time-zone or offset field is completely ignored.\n     * It also means that the zone and offset-parsed settings are ignored.\n     *\n     * @param text  the text to parse, not null\n     * @return the parsed date-time, never null\n     * @throws UnsupportedOperationException if parsing is not supported\n     * @throws IllegalArgumentException if the text to parse is invalid\n     * @since 2.0\n     */\n    public LocalDateTime parseLocalDateTime(String text) {\n        DateTimeParser parser = requireParser();\n        \n        Chronology chrono = selectChronology(null).withUTC();  // always use UTC, avoiding DST gaps\n        DateTimeParserBucket bucket = new DateTimeParserBucket(0, chrono, iLocale, iPivotYear, iDefaultYear);\n        int newPos = parser.parseInto(bucket, text, 0);\n        if (newPos >= 0) {\n            if (newPos >= text.length()) {\n                long millis = bucket.computeMillis(true, text);\n                if (bucket.getZone() == null) {  // treat withOffsetParsed() as being true\n                    int parsedOffset = bucket.getOffset();\n                    DateTimeZone parsedZone = DateTimeZone.forOffsetMillis(parsedOffset);\n                    chrono = chrono.withZone(parsedZone);\n                }\n                return new LocalDateTime(millis, chrono);\n            }\n        } else {\n            newPos = ~newPos;\n        }\n        throw new IllegalArgumentException(FormatUtils.createErrorMessage(text, newPos));\n    }", "javadoc_start_line": 780, "annotations_start_line": 794, "method_start_line": 794, "end_line": 814}, {"file_path": "/src/main/java/org/joda/time/format/DateTimeParserBucket.java", "method_name": "computeMillis", "content": "    /**\n     * Computes the parsed datetime by setting the saved fields.\n     * This method is idempotent, but it is not thread-safe.\n     *\n     * @param resetFields false by default, but when true, unsaved field values are cleared\n     * @param text optional text being parsed, to be included in any error message\n     * @return milliseconds since 1970-01-01T00:00:00Z\n     * @throws IllegalArgumentException if any field is out of range\n     * @since 1.3\n     */\n    public long computeMillis(boolean resetFields, String text) {\n        SavedField[] savedFields = iSavedFields;\n        int count = iSavedFieldsCount;\n        if (iSavedFieldsShared) {\n            iSavedFields = savedFields = (SavedField[])iSavedFields.clone();\n            iSavedFieldsShared = false;\n        }\n        sort(savedFields, count);\n        if (count > 0) {\n            // alter base year for parsing if first field is month or day\n            DurationField months = DurationFieldType.months().getField(iChrono);\n            DurationField days = DurationFieldType.days().getField(iChrono);\n            DurationField first = savedFields[0].iField.getDurationField();\n            if (compareReverse(first, months) >= 0 && compareReverse(first, days) <= 0) {\n                saveField(DateTimeFieldType.year(), iDefaultYear);\n                return computeMillis(resetFields, text);\n            }\n        }\n\n        long millis = iMillis;\n        try {\n            for (int i = 0; i < count; i++) {\n                millis = savedFields[i].set(millis, resetFields);\n            }\n        } catch (IllegalFieldValueException e) {\n            if (text != null) {\n                e.prependMessage(\"Cannot parse \\\"\" + text + '\"');\n            }\n            throw e;\n        }\n        \n        if (iZone == null) {\n            millis -= iOffset;\n        } else {\n            int offset = iZone.getOffsetFromLocal(millis);\n            millis -= offset;\n            if (offset != iZone.getOffset(millis)) {\n                String message =\n                    \"Illegal instant due to time zone offset transition (\" + iZone + ')';\n                if (text != null) {\n                    message = \"Cannot parse \\\"\" + text + \"\\\": \" + message;\n                }\n                throw new IllegalArgumentException(message);\n            }\n        }\n        \n        return millis;\n    }", "javadoc_start_line": 321, "annotations_start_line": 331, "method_start_line": 331, "end_line": 378}]}, {"failing_test": {"className": " org.joda.time.format.TestDateTimeFormatter", "methodName": "testParseLocalDate_weekyear_month_week_2012", "error": "junit.framework.AssertionFailedError", "message": "expected:<2012-01-02> but was:<2011-01-03>"}, "patched_method": {"file_path": "/src/main/java/org/joda/time/format/DateTimeParserBucket.java", "method_name": "computeMillis", "content": "    /**\n     * Computes the parsed datetime by setting the saved fields.\n     * This method is idempotent, but it is not thread-safe.\n     *\n     * @param resetFields false by default, but when true, unsaved field values are cleared\n     * @param text optional text being parsed, to be included in any error message\n     * @return milliseconds since 1970-01-01T00:00:00Z\n     * @throws IllegalArgumentException if any field is out of range\n     * @since 1.3\n     */\n    public long computeMillis(boolean resetFields, String text) {\n        SavedField[] savedFields = iSavedFields;\n        int count = iSavedFieldsCount;\n        if (iSavedFieldsShared) {\n            iSavedFields = savedFields = (SavedField[])iSavedFields.clone();\n            iSavedFieldsShared = false;\n        }\n        sort(savedFields, count);\n        if (count > 0) {\n            // alter base year for parsing if first field is month or day\n            DurationField months = DurationFieldType.months().getField(iChrono);\n            DurationField days = DurationFieldType.days().getField(iChrono);\n            DurationField first = savedFields[0].iField.getDurationField();\n            if (compareReverse(first, months) >= 0 && compareReverse(first, days) <= 0) {\n                saveField(DateTimeFieldType.year(), iDefaultYear);\n                return computeMillis(resetFields, text);\n            }\n        }\n\n        long millis = iMillis;\n        try {\n            for (int i = 0; i < count; i++) {\n                millis = savedFields[i].set(millis, resetFields);\n            }\n        } catch (IllegalFieldValueException e) {\n            if (text != null) {\n                e.prependMessage(\"Cannot parse \\\"\" + text + '\"');\n            }\n            throw e;\n        }\n        \n        if (iZone == null) {\n            millis -= iOffset;\n        } else {\n            int offset = iZone.getOffsetFromLocal(millis);\n            millis -= offset;\n            if (offset != iZone.getOffset(millis)) {\n                String message =\n                    \"Illegal instant due to time zone offset transition (\" + iZone + ')';\n                if (text != null) {\n                    message = \"Cannot parse \\\"\" + text + \"\\\": \" + message;\n                }\n                throw new IllegalArgumentException(message);\n            }\n        }\n        \n        return millis;\n    }", "javadoc_start_line": 321, "annotations_start_line": 331, "method_start_line": 331, "end_line": 378}, "steps": [{"file_path": "/src/test/java/org/joda/time/format/TestDateTimeFormatter.java", "method_name": "testParseLocalDate_weekyear_month_week_2012", "content": "    public void testParseLocalDate_weekyear_month_week_2012() {\n        Chronology chrono = GJChronology.getInstanceUTC();\n        DateTimeFormatter f = DateTimeFormat.forPattern(\"xxxx-MM-ww\").withChronology(chrono);\n        assertEquals(new LocalDate(2012, 1, 2, chrono), f.parseLocalDate(\"2012-01-01\"));\n    }", "javadoc_start_line": 437, "annotations_start_line": 437, "method_start_line": 437, "end_line": 441}, {"file_path": "/src/main/java/org/joda/time/format/DateTimeFormatter.java", "method_name": "parseLocalDate", "content": "    /**\n     * Parses only the local date from the given text, returning a new LocalDate.\n     * <p>\n     * This will parse the text fully according to the formatter, using the UTC zone.\n     * Once parsed, only the local date will be used.\n     * This means that any parsed time, time-zone or offset field is completely ignored.\n     * It also means that the zone and offset-parsed settings are ignored.\n     *\n     * @param text  the text to parse, not null\n     * @return the parsed date, never null\n     * @throws UnsupportedOperationException if parsing is not supported\n     * @throws IllegalArgumentException if the text to parse is invalid\n     * @since 2.0\n     */\n    public LocalDate parseLocalDate(String text) {\n        return parseLocalDateTime(text).toLocalDate();\n    }", "javadoc_start_line": 744, "annotations_start_line": 758, "method_start_line": 758, "end_line": 760}, {"file_path": "/src/main/java/org/joda/time/format/DateTimeFormatter.java", "method_name": "parseLocalDateTime", "content": "    /**\n     * Parses only the local date-time from the given text, returning a new LocalDate.\n     * <p>\n     * This will parse the text fully according to the formatter, using the UTC zone.\n     * Once parsed, only the local date-time will be used.\n     * This means that any parsed time-zone or offset field is completely ignored.\n     * It also means that the zone and offset-parsed settings are ignored.\n     *\n     * @param text  the text to parse, not null\n     * @return the parsed date-time, never null\n     * @throws UnsupportedOperationException if parsing is not supported\n     * @throws IllegalArgumentException if the text to parse is invalid\n     * @since 2.0\n     */\n    public LocalDateTime parseLocalDateTime(String text) {\n        DateTimeParser parser = requireParser();\n        \n        Chronology chrono = selectChronology(null).withUTC();  // always use UTC, avoiding DST gaps\n        DateTimeParserBucket bucket = new DateTimeParserBucket(0, chrono, iLocale, iPivotYear, iDefaultYear);\n        int newPos = parser.parseInto(bucket, text, 0);\n        if (newPos >= 0) {\n            if (newPos >= text.length()) {\n                long millis = bucket.computeMillis(true, text);\n                if (bucket.getZone() == null) {  // treat withOffsetParsed() as being true\n                    int parsedOffset = bucket.getOffset();\n                    DateTimeZone parsedZone = DateTimeZone.forOffsetMillis(parsedOffset);\n                    chrono = chrono.withZone(parsedZone);\n                }\n                return new LocalDateTime(millis, chrono);\n            }\n        } else {\n            newPos = ~newPos;\n        }\n        throw new IllegalArgumentException(FormatUtils.createErrorMessage(text, newPos));\n    }", "javadoc_start_line": 780, "annotations_start_line": 794, "method_start_line": 794, "end_line": 814}, {"file_path": "/src/main/java/org/joda/time/format/DateTimeParserBucket.java", "method_name": "computeMillis", "content": "    /**\n     * Computes the parsed datetime by setting the saved fields.\n     * This method is idempotent, but it is not thread-safe.\n     *\n     * @param resetFields false by default, but when true, unsaved field values are cleared\n     * @param text optional text being parsed, to be included in any error message\n     * @return milliseconds since 1970-01-01T00:00:00Z\n     * @throws IllegalArgumentException if any field is out of range\n     * @since 1.3\n     */\n    public long computeMillis(boolean resetFields, String text) {\n        SavedField[] savedFields = iSavedFields;\n        int count = iSavedFieldsCount;\n        if (iSavedFieldsShared) {\n            iSavedFields = savedFields = (SavedField[])iSavedFields.clone();\n            iSavedFieldsShared = false;\n        }\n        sort(savedFields, count);\n        if (count > 0) {\n            // alter base year for parsing if first field is month or day\n            DurationField months = DurationFieldType.months().getField(iChrono);\n            DurationField days = DurationFieldType.days().getField(iChrono);\n            DurationField first = savedFields[0].iField.getDurationField();\n            if (compareReverse(first, months) >= 0 && compareReverse(first, days) <= 0) {\n                saveField(DateTimeFieldType.year(), iDefaultYear);\n                return computeMillis(resetFields, text);\n            }\n        }\n\n        long millis = iMillis;\n        try {\n            for (int i = 0; i < count; i++) {\n                millis = savedFields[i].set(millis, resetFields);\n            }\n        } catch (IllegalFieldValueException e) {\n            if (text != null) {\n                e.prependMessage(\"Cannot parse \\\"\" + text + '\"');\n            }\n            throw e;\n        }\n        \n        if (iZone == null) {\n            millis -= iOffset;\n        } else {\n            int offset = iZone.getOffsetFromLocal(millis);\n            millis -= offset;\n            if (offset != iZone.getOffset(millis)) {\n                String message =\n                    \"Illegal instant due to time zone offset transition (\" + iZone + ')';\n                if (text != null) {\n                    message = \"Cannot parse \\\"\" + text + \"\\\": \" + message;\n                }\n                throw new IllegalArgumentException(message);\n            }\n        }\n        \n        return millis;\n    }", "javadoc_start_line": 321, "annotations_start_line": 331, "method_start_line": 331, "end_line": 378}]}, {"failing_test": {"className": " org.joda.time.format.TestDateTimeFormatter", "methodName": "testParseLocalDate_year_month_week_2010", "error": "junit.framework.AssertionFailedError", "message": "expected:<2010-01-04> but was:<2008-12-29>"}, "patched_method": {"file_path": "/src/main/java/org/joda/time/format/DateTimeParserBucket.java", "method_name": "computeMillis", "content": "    /**\n     * Computes the parsed datetime by setting the saved fields.\n     * This method is idempotent, but it is not thread-safe.\n     *\n     * @param resetFields false by default, but when true, unsaved field values are cleared\n     * @param text optional text being parsed, to be included in any error message\n     * @return milliseconds since 1970-01-01T00:00:00Z\n     * @throws IllegalArgumentException if any field is out of range\n     * @since 1.3\n     */\n    public long computeMillis(boolean resetFields, String text) {\n        SavedField[] savedFields = iSavedFields;\n        int count = iSavedFieldsCount;\n        if (iSavedFieldsShared) {\n            iSavedFields = savedFields = (SavedField[])iSavedFields.clone();\n            iSavedFieldsShared = false;\n        }\n        sort(savedFields, count);\n        if (count > 0) {\n            // alter base year for parsing if first field is month or day\n            DurationField months = DurationFieldType.months().getField(iChrono);\n            DurationField days = DurationFieldType.days().getField(iChrono);\n            DurationField first = savedFields[0].iField.getDurationField();\n            if (compareReverse(first, months) >= 0 && compareReverse(first, days) <= 0) {\n                saveField(DateTimeFieldType.year(), iDefaultYear);\n                return computeMillis(resetFields, text);\n            }\n        }\n\n        long millis = iMillis;\n        try {\n            for (int i = 0; i < count; i++) {\n                millis = savedFields[i].set(millis, resetFields);\n            }\n        } catch (IllegalFieldValueException e) {\n            if (text != null) {\n                e.prependMessage(\"Cannot parse \\\"\" + text + '\"');\n            }\n            throw e;\n        }\n        \n        if (iZone == null) {\n            millis -= iOffset;\n        } else {\n            int offset = iZone.getOffsetFromLocal(millis);\n            millis -= offset;\n            if (offset != iZone.getOffset(millis)) {\n                String message =\n                    \"Illegal instant due to time zone offset transition (\" + iZone + ')';\n                if (text != null) {\n                    message = \"Cannot parse \\\"\" + text + \"\\\": \" + message;\n                }\n                throw new IllegalArgumentException(message);\n            }\n        }\n        \n        return millis;\n    }", "javadoc_start_line": 321, "annotations_start_line": 331, "method_start_line": 331, "end_line": 378}, "steps": [{"file_path": "/src/test/java/org/joda/time/format/TestDateTimeFormatter.java", "method_name": "testParseLocalDate_year_month_week_2010", "content": "    public void testParseLocalDate_year_month_week_2010() {\n        Chronology chrono = GJChronology.getInstanceUTC();\n        DateTimeFormatter f = DateTimeFormat.forPattern(\"yyyy-MM-ww\").withChronology(chrono);\n        assertEquals(new LocalDate(2010, 1, 4, chrono), f.parseLocalDate(\"2010-01-01\"));\n    }", "javadoc_start_line": 451, "annotations_start_line": 451, "method_start_line": 451, "end_line": 455}, {"file_path": "/src/main/java/org/joda/time/format/DateTimeFormatter.java", "method_name": "parseLocalDate", "content": "    /**\n     * Parses only the local date from the given text, returning a new LocalDate.\n     * <p>\n     * This will parse the text fully according to the formatter, using the UTC zone.\n     * Once parsed, only the local date will be used.\n     * This means that any parsed time, time-zone or offset field is completely ignored.\n     * It also means that the zone and offset-parsed settings are ignored.\n     *\n     * @param text  the text to parse, not null\n     * @return the parsed date, never null\n     * @throws UnsupportedOperationException if parsing is not supported\n     * @throws IllegalArgumentException if the text to parse is invalid\n     * @since 2.0\n     */\n    public LocalDate parseLocalDate(String text) {\n        return parseLocalDateTime(text).toLocalDate();\n    }", "javadoc_start_line": 744, "annotations_start_line": 758, "method_start_line": 758, "end_line": 760}, {"file_path": "/src/main/java/org/joda/time/format/DateTimeFormatter.java", "method_name": "parseLocalDateTime", "content": "    /**\n     * Parses only the local date-time from the given text, returning a new LocalDate.\n     * <p>\n     * This will parse the text fully according to the formatter, using the UTC zone.\n     * Once parsed, only the local date-time will be used.\n     * This means that any parsed time-zone or offset field is completely ignored.\n     * It also means that the zone and offset-parsed settings are ignored.\n     *\n     * @param text  the text to parse, not null\n     * @return the parsed date-time, never null\n     * @throws UnsupportedOperationException if parsing is not supported\n     * @throws IllegalArgumentException if the text to parse is invalid\n     * @since 2.0\n     */\n    public LocalDateTime parseLocalDateTime(String text) {\n        DateTimeParser parser = requireParser();\n        \n        Chronology chrono = selectChronology(null).withUTC();  // always use UTC, avoiding DST gaps\n        DateTimeParserBucket bucket = new DateTimeParserBucket(0, chrono, iLocale, iPivotYear, iDefaultYear);\n        int newPos = parser.parseInto(bucket, text, 0);\n        if (newPos >= 0) {\n            if (newPos >= text.length()) {\n                long millis = bucket.computeMillis(true, text);\n                if (bucket.getZone() == null) {  // treat withOffsetParsed() as being true\n                    int parsedOffset = bucket.getOffset();\n                    DateTimeZone parsedZone = DateTimeZone.forOffsetMillis(parsedOffset);\n                    chrono = chrono.withZone(parsedZone);\n                }\n                return new LocalDateTime(millis, chrono);\n            }\n        } else {\n            newPos = ~newPos;\n        }\n        throw new IllegalArgumentException(FormatUtils.createErrorMessage(text, newPos));\n    }", "javadoc_start_line": 780, "annotations_start_line": 794, "method_start_line": 794, "end_line": 814}, {"file_path": "/src/main/java/org/joda/time/format/DateTimeParserBucket.java", "method_name": "computeMillis", "content": "    /**\n     * Computes the parsed datetime by setting the saved fields.\n     * This method is idempotent, but it is not thread-safe.\n     *\n     * @param resetFields false by default, but when true, unsaved field values are cleared\n     * @param text optional text being parsed, to be included in any error message\n     * @return milliseconds since 1970-01-01T00:00:00Z\n     * @throws IllegalArgumentException if any field is out of range\n     * @since 1.3\n     */\n    public long computeMillis(boolean resetFields, String text) {\n        SavedField[] savedFields = iSavedFields;\n        int count = iSavedFieldsCount;\n        if (iSavedFieldsShared) {\n            iSavedFields = savedFields = (SavedField[])iSavedFields.clone();\n            iSavedFieldsShared = false;\n        }\n        sort(savedFields, count);\n        if (count > 0) {\n            // alter base year for parsing if first field is month or day\n            DurationField months = DurationFieldType.months().getField(iChrono);\n            DurationField days = DurationFieldType.days().getField(iChrono);\n            DurationField first = savedFields[0].iField.getDurationField();\n            if (compareReverse(first, months) >= 0 && compareReverse(first, days) <= 0) {\n                saveField(DateTimeFieldType.year(), iDefaultYear);\n                return computeMillis(resetFields, text);\n            }\n        }\n\n        long millis = iMillis;\n        try {\n            for (int i = 0; i < count; i++) {\n                millis = savedFields[i].set(millis, resetFields);\n            }\n        } catch (IllegalFieldValueException e) {\n            if (text != null) {\n                e.prependMessage(\"Cannot parse \\\"\" + text + '\"');\n            }\n            throw e;\n        }\n        \n        if (iZone == null) {\n            millis -= iOffset;\n        } else {\n            int offset = iZone.getOffsetFromLocal(millis);\n            millis -= offset;\n            if (offset != iZone.getOffset(millis)) {\n                String message =\n                    \"Illegal instant due to time zone offset transition (\" + iZone + ')';\n                if (text != null) {\n                    message = \"Cannot parse \\\"\" + text + \"\\\": \" + message;\n                }\n                throw new IllegalArgumentException(message);\n            }\n        }\n        \n        return millis;\n    }", "javadoc_start_line": 321, "annotations_start_line": 331, "method_start_line": 331, "end_line": 378}]}, {"failing_test": {"className": " org.joda.time.format.TestDateTimeFormatter", "methodName": "testParseLocalDate_year_month_week_2011", "error": "junit.framework.AssertionFailedError", "message": "expected:<2011-01-03> but was:<2010-01-04>"}, "patched_method": {"file_path": "/src/main/java/org/joda/time/format/DateTimeParserBucket.java", "method_name": "computeMillis", "content": "    /**\n     * Computes the parsed datetime by setting the saved fields.\n     * This method is idempotent, but it is not thread-safe.\n     *\n     * @param resetFields false by default, but when true, unsaved field values are cleared\n     * @param text optional text being parsed, to be included in any error message\n     * @return milliseconds since 1970-01-01T00:00:00Z\n     * @throws IllegalArgumentException if any field is out of range\n     * @since 1.3\n     */\n    public long computeMillis(boolean resetFields, String text) {\n        SavedField[] savedFields = iSavedFields;\n        int count = iSavedFieldsCount;\n        if (iSavedFieldsShared) {\n            iSavedFields = savedFields = (SavedField[])iSavedFields.clone();\n            iSavedFieldsShared = false;\n        }\n        sort(savedFields, count);\n        if (count > 0) {\n            // alter base year for parsing if first field is month or day\n            DurationField months = DurationFieldType.months().getField(iChrono);\n            DurationField days = DurationFieldType.days().getField(iChrono);\n            DurationField first = savedFields[0].iField.getDurationField();\n            if (compareReverse(first, months) >= 0 && compareReverse(first, days) <= 0) {\n                saveField(DateTimeFieldType.year(), iDefaultYear);\n                return computeMillis(resetFields, text);\n            }\n        }\n\n        long millis = iMillis;\n        try {\n            for (int i = 0; i < count; i++) {\n                millis = savedFields[i].set(millis, resetFields);\n            }\n        } catch (IllegalFieldValueException e) {\n            if (text != null) {\n                e.prependMessage(\"Cannot parse \\\"\" + text + '\"');\n            }\n            throw e;\n        }\n        \n        if (iZone == null) {\n            millis -= iOffset;\n        } else {\n            int offset = iZone.getOffsetFromLocal(millis);\n            millis -= offset;\n            if (offset != iZone.getOffset(millis)) {\n                String message =\n                    \"Illegal instant due to time zone offset transition (\" + iZone + ')';\n                if (text != null) {\n                    message = \"Cannot parse \\\"\" + text + \"\\\": \" + message;\n                }\n                throw new IllegalArgumentException(message);\n            }\n        }\n        \n        return millis;\n    }", "javadoc_start_line": 321, "annotations_start_line": 331, "method_start_line": 331, "end_line": 378}, "steps": [{"file_path": "/src/test/java/org/joda/time/format/TestDateTimeFormatter.java", "method_name": "testParseLocalDate_year_month_week_2011", "content": "    public void testParseLocalDate_year_month_week_2011() {\n        Chronology chrono = GJChronology.getInstanceUTC();\n        DateTimeFormatter f = DateTimeFormat.forPattern(\"yyyy-MM-ww\").withChronology(chrono);\n        assertEquals(new LocalDate(2011, 1, 3, chrono), f.parseLocalDate(\"2011-01-01\"));\n    }", "javadoc_start_line": 457, "annotations_start_line": 457, "method_start_line": 457, "end_line": 461}, {"file_path": "/src/main/java/org/joda/time/format/DateTimeFormatter.java", "method_name": "parseLocalDate", "content": "    /**\n     * Parses only the local date from the given text, returning a new LocalDate.\n     * <p>\n     * This will parse the text fully according to the formatter, using the UTC zone.\n     * Once parsed, only the local date will be used.\n     * This means that any parsed time, time-zone or offset field is completely ignored.\n     * It also means that the zone and offset-parsed settings are ignored.\n     *\n     * @param text  the text to parse, not null\n     * @return the parsed date, never null\n     * @throws UnsupportedOperationException if parsing is not supported\n     * @throws IllegalArgumentException if the text to parse is invalid\n     * @since 2.0\n     */\n    public LocalDate parseLocalDate(String text) {\n        return parseLocalDateTime(text).toLocalDate();\n    }", "javadoc_start_line": 744, "annotations_start_line": 758, "method_start_line": 758, "end_line": 760}, {"file_path": "/src/main/java/org/joda/time/format/DateTimeFormatter.java", "method_name": "parseLocalDateTime", "content": "    /**\n     * Parses only the local date-time from the given text, returning a new LocalDate.\n     * <p>\n     * This will parse the text fully according to the formatter, using the UTC zone.\n     * Once parsed, only the local date-time will be used.\n     * This means that any parsed time-zone or offset field is completely ignored.\n     * It also means that the zone and offset-parsed settings are ignored.\n     *\n     * @param text  the text to parse, not null\n     * @return the parsed date-time, never null\n     * @throws UnsupportedOperationException if parsing is not supported\n     * @throws IllegalArgumentException if the text to parse is invalid\n     * @since 2.0\n     */\n    public LocalDateTime parseLocalDateTime(String text) {\n        DateTimeParser parser = requireParser();\n        \n        Chronology chrono = selectChronology(null).withUTC();  // always use UTC, avoiding DST gaps\n        DateTimeParserBucket bucket = new DateTimeParserBucket(0, chrono, iLocale, iPivotYear, iDefaultYear);\n        int newPos = parser.parseInto(bucket, text, 0);\n        if (newPos >= 0) {\n            if (newPos >= text.length()) {\n                long millis = bucket.computeMillis(true, text);\n                if (bucket.getZone() == null) {  // treat withOffsetParsed() as being true\n                    int parsedOffset = bucket.getOffset();\n                    DateTimeZone parsedZone = DateTimeZone.forOffsetMillis(parsedOffset);\n                    chrono = chrono.withZone(parsedZone);\n                }\n                return new LocalDateTime(millis, chrono);\n            }\n        } else {\n            newPos = ~newPos;\n        }\n        throw new IllegalArgumentException(FormatUtils.createErrorMessage(text, newPos));\n    }", "javadoc_start_line": 780, "annotations_start_line": 794, "method_start_line": 794, "end_line": 814}, {"file_path": "/src/main/java/org/joda/time/format/DateTimeParserBucket.java", "method_name": "computeMillis", "content": "    /**\n     * Computes the parsed datetime by setting the saved fields.\n     * This method is idempotent, but it is not thread-safe.\n     *\n     * @param resetFields false by default, but when true, unsaved field values are cleared\n     * @param text optional text being parsed, to be included in any error message\n     * @return milliseconds since 1970-01-01T00:00:00Z\n     * @throws IllegalArgumentException if any field is out of range\n     * @since 1.3\n     */\n    public long computeMillis(boolean resetFields, String text) {\n        SavedField[] savedFields = iSavedFields;\n        int count = iSavedFieldsCount;\n        if (iSavedFieldsShared) {\n            iSavedFields = savedFields = (SavedField[])iSavedFields.clone();\n            iSavedFieldsShared = false;\n        }\n        sort(savedFields, count);\n        if (count > 0) {\n            // alter base year for parsing if first field is month or day\n            DurationField months = DurationFieldType.months().getField(iChrono);\n            DurationField days = DurationFieldType.days().getField(iChrono);\n            DurationField first = savedFields[0].iField.getDurationField();\n            if (compareReverse(first, months) >= 0 && compareReverse(first, days) <= 0) {\n                saveField(DateTimeFieldType.year(), iDefaultYear);\n                return computeMillis(resetFields, text);\n            }\n        }\n\n        long millis = iMillis;\n        try {\n            for (int i = 0; i < count; i++) {\n                millis = savedFields[i].set(millis, resetFields);\n            }\n        } catch (IllegalFieldValueException e) {\n            if (text != null) {\n                e.prependMessage(\"Cannot parse \\\"\" + text + '\"');\n            }\n            throw e;\n        }\n        \n        if (iZone == null) {\n            millis -= iOffset;\n        } else {\n            int offset = iZone.getOffsetFromLocal(millis);\n            millis -= offset;\n            if (offset != iZone.getOffset(millis)) {\n                String message =\n                    \"Illegal instant due to time zone offset transition (\" + iZone + ')';\n                if (text != null) {\n                    message = \"Cannot parse \\\"\" + text + \"\\\": \" + message;\n                }\n                throw new IllegalArgumentException(message);\n            }\n        }\n        \n        return millis;\n    }", "javadoc_start_line": 321, "annotations_start_line": 331, "method_start_line": 331, "end_line": 378}]}, {"failing_test": {"className": " org.joda.time.format.TestDateTimeFormatter", "methodName": "testParseLocalDate_year_month_week_2012", "error": "junit.framework.AssertionFailedError", "message": "expected:<2012-01-02> but was:<2011-01-03>"}, "patched_method": {"file_path": "/src/main/java/org/joda/time/format/DateTimeParserBucket.java", "method_name": "computeMillis", "content": "    /**\n     * Computes the parsed datetime by setting the saved fields.\n     * This method is idempotent, but it is not thread-safe.\n     *\n     * @param resetFields false by default, but when true, unsaved field values are cleared\n     * @param text optional text being parsed, to be included in any error message\n     * @return milliseconds since 1970-01-01T00:00:00Z\n     * @throws IllegalArgumentException if any field is out of range\n     * @since 1.3\n     */\n    public long computeMillis(boolean resetFields, String text) {\n        SavedField[] savedFields = iSavedFields;\n        int count = iSavedFieldsCount;\n        if (iSavedFieldsShared) {\n            iSavedFields = savedFields = (SavedField[])iSavedFields.clone();\n            iSavedFieldsShared = false;\n        }\n        sort(savedFields, count);\n        if (count > 0) {\n            // alter base year for parsing if first field is month or day\n            DurationField months = DurationFieldType.months().getField(iChrono);\n            DurationField days = DurationFieldType.days().getField(iChrono);\n            DurationField first = savedFields[0].iField.getDurationField();\n            if (compareReverse(first, months) >= 0 && compareReverse(first, days) <= 0) {\n                saveField(DateTimeFieldType.year(), iDefaultYear);\n                return computeMillis(resetFields, text);\n            }\n        }\n\n        long millis = iMillis;\n        try {\n            for (int i = 0; i < count; i++) {\n                millis = savedFields[i].set(millis, resetFields);\n            }\n        } catch (IllegalFieldValueException e) {\n            if (text != null) {\n                e.prependMessage(\"Cannot parse \\\"\" + text + '\"');\n            }\n            throw e;\n        }\n        \n        if (iZone == null) {\n            millis -= iOffset;\n        } else {\n            int offset = iZone.getOffsetFromLocal(millis);\n            millis -= offset;\n            if (offset != iZone.getOffset(millis)) {\n                String message =\n                    \"Illegal instant due to time zone offset transition (\" + iZone + ')';\n                if (text != null) {\n                    message = \"Cannot parse \\\"\" + text + \"\\\": \" + message;\n                }\n                throw new IllegalArgumentException(message);\n            }\n        }\n        \n        return millis;\n    }", "javadoc_start_line": 321, "annotations_start_line": 331, "method_start_line": 331, "end_line": 378}, "steps": [{"file_path": "/src/test/java/org/joda/time/format/TestDateTimeFormatter.java", "method_name": "testParseLocalDate_year_month_week_2012", "content": "    public void testParseLocalDate_year_month_week_2012() {\n        Chronology chrono = GJChronology.getInstanceUTC();\n        DateTimeFormatter f = DateTimeFormat.forPattern(\"yyyy-MM-ww\").withChronology(chrono);\n        assertEquals(new LocalDate(2012, 1, 2, chrono), f.parseLocalDate(\"2012-01-01\"));\n    }", "javadoc_start_line": 463, "annotations_start_line": 463, "method_start_line": 463, "end_line": 467}, {"file_path": "/src/main/java/org/joda/time/format/DateTimeFormatter.java", "method_name": "parseLocalDate", "content": "    /**\n     * Parses only the local date from the given text, returning a new LocalDate.\n     * <p>\n     * This will parse the text fully according to the formatter, using the UTC zone.\n     * Once parsed, only the local date will be used.\n     * This means that any parsed time, time-zone or offset field is completely ignored.\n     * It also means that the zone and offset-parsed settings are ignored.\n     *\n     * @param text  the text to parse, not null\n     * @return the parsed date, never null\n     * @throws UnsupportedOperationException if parsing is not supported\n     * @throws IllegalArgumentException if the text to parse is invalid\n     * @since 2.0\n     */\n    public LocalDate parseLocalDate(String text) {\n        return parseLocalDateTime(text).toLocalDate();\n    }", "javadoc_start_line": 744, "annotations_start_line": 758, "method_start_line": 758, "end_line": 760}, {"file_path": "/src/main/java/org/joda/time/format/DateTimeFormatter.java", "method_name": "parseLocalDateTime", "content": "    /**\n     * Parses only the local date-time from the given text, returning a new LocalDate.\n     * <p>\n     * This will parse the text fully according to the formatter, using the UTC zone.\n     * Once parsed, only the local date-time will be used.\n     * This means that any parsed time-zone or offset field is completely ignored.\n     * It also means that the zone and offset-parsed settings are ignored.\n     *\n     * @param text  the text to parse, not null\n     * @return the parsed date-time, never null\n     * @throws UnsupportedOperationException if parsing is not supported\n     * @throws IllegalArgumentException if the text to parse is invalid\n     * @since 2.0\n     */\n    public LocalDateTime parseLocalDateTime(String text) {\n        DateTimeParser parser = requireParser();\n        \n        Chronology chrono = selectChronology(null).withUTC();  // always use UTC, avoiding DST gaps\n        DateTimeParserBucket bucket = new DateTimeParserBucket(0, chrono, iLocale, iPivotYear, iDefaultYear);\n        int newPos = parser.parseInto(bucket, text, 0);\n        if (newPos >= 0) {\n            if (newPos >= text.length()) {\n                long millis = bucket.computeMillis(true, text);\n                if (bucket.getZone() == null) {  // treat withOffsetParsed() as being true\n                    int parsedOffset = bucket.getOffset();\n                    DateTimeZone parsedZone = DateTimeZone.forOffsetMillis(parsedOffset);\n                    chrono = chrono.withZone(parsedZone);\n                }\n                return new LocalDateTime(millis, chrono);\n            }\n        } else {\n            newPos = ~newPos;\n        }\n        throw new IllegalArgumentException(FormatUtils.createErrorMessage(text, newPos));\n    }", "javadoc_start_line": 780, "annotations_start_line": 794, "method_start_line": 794, "end_line": 814}, {"file_path": "/src/main/java/org/joda/time/format/DateTimeParserBucket.java", "method_name": "computeMillis", "content": "    /**\n     * Computes the parsed datetime by setting the saved fields.\n     * This method is idempotent, but it is not thread-safe.\n     *\n     * @param resetFields false by default, but when true, unsaved field values are cleared\n     * @param text optional text being parsed, to be included in any error message\n     * @return milliseconds since 1970-01-01T00:00:00Z\n     * @throws IllegalArgumentException if any field is out of range\n     * @since 1.3\n     */\n    public long computeMillis(boolean resetFields, String text) {\n        SavedField[] savedFields = iSavedFields;\n        int count = iSavedFieldsCount;\n        if (iSavedFieldsShared) {\n            iSavedFields = savedFields = (SavedField[])iSavedFields.clone();\n            iSavedFieldsShared = false;\n        }\n        sort(savedFields, count);\n        if (count > 0) {\n            // alter base year for parsing if first field is month or day\n            DurationField months = DurationFieldType.months().getField(iChrono);\n            DurationField days = DurationFieldType.days().getField(iChrono);\n            DurationField first = savedFields[0].iField.getDurationField();\n            if (compareReverse(first, months) >= 0 && compareReverse(first, days) <= 0) {\n                saveField(DateTimeFieldType.year(), iDefaultYear);\n                return computeMillis(resetFields, text);\n            }\n        }\n\n        long millis = iMillis;\n        try {\n            for (int i = 0; i < count; i++) {\n                millis = savedFields[i].set(millis, resetFields);\n            }\n        } catch (IllegalFieldValueException e) {\n            if (text != null) {\n                e.prependMessage(\"Cannot parse \\\"\" + text + '\"');\n            }\n            throw e;\n        }\n        \n        if (iZone == null) {\n            millis -= iOffset;\n        } else {\n            int offset = iZone.getOffsetFromLocal(millis);\n            millis -= offset;\n            if (offset != iZone.getOffset(millis)) {\n                String message =\n                    \"Illegal instant due to time zone offset transition (\" + iZone + ')';\n                if (text != null) {\n                    message = \"Cannot parse \\\"\" + text + \"\\\": \" + message;\n                }\n                throw new IllegalArgumentException(message);\n            }\n        }\n        \n        return millis;\n    }", "javadoc_start_line": 321, "annotations_start_line": 331, "method_start_line": 331, "end_line": 378}]}, {"failing_test": {"className": " org.joda.time.format.TestDateTimeFormatter", "methodName": "testParseLocalDate_year_month_week_2016", "error": "junit.framework.AssertionFailedError", "message": "expected:<2016-01-04> but was:<2014-12-29>"}, "patched_method": {"file_path": "/src/main/java/org/joda/time/format/DateTimeParserBucket.java", "method_name": "computeMillis", "content": "    /**\n     * Computes the parsed datetime by setting the saved fields.\n     * This method is idempotent, but it is not thread-safe.\n     *\n     * @param resetFields false by default, but when true, unsaved field values are cleared\n     * @param text optional text being parsed, to be included in any error message\n     * @return milliseconds since 1970-01-01T00:00:00Z\n     * @throws IllegalArgumentException if any field is out of range\n     * @since 1.3\n     */\n    public long computeMillis(boolean resetFields, String text) {\n        SavedField[] savedFields = iSavedFields;\n        int count = iSavedFieldsCount;\n        if (iSavedFieldsShared) {\n            iSavedFields = savedFields = (SavedField[])iSavedFields.clone();\n            iSavedFieldsShared = false;\n        }\n        sort(savedFields, count);\n        if (count > 0) {\n            // alter base year for parsing if first field is month or day\n            DurationField months = DurationFieldType.months().getField(iChrono);\n            DurationField days = DurationFieldType.days().getField(iChrono);\n            DurationField first = savedFields[0].iField.getDurationField();\n            if (compareReverse(first, months) >= 0 && compareReverse(first, days) <= 0) {\n                saveField(DateTimeFieldType.year(), iDefaultYear);\n                return computeMillis(resetFields, text);\n            }\n        }\n\n        long millis = iMillis;\n        try {\n            for (int i = 0; i < count; i++) {\n                millis = savedFields[i].set(millis, resetFields);\n            }\n        } catch (IllegalFieldValueException e) {\n            if (text != null) {\n                e.prependMessage(\"Cannot parse \\\"\" + text + '\"');\n            }\n            throw e;\n        }\n        \n        if (iZone == null) {\n            millis -= iOffset;\n        } else {\n            int offset = iZone.getOffsetFromLocal(millis);\n            millis -= offset;\n            if (offset != iZone.getOffset(millis)) {\n                String message =\n                    \"Illegal instant due to time zone offset transition (\" + iZone + ')';\n                if (text != null) {\n                    message = \"Cannot parse \\\"\" + text + \"\\\": \" + message;\n                }\n                throw new IllegalArgumentException(message);\n            }\n        }\n        \n        return millis;\n    }", "javadoc_start_line": 321, "annotations_start_line": 331, "method_start_line": 331, "end_line": 378}, "steps": [{"file_path": "/src/test/java/org/joda/time/format/TestDateTimeFormatter.java", "method_name": "testParseLocalDate_year_month_week_2016", "content": "    public void testParseLocalDate_year_month_week_2016() {\n        Chronology chrono = GJChronology.getInstanceUTC();\n        DateTimeFormatter f = DateTimeFormat.forPattern(\"yyyy-MM-ww\").withChronology(chrono);\n        assertEquals(new LocalDate(2016, 1, 4, chrono), f.parseLocalDate(\"2016-01-01\"));\n    }", "javadoc_start_line": 487, "annotations_start_line": 487, "method_start_line": 487, "end_line": 491}, {"file_path": "/src/main/java/org/joda/time/format/DateTimeFormatter.java", "method_name": "parseLocalDate", "content": "    /**\n     * Parses only the local date from the given text, returning a new LocalDate.\n     * <p>\n     * This will parse the text fully according to the formatter, using the UTC zone.\n     * Once parsed, only the local date will be used.\n     * This means that any parsed time, time-zone or offset field is completely ignored.\n     * It also means that the zone and offset-parsed settings are ignored.\n     *\n     * @param text  the text to parse, not null\n     * @return the parsed date, never null\n     * @throws UnsupportedOperationException if parsing is not supported\n     * @throws IllegalArgumentException if the text to parse is invalid\n     * @since 2.0\n     */\n    public LocalDate parseLocalDate(String text) {\n        return parseLocalDateTime(text).toLocalDate();\n    }", "javadoc_start_line": 744, "annotations_start_line": 758, "method_start_line": 758, "end_line": 760}, {"file_path": "/src/main/java/org/joda/time/format/DateTimeFormatter.java", "method_name": "parseLocalDateTime", "content": "    /**\n     * Parses only the local date-time from the given text, returning a new LocalDate.\n     * <p>\n     * This will parse the text fully according to the formatter, using the UTC zone.\n     * Once parsed, only the local date-time will be used.\n     * This means that any parsed time-zone or offset field is completely ignored.\n     * It also means that the zone and offset-parsed settings are ignored.\n     *\n     * @param text  the text to parse, not null\n     * @return the parsed date-time, never null\n     * @throws UnsupportedOperationException if parsing is not supported\n     * @throws IllegalArgumentException if the text to parse is invalid\n     * @since 2.0\n     */\n    public LocalDateTime parseLocalDateTime(String text) {\n        DateTimeParser parser = requireParser();\n        \n        Chronology chrono = selectChronology(null).withUTC();  // always use UTC, avoiding DST gaps\n        DateTimeParserBucket bucket = new DateTimeParserBucket(0, chrono, iLocale, iPivotYear, iDefaultYear);\n        int newPos = parser.parseInto(bucket, text, 0);\n        if (newPos >= 0) {\n            if (newPos >= text.length()) {\n                long millis = bucket.computeMillis(true, text);\n                if (bucket.getZone() == null) {  // treat withOffsetParsed() as being true\n                    int parsedOffset = bucket.getOffset();\n                    DateTimeZone parsedZone = DateTimeZone.forOffsetMillis(parsedOffset);\n                    chrono = chrono.withZone(parsedZone);\n                }\n                return new LocalDateTime(millis, chrono);\n            }\n        } else {\n            newPos = ~newPos;\n        }\n        throw new IllegalArgumentException(FormatUtils.createErrorMessage(text, newPos));\n    }", "javadoc_start_line": 780, "annotations_start_line": 794, "method_start_line": 794, "end_line": 814}, {"file_path": "/src/main/java/org/joda/time/format/DateTimeParserBucket.java", "method_name": "computeMillis", "content": "    /**\n     * Computes the parsed datetime by setting the saved fields.\n     * This method is idempotent, but it is not thread-safe.\n     *\n     * @param resetFields false by default, but when true, unsaved field values are cleared\n     * @param text optional text being parsed, to be included in any error message\n     * @return milliseconds since 1970-01-01T00:00:00Z\n     * @throws IllegalArgumentException if any field is out of range\n     * @since 1.3\n     */\n    public long computeMillis(boolean resetFields, String text) {\n        SavedField[] savedFields = iSavedFields;\n        int count = iSavedFieldsCount;\n        if (iSavedFieldsShared) {\n            iSavedFields = savedFields = (SavedField[])iSavedFields.clone();\n            iSavedFieldsShared = false;\n        }\n        sort(savedFields, count);\n        if (count > 0) {\n            // alter base year for parsing if first field is month or day\n            DurationField months = DurationFieldType.months().getField(iChrono);\n            DurationField days = DurationFieldType.days().getField(iChrono);\n            DurationField first = savedFields[0].iField.getDurationField();\n            if (compareReverse(first, months) >= 0 && compareReverse(first, days) <= 0) {\n                saveField(DateTimeFieldType.year(), iDefaultYear);\n                return computeMillis(resetFields, text);\n            }\n        }\n\n        long millis = iMillis;\n        try {\n            for (int i = 0; i < count; i++) {\n                millis = savedFields[i].set(millis, resetFields);\n            }\n        } catch (IllegalFieldValueException e) {\n            if (text != null) {\n                e.prependMessage(\"Cannot parse \\\"\" + text + '\"');\n            }\n            throw e;\n        }\n        \n        if (iZone == null) {\n            millis -= iOffset;\n        } else {\n            int offset = iZone.getOffsetFromLocal(millis);\n            millis -= offset;\n            if (offset != iZone.getOffset(millis)) {\n                String message =\n                    \"Illegal instant due to time zone offset transition (\" + iZone + ')';\n                if (text != null) {\n                    message = \"Cannot parse \\\"\" + text + \"\\\": \" + message;\n                }\n                throw new IllegalArgumentException(message);\n            }\n        }\n        \n        return millis;\n    }", "javadoc_start_line": 321, "annotations_start_line": 331, "method_start_line": 331, "end_line": 378}]}], "project": {"name": "Time", "version": 24}}