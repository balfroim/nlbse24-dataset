{"tours": [{"failing_test": {"className": " org.joda.time.TestDateTimeZoneCutover", "methodName": "testWithSecondOfMinuteInDstChange", "error": "junit.framework.ComparisonFailure", "message": "expected:<...10-31T02:30:00.123+0[2]:00> but was:<...10-31T02:30:00.123+0[1]:00>"}, "patched_method": {"file_path": "/src/main/java/org/joda/time/chrono/ZonedChronology.java", "method_name": "roundCeiling", "content": "        public long roundCeiling(long instant) {\n            if (iTimeField) {\n                int offset = getOffsetToAdd(instant);\n                instant = iField.roundCeiling(instant + offset);\n                return instant - offset;\n            } else {\n                long localInstant = iZone.convertUTCToLocal(instant);\n                localInstant = iField.roundCeiling(localInstant);\n                return iZone.convertLocalToUTC(localInstant, false);\n            }\n        }", "javadoc_start_line": 532, "annotations_start_line": 532, "method_start_line": 532, "end_line": 542}, "steps": [], "generation_failure": {"error": "Failed to generate stacktrace", "error_message": "[Errno 2] No such file or directory: './projects/Time/26/results/stacktrace-testWithSecondOfMinuteInDstChange-roundCeiling.csv'"}}, {"failing_test": {"className": " org.joda.time.TestDateTimeZoneCutover", "methodName": "testWithSecondOfMinuteInDstChange", "error": "junit.framework.ComparisonFailure", "message": "expected:<...10-31T02:30:00.123+0[2]:00> but was:<...10-31T02:30:00.123+0[1]:00>"}, "patched_method": {"file_path": "/src/main/java/org/joda/time/chrono/ZonedChronology.java", "method_name": "roundFloor", "content": "        public long roundFloor(long instant) {\n            if (iTimeField) {\n                int offset = getOffsetToAdd(instant);\n                instant = iField.roundFloor(instant + offset);\n                return instant - offset;\n            } else {\n                long localInstant = iZone.convertUTCToLocal(instant);\n                localInstant = iField.roundFloor(localInstant);\n                return iZone.convertLocalToUTC(localInstant, false);\n            }\n        }", "javadoc_start_line": 520, "annotations_start_line": 520, "method_start_line": 520, "end_line": 530}, "steps": [], "generation_failure": {"error": "Failed to generate stacktrace", "error_message": "[Errno 2] No such file or directory: './projects/Time/26/results/stacktrace-testWithSecondOfMinuteInDstChange-roundFloor.csv'"}}, {"failing_test": {"className": " org.joda.time.TestDateTimeZoneCutover", "methodName": "testWithSecondOfMinuteInDstChange", "error": "junit.framework.ComparisonFailure", "message": "expected:<...10-31T02:30:00.123+0[2]:00> but was:<...10-31T02:30:00.123+0[1]:00>"}, "patched_method": {"file_path": "/src/main/java/org/joda/time/chrono/ZonedChronology.java", "method_name": "set", "content": "        public long set(long instant, String text, Locale locale) {\n            // cannot verify that new value stuck because set may be lenient\n            long localInstant = iZone.convertUTCToLocal(instant);\n            localInstant = iField.set(localInstant, text, locale);\n            return iZone.convertLocalToUTC(localInstant, false);\n        }", "javadoc_start_line": 477, "annotations_start_line": 477, "method_start_line": 477, "end_line": 482}, "steps": [], "generation_failure": {"error": "Failed to generate stacktrace", "error_message": "[Errno 2] No such file or directory: './projects/Time/26/results/stacktrace-testWithSecondOfMinuteInDstChange-set.csv'"}}, {"failing_test": {"className": " org.joda.time.TestDateTimeZoneCutover", "methodName": "testWithSecondOfMinuteInDstChange", "error": "junit.framework.ComparisonFailure", "message": "expected:<...10-31T02:30:00.123+0[2]:00> but was:<...10-31T02:30:00.123+0[1]:00>"}, "patched_method": {"file_path": "/src/main/java/org/joda/time/chrono/ZonedChronology.java", "method_name": "set", "content": "        public long set(long instant, int value) {\n            long localInstant = iZone.convertUTCToLocal(instant);\n            localInstant = iField.set(localInstant, value);\n            long result = iZone.convertLocalToUTC(localInstant, false);\n            if (get(result) != value) {\n                throw new IllegalFieldValueException(iField.getType(), new Integer(value),\n                    \"Illegal instant due to time zone offset transition: \" +\n                    DateTimeFormat.forPattern(\"yyyy-MM-dd'T'HH:mm:ss.SSS\").print(new Instant(localInstant)) +\n                    \" (\" + iZone.getID() + \")\");\n            }\n            return result;\n        }", "javadoc_start_line": 464, "annotations_start_line": 464, "method_start_line": 464, "end_line": 475}, "steps": [{"file_path": "/src/test/java/org/joda/time/TestDateTimeZoneCutover.java", "method_name": "testWithSecondOfMinuteInDstChange", "content": "    public void testWithSecondOfMinuteInDstChange() {\n        DateTime dateTime = new DateTime(\"2010-10-31T02:30:10.123+02:00\", ZONE_PARIS);\n        assertEquals(\"2010-10-31T02:30:10.123+02:00\", dateTime.toString());\n        DateTime test = dateTime.withSecondOfMinute(0);\n        assertEquals(\"2010-10-31T02:30:00.123+02:00\", test.toString());\n    }", "javadoc_start_line": 1097, "annotations_start_line": 1097, "method_start_line": 1097, "end_line": 1102}, {"file_path": "/src/main/java/org/joda/time/DateTime.java", "method_name": "withSecondOfMinute", "content": "    /**\n     * Returns a copy of this datetime with the second of minute field updated.\n     * <p>\n     * DateTime is immutable, so there are no set methods.\n     * Instead, this method returns a new instance with the value of\n     * second of minute changed.\n     *\n     * @param second  the second of minute to set\n     * @return a copy of this object with the field set\n     * @throws IllegalArgumentException if the value is invalid\n     * @since 1.3\n     */\n    public DateTime withSecondOfMinute(int second) {\n        return withMillis(getChronology().secondOfMinute().set(getMillis(), second));\n    }", "javadoc_start_line": 1665, "annotations_start_line": 1677, "method_start_line": 1677, "end_line": 1679}]}, {"failing_test": {"className": " org.joda.time.TestDateTimeZoneCutover", "methodName": "testWithSecondOfMinuteInDstChange", "error": "junit.framework.ComparisonFailure", "message": "expected:<...10-31T02:30:00.123+0[2]:00> but was:<...10-31T02:30:00.123+0[1]:00>"}, "patched_method": {"file_path": "/src/main/java/org/joda/time/chrono/ZonedChronology.java", "method_name": "addWrapField", "content": "        public long addWrapField(long instant, int value) {\n            if (iTimeField) {\n                int offset = getOffsetToAdd(instant);\n                long localInstant = iField.addWrapField(instant + offset, value);\n                return localInstant - offset;\n            } else {\n                long localInstant = iZone.convertUTCToLocal(instant);\n                localInstant = iField.addWrapField(localInstant, value);\n                return iZone.convertLocalToUTC(localInstant, false);\n            }\n        }", "javadoc_start_line": 452, "annotations_start_line": 452, "method_start_line": 452, "end_line": 462}, "steps": [], "generation_failure": {"error": "Failed to generate stacktrace", "error_message": "[Errno 2] No such file or directory: './projects/Time/26/results/stacktrace-testWithSecondOfMinuteInDstChange-addWrapField.csv'"}}, {"failing_test": {"className": " org.joda.time.TestDateTimeZoneCutover", "methodName": "testWithSecondOfMinuteInDstChange", "error": "junit.framework.ComparisonFailure", "message": "expected:<...10-31T02:30:00.123+0[2]:00> but was:<...10-31T02:30:00.123+0[1]:00>"}, "patched_method": {"file_path": "/src/main/java/org/joda/time/chrono/ZonedChronology.java", "method_name": "add", "content": "        public long add(long instant, long value) {\n            if (iTimeField) {\n                int offset = getOffsetToAdd(instant);\n                long localInstant = iField.add(instant + offset, value);\n                return localInstant - offset;\n            } else {\n               long localInstant = iZone.convertUTCToLocal(instant);\n               localInstant = iField.add(localInstant, value);\n               return iZone.convertLocalToUTC(localInstant, false);\n            }\n        }", "javadoc_start_line": 440, "annotations_start_line": 440, "method_start_line": 440, "end_line": 450}, "steps": [], "generation_failure": {"error": "Failed to generate stacktrace", "error_message": "[Errno 2] No such file or directory: './projects/Time/26/results/stacktrace-testWithSecondOfMinuteInDstChange-add.csv'"}}, {"failing_test": {"className": " org.joda.time.TestDateTimeZoneCutover", "methodName": "testWithSecondOfMinuteInDstChange", "error": "junit.framework.ComparisonFailure", "message": "expected:<...10-31T02:30:00.123+0[2]:00> but was:<...10-31T02:30:00.123+0[1]:00>"}, "patched_method": {"file_path": "/src/main/java/org/joda/time/chrono/ZonedChronology.java", "method_name": "add", "content": "        public long add(long instant, int value) {\n            if (iTimeField) {\n                int offset = getOffsetToAdd(instant);\n                long localInstant = iField.add(instant + offset, value);\n                return localInstant - offset;\n            } else {\n               long localInstant = iZone.convertUTCToLocal(instant);\n               localInstant = iField.add(localInstant, value);\n               return iZone.convertLocalToUTC(localInstant, false);\n            }\n        }", "javadoc_start_line": 428, "annotations_start_line": 428, "method_start_line": 428, "end_line": 438}, "steps": [], "generation_failure": {"error": "Failed to generate stacktrace", "error_message": "[Errno 2] No such file or directory: './projects/Time/26/results/stacktrace-testWithSecondOfMinuteInDstChange-add.csv'"}}, {"failing_test": {"className": " org.joda.time.TestDateTimeZoneCutover", "methodName": "testWithMinuteOfHourInDstChange", "error": "junit.framework.ComparisonFailure", "message": "expected:<...10-31T02:00:10.123+0[2]:00> but was:<...10-31T02:00:10.123+0[1]:00>"}, "patched_method": {"file_path": "/src/main/java/org/joda/time/chrono/ZonedChronology.java", "method_name": "roundCeiling", "content": "        public long roundCeiling(long instant) {\n            if (iTimeField) {\n                int offset = getOffsetToAdd(instant);\n                instant = iField.roundCeiling(instant + offset);\n                return instant - offset;\n            } else {\n                long localInstant = iZone.convertUTCToLocal(instant);\n                localInstant = iField.roundCeiling(localInstant);\n                return iZone.convertLocalToUTC(localInstant, false);\n            }\n        }", "javadoc_start_line": 532, "annotations_start_line": 532, "method_start_line": 532, "end_line": 542}, "steps": [], "generation_failure": {"error": "Failed to generate stacktrace", "error_message": "[Errno 2] No such file or directory: './projects/Time/26/results/stacktrace-testWithMinuteOfHourInDstChange-roundCeiling.csv'"}}, {"failing_test": {"className": " org.joda.time.TestDateTimeZoneCutover", "methodName": "testWithMinuteOfHourInDstChange", "error": "junit.framework.ComparisonFailure", "message": "expected:<...10-31T02:00:10.123+0[2]:00> but was:<...10-31T02:00:10.123+0[1]:00>"}, "patched_method": {"file_path": "/src/main/java/org/joda/time/chrono/ZonedChronology.java", "method_name": "roundFloor", "content": "        public long roundFloor(long instant) {\n            if (iTimeField) {\n                int offset = getOffsetToAdd(instant);\n                instant = iField.roundFloor(instant + offset);\n                return instant - offset;\n            } else {\n                long localInstant = iZone.convertUTCToLocal(instant);\n                localInstant = iField.roundFloor(localInstant);\n                return iZone.convertLocalToUTC(localInstant, false);\n            }\n        }", "javadoc_start_line": 520, "annotations_start_line": 520, "method_start_line": 520, "end_line": 530}, "steps": [], "generation_failure": {"error": "Failed to generate stacktrace", "error_message": "[Errno 2] No such file or directory: './projects/Time/26/results/stacktrace-testWithMinuteOfHourInDstChange-roundFloor.csv'"}}, {"failing_test": {"className": " org.joda.time.TestDateTimeZoneCutover", "methodName": "testWithMinuteOfHourInDstChange", "error": "junit.framework.ComparisonFailure", "message": "expected:<...10-31T02:00:10.123+0[2]:00> but was:<...10-31T02:00:10.123+0[1]:00>"}, "patched_method": {"file_path": "/src/main/java/org/joda/time/chrono/ZonedChronology.java", "method_name": "set", "content": "        public long set(long instant, String text, Locale locale) {\n            // cannot verify that new value stuck because set may be lenient\n            long localInstant = iZone.convertUTCToLocal(instant);\n            localInstant = iField.set(localInstant, text, locale);\n            return iZone.convertLocalToUTC(localInstant, false);\n        }", "javadoc_start_line": 477, "annotations_start_line": 477, "method_start_line": 477, "end_line": 482}, "steps": [], "generation_failure": {"error": "Failed to generate stacktrace", "error_message": "[Errno 2] No such file or directory: './projects/Time/26/results/stacktrace-testWithMinuteOfHourInDstChange-set.csv'"}}, {"failing_test": {"className": " org.joda.time.TestDateTimeZoneCutover", "methodName": "testWithMinuteOfHourInDstChange", "error": "junit.framework.ComparisonFailure", "message": "expected:<...10-31T02:00:10.123+0[2]:00> but was:<...10-31T02:00:10.123+0[1]:00>"}, "patched_method": {"file_path": "/src/main/java/org/joda/time/chrono/ZonedChronology.java", "method_name": "set", "content": "        public long set(long instant, int value) {\n            long localInstant = iZone.convertUTCToLocal(instant);\n            localInstant = iField.set(localInstant, value);\n            long result = iZone.convertLocalToUTC(localInstant, false);\n            if (get(result) != value) {\n                throw new IllegalFieldValueException(iField.getType(), new Integer(value),\n                    \"Illegal instant due to time zone offset transition: \" +\n                    DateTimeFormat.forPattern(\"yyyy-MM-dd'T'HH:mm:ss.SSS\").print(new Instant(localInstant)) +\n                    \" (\" + iZone.getID() + \")\");\n            }\n            return result;\n        }", "javadoc_start_line": 464, "annotations_start_line": 464, "method_start_line": 464, "end_line": 475}, "steps": [{"file_path": "/src/test/java/org/joda/time/TestDateTimeZoneCutover.java", "method_name": "testWithMinuteOfHourInDstChange", "content": "    public void testWithMinuteOfHourInDstChange() {\n        DateTime dateTime = new DateTime(\"2010-10-31T02:30:10.123+02:00\", ZONE_PARIS);\n        assertEquals(\"2010-10-31T02:30:10.123+02:00\", dateTime.toString());\n        DateTime test = dateTime.withMinuteOfHour(0);\n        assertEquals(\"2010-10-31T02:00:10.123+02:00\", test.toString());\n    }", "javadoc_start_line": 1090, "annotations_start_line": 1090, "method_start_line": 1090, "end_line": 1095}, {"file_path": "/src/main/java/org/joda/time/DateTime.java", "method_name": "withMinuteOfHour", "content": "    /**\n     * Returns a copy of this datetime with the minute of hour updated.\n     * <p>\n     * DateTime is immutable, so there are no set methods.\n     * Instead, this method returns a new instance with the value of\n     * minute of hour changed.\n     *\n     * @param minute  the minute of hour to set\n     * @return a copy of this object with the field set\n     * @throws IllegalArgumentException if the value is invalid\n     * @since 1.3\n     */\n    public DateTime withMinuteOfHour(int minute) {\n        return withMillis(getChronology().minuteOfHour().set(getMillis(), minute));\n    }", "javadoc_start_line": 1649, "annotations_start_line": 1661, "method_start_line": 1661, "end_line": 1663}]}, {"failing_test": {"className": " org.joda.time.TestDateTimeZoneCutover", "methodName": "testWithMinuteOfHourInDstChange", "error": "junit.framework.ComparisonFailure", "message": "expected:<...10-31T02:00:10.123+0[2]:00> but was:<...10-31T02:00:10.123+0[1]:00>"}, "patched_method": {"file_path": "/src/main/java/org/joda/time/chrono/ZonedChronology.java", "method_name": "addWrapField", "content": "        public long addWrapField(long instant, int value) {\n            if (iTimeField) {\n                int offset = getOffsetToAdd(instant);\n                long localInstant = iField.addWrapField(instant + offset, value);\n                return localInstant - offset;\n            } else {\n                long localInstant = iZone.convertUTCToLocal(instant);\n                localInstant = iField.addWrapField(localInstant, value);\n                return iZone.convertLocalToUTC(localInstant, false);\n            }\n        }", "javadoc_start_line": 452, "annotations_start_line": 452, "method_start_line": 452, "end_line": 462}, "steps": [], "generation_failure": {"error": "Failed to generate stacktrace", "error_message": "[Errno 2] No such file or directory: './projects/Time/26/results/stacktrace-testWithMinuteOfHourInDstChange-addWrapField.csv'"}}, {"failing_test": {"className": " org.joda.time.TestDateTimeZoneCutover", "methodName": "testWithMinuteOfHourInDstChange", "error": "junit.framework.ComparisonFailure", "message": "expected:<...10-31T02:00:10.123+0[2]:00> but was:<...10-31T02:00:10.123+0[1]:00>"}, "patched_method": {"file_path": "/src/main/java/org/joda/time/chrono/ZonedChronology.java", "method_name": "add", "content": "        public long add(long instant, long value) {\n            if (iTimeField) {\n                int offset = getOffsetToAdd(instant);\n                long localInstant = iField.add(instant + offset, value);\n                return localInstant - offset;\n            } else {\n               long localInstant = iZone.convertUTCToLocal(instant);\n               localInstant = iField.add(localInstant, value);\n               return iZone.convertLocalToUTC(localInstant, false);\n            }\n        }", "javadoc_start_line": 440, "annotations_start_line": 440, "method_start_line": 440, "end_line": 450}, "steps": [], "generation_failure": {"error": "Failed to generate stacktrace", "error_message": "[Errno 2] No such file or directory: './projects/Time/26/results/stacktrace-testWithMinuteOfHourInDstChange-add.csv'"}}, {"failing_test": {"className": " org.joda.time.TestDateTimeZoneCutover", "methodName": "testWithMinuteOfHourInDstChange", "error": "junit.framework.ComparisonFailure", "message": "expected:<...10-31T02:00:10.123+0[2]:00> but was:<...10-31T02:00:10.123+0[1]:00>"}, "patched_method": {"file_path": "/src/main/java/org/joda/time/chrono/ZonedChronology.java", "method_name": "add", "content": "        public long add(long instant, int value) {\n            if (iTimeField) {\n                int offset = getOffsetToAdd(instant);\n                long localInstant = iField.add(instant + offset, value);\n                return localInstant - offset;\n            } else {\n               long localInstant = iZone.convertUTCToLocal(instant);\n               localInstant = iField.add(localInstant, value);\n               return iZone.convertLocalToUTC(localInstant, false);\n            }\n        }", "javadoc_start_line": 428, "annotations_start_line": 428, "method_start_line": 428, "end_line": 438}, "steps": [], "generation_failure": {"error": "Failed to generate stacktrace", "error_message": "[Errno 2] No such file or directory: './projects/Time/26/results/stacktrace-testWithMinuteOfHourInDstChange-add.csv'"}}, {"failing_test": {"className": " org.joda.time.TestDateTimeZoneCutover", "methodName": "testWithMinuteOfHourInDstChange_mockZone", "error": "junit.framework.ComparisonFailure", "message": "expected:<...10-31T01:30:00.000+0[1:0]0> but was:<...10-31T01:30:00.000+0[0:3]0>"}, "patched_method": {"file_path": "/src/main/java/org/joda/time/chrono/ZonedChronology.java", "method_name": "roundCeiling", "content": "        public long roundCeiling(long instant) {\n            if (iTimeField) {\n                int offset = getOffsetToAdd(instant);\n                instant = iField.roundCeiling(instant + offset);\n                return instant - offset;\n            } else {\n                long localInstant = iZone.convertUTCToLocal(instant);\n                localInstant = iField.roundCeiling(localInstant);\n                return iZone.convertLocalToUTC(localInstant, false);\n            }\n        }", "javadoc_start_line": 532, "annotations_start_line": 532, "method_start_line": 532, "end_line": 542}, "steps": [], "generation_failure": {"error": "Failed to generate stacktrace", "error_message": "[Errno 2] No such file or directory: './projects/Time/26/results/stacktrace-testWithMinuteOfHourInDstChange_mockZone-roundCeiling.csv'"}}, {"failing_test": {"className": " org.joda.time.TestDateTimeZoneCutover", "methodName": "testWithMinuteOfHourInDstChange_mockZone", "error": "junit.framework.ComparisonFailure", "message": "expected:<...10-31T01:30:00.000+0[1:0]0> but was:<...10-31T01:30:00.000+0[0:3]0>"}, "patched_method": {"file_path": "/src/main/java/org/joda/time/chrono/ZonedChronology.java", "method_name": "roundFloor", "content": "        public long roundFloor(long instant) {\n            if (iTimeField) {\n                int offset = getOffsetToAdd(instant);\n                instant = iField.roundFloor(instant + offset);\n                return instant - offset;\n            } else {\n                long localInstant = iZone.convertUTCToLocal(instant);\n                localInstant = iField.roundFloor(localInstant);\n                return iZone.convertLocalToUTC(localInstant, false);\n            }\n        }", "javadoc_start_line": 520, "annotations_start_line": 520, "method_start_line": 520, "end_line": 530}, "steps": [], "generation_failure": {"error": "Failed to generate stacktrace", "error_message": "[Errno 2] No such file or directory: './projects/Time/26/results/stacktrace-testWithMinuteOfHourInDstChange_mockZone-roundFloor.csv'"}}, {"failing_test": {"className": " org.joda.time.TestDateTimeZoneCutover", "methodName": "testWithMinuteOfHourInDstChange_mockZone", "error": "junit.framework.ComparisonFailure", "message": "expected:<...10-31T01:30:00.000+0[1:0]0> but was:<...10-31T01:30:00.000+0[0:3]0>"}, "patched_method": {"file_path": "/src/main/java/org/joda/time/chrono/ZonedChronology.java", "method_name": "set", "content": "        public long set(long instant, String text, Locale locale) {\n            // cannot verify that new value stuck because set may be lenient\n            long localInstant = iZone.convertUTCToLocal(instant);\n            localInstant = iField.set(localInstant, text, locale);\n            return iZone.convertLocalToUTC(localInstant, false);\n        }", "javadoc_start_line": 477, "annotations_start_line": 477, "method_start_line": 477, "end_line": 482}, "steps": [], "generation_failure": {"error": "Failed to generate stacktrace", "error_message": "[Errno 2] No such file or directory: './projects/Time/26/results/stacktrace-testWithMinuteOfHourInDstChange_mockZone-set.csv'"}}, {"failing_test": {"className": " org.joda.time.TestDateTimeZoneCutover", "methodName": "testWithMinuteOfHourInDstChange_mockZone", "error": "junit.framework.ComparisonFailure", "message": "expected:<...10-31T01:30:00.000+0[1:0]0> but was:<...10-31T01:30:00.000+0[0:3]0>"}, "patched_method": {"file_path": "/src/main/java/org/joda/time/chrono/ZonedChronology.java", "method_name": "set", "content": "        public long set(long instant, int value) {\n            long localInstant = iZone.convertUTCToLocal(instant);\n            localInstant = iField.set(localInstant, value);\n            long result = iZone.convertLocalToUTC(localInstant, false);\n            if (get(result) != value) {\n                throw new IllegalFieldValueException(iField.getType(), new Integer(value),\n                    \"Illegal instant due to time zone offset transition: \" +\n                    DateTimeFormat.forPattern(\"yyyy-MM-dd'T'HH:mm:ss.SSS\").print(new Instant(localInstant)) +\n                    \" (\" + iZone.getID() + \")\");\n            }\n            return result;\n        }", "javadoc_start_line": 464, "annotations_start_line": 464, "method_start_line": 464, "end_line": 475}, "steps": [{"file_path": "/src/test/java/org/joda/time/TestDateTimeZoneCutover.java", "method_name": "testWithMinuteOfHourInDstChange_mockZone", "content": "    public void testWithMinuteOfHourInDstChange_mockZone() {\n        DateTime cutover = new DateTime(2010, 10, 31, 1, 15, DateTimeZone.forOffsetHoursMinutes(0, 30));\n        assertEquals(\"2010-10-31T01:15:00.000+00:30\", cutover.toString());\n        DateTimeZone halfHourZone = new MockZone(cutover.getMillis(), 3600000, -1800);\n        DateTime pre = new DateTime(2010, 10, 31, 1, 0, halfHourZone);\n        assertEquals(\"2010-10-31T01:00:00.000+01:00\", pre.toString());\n        DateTime post = new DateTime(2010, 10, 31, 1, 59, halfHourZone);\n        assertEquals(\"2010-10-31T01:59:00.000+00:30\", post.toString());\n        \n        DateTime testPre1 = pre.withMinuteOfHour(30);\n        assertEquals(\"2010-10-31T01:30:00.000+01:00\", testPre1.toString());  // retain offset\n        DateTime testPre2 = pre.withMinuteOfHour(50);\n        assertEquals(\"2010-10-31T01:50:00.000+00:30\", testPre2.toString());\n        \n        DateTime testPost1 = post.withMinuteOfHour(30);\n        assertEquals(\"2010-10-31T01:30:00.000+00:30\", testPost1.toString());  // retain offset\n        DateTime testPost2 = post.withMinuteOfHour(10);\n        assertEquals(\"2010-10-31T01:10:00.000+01:00\", testPost2.toString());\n    }", "javadoc_start_line": 1063, "annotations_start_line": 1063, "method_start_line": 1063, "end_line": 1081}, {"file_path": "/src/main/java/org/joda/time/DateTime.java", "method_name": "withMinuteOfHour", "content": "    /**\n     * Returns a copy of this datetime with the minute of hour updated.\n     * <p>\n     * DateTime is immutable, so there are no set methods.\n     * Instead, this method returns a new instance with the value of\n     * minute of hour changed.\n     *\n     * @param minute  the minute of hour to set\n     * @return a copy of this object with the field set\n     * @throws IllegalArgumentException if the value is invalid\n     * @since 1.3\n     */\n    public DateTime withMinuteOfHour(int minute) {\n        return withMillis(getChronology().minuteOfHour().set(getMillis(), minute));\n    }", "javadoc_start_line": 1649, "annotations_start_line": 1661, "method_start_line": 1661, "end_line": 1663}]}, {"failing_test": {"className": " org.joda.time.TestDateTimeZoneCutover", "methodName": "testWithMinuteOfHourInDstChange_mockZone", "error": "junit.framework.ComparisonFailure", "message": "expected:<...10-31T01:30:00.000+0[1:0]0> but was:<...10-31T01:30:00.000+0[0:3]0>"}, "patched_method": {"file_path": "/src/main/java/org/joda/time/chrono/ZonedChronology.java", "method_name": "addWrapField", "content": "        public long addWrapField(long instant, int value) {\n            if (iTimeField) {\n                int offset = getOffsetToAdd(instant);\n                long localInstant = iField.addWrapField(instant + offset, value);\n                return localInstant - offset;\n            } else {\n                long localInstant = iZone.convertUTCToLocal(instant);\n                localInstant = iField.addWrapField(localInstant, value);\n                return iZone.convertLocalToUTC(localInstant, false);\n            }\n        }", "javadoc_start_line": 452, "annotations_start_line": 452, "method_start_line": 452, "end_line": 462}, "steps": [], "generation_failure": {"error": "Failed to generate stacktrace", "error_message": "[Errno 2] No such file or directory: './projects/Time/26/results/stacktrace-testWithMinuteOfHourInDstChange_mockZone-addWrapField.csv'"}}, {"failing_test": {"className": " org.joda.time.TestDateTimeZoneCutover", "methodName": "testWithMinuteOfHourInDstChange_mockZone", "error": "junit.framework.ComparisonFailure", "message": "expected:<...10-31T01:30:00.000+0[1:0]0> but was:<...10-31T01:30:00.000+0[0:3]0>"}, "patched_method": {"file_path": "/src/main/java/org/joda/time/chrono/ZonedChronology.java", "method_name": "add", "content": "        public long add(long instant, long value) {\n            if (iTimeField) {\n                int offset = getOffsetToAdd(instant);\n                long localInstant = iField.add(instant + offset, value);\n                return localInstant - offset;\n            } else {\n               long localInstant = iZone.convertUTCToLocal(instant);\n               localInstant = iField.add(localInstant, value);\n               return iZone.convertLocalToUTC(localInstant, false);\n            }\n        }", "javadoc_start_line": 440, "annotations_start_line": 440, "method_start_line": 440, "end_line": 450}, "steps": [], "generation_failure": {"error": "Failed to generate stacktrace", "error_message": "[Errno 2] No such file or directory: './projects/Time/26/results/stacktrace-testWithMinuteOfHourInDstChange_mockZone-add.csv'"}}, {"failing_test": {"className": " org.joda.time.TestDateTimeZoneCutover", "methodName": "testWithMinuteOfHourInDstChange_mockZone", "error": "junit.framework.ComparisonFailure", "message": "expected:<...10-31T01:30:00.000+0[1:0]0> but was:<...10-31T01:30:00.000+0[0:3]0>"}, "patched_method": {"file_path": "/src/main/java/org/joda/time/chrono/ZonedChronology.java", "method_name": "add", "content": "        public long add(long instant, int value) {\n            if (iTimeField) {\n                int offset = getOffsetToAdd(instant);\n                long localInstant = iField.add(instant + offset, value);\n                return localInstant - offset;\n            } else {\n               long localInstant = iZone.convertUTCToLocal(instant);\n               localInstant = iField.add(localInstant, value);\n               return iZone.convertLocalToUTC(localInstant, false);\n            }\n        }", "javadoc_start_line": 428, "annotations_start_line": 428, "method_start_line": 428, "end_line": 438}, "steps": [], "generation_failure": {"error": "Failed to generate stacktrace", "error_message": "[Errno 2] No such file or directory: './projects/Time/26/results/stacktrace-testWithMinuteOfHourInDstChange_mockZone-add.csv'"}}, {"failing_test": {"className": " org.joda.time.TestDateTimeZoneCutover", "methodName": "testBug2182444_usCentral", "error": "junit.framework.AssertionFailedError", "message": "expected:<2008-11-02T01:00:00.000-06:00> but was:<2008-11-02T01:00:00.000-05:00>"}, "patched_method": {"file_path": "/src/main/java/org/joda/time/chrono/ZonedChronology.java", "method_name": "roundCeiling", "content": "        public long roundCeiling(long instant) {\n            if (iTimeField) {\n                int offset = getOffsetToAdd(instant);\n                instant = iField.roundCeiling(instant + offset);\n                return instant - offset;\n            } else {\n                long localInstant = iZone.convertUTCToLocal(instant);\n                localInstant = iField.roundCeiling(localInstant);\n                return iZone.convertLocalToUTC(localInstant, false);\n            }\n        }", "javadoc_start_line": 532, "annotations_start_line": 532, "method_start_line": 532, "end_line": 542}, "steps": [], "generation_failure": {"error": "Failed to generate stacktrace", "error_message": "[Errno 2] No such file or directory: './projects/Time/26/results/stacktrace-testBug2182444_usCentral-roundCeiling.csv'"}}, {"failing_test": {"className": " org.joda.time.TestDateTimeZoneCutover", "methodName": "testBug2182444_usCentral", "error": "junit.framework.AssertionFailedError", "message": "expected:<2008-11-02T01:00:00.000-06:00> but was:<2008-11-02T01:00:00.000-05:00>"}, "patched_method": {"file_path": "/src/main/java/org/joda/time/chrono/ZonedChronology.java", "method_name": "roundFloor", "content": "        public long roundFloor(long instant) {\n            if (iTimeField) {\n                int offset = getOffsetToAdd(instant);\n                instant = iField.roundFloor(instant + offset);\n                return instant - offset;\n            } else {\n                long localInstant = iZone.convertUTCToLocal(instant);\n                localInstant = iField.roundFloor(localInstant);\n                return iZone.convertLocalToUTC(localInstant, false);\n            }\n        }", "javadoc_start_line": 520, "annotations_start_line": 520, "method_start_line": 520, "end_line": 530}, "steps": [], "generation_failure": {"error": "Failed to generate stacktrace", "error_message": "[Errno 2] No such file or directory: './projects/Time/26/results/stacktrace-testBug2182444_usCentral-roundFloor.csv'"}}, {"failing_test": {"className": " org.joda.time.TestDateTimeZoneCutover", "methodName": "testBug2182444_usCentral", "error": "junit.framework.AssertionFailedError", "message": "expected:<2008-11-02T01:00:00.000-06:00> but was:<2008-11-02T01:00:00.000-05:00>"}, "patched_method": {"file_path": "/src/main/java/org/joda/time/chrono/ZonedChronology.java", "method_name": "set", "content": "        public long set(long instant, String text, Locale locale) {\n            // cannot verify that new value stuck because set may be lenient\n            long localInstant = iZone.convertUTCToLocal(instant);\n            localInstant = iField.set(localInstant, text, locale);\n            return iZone.convertLocalToUTC(localInstant, false);\n        }", "javadoc_start_line": 477, "annotations_start_line": 477, "method_start_line": 477, "end_line": 482}, "steps": [], "generation_failure": {"error": "Failed to generate stacktrace", "error_message": "[Errno 2] No such file or directory: './projects/Time/26/results/stacktrace-testBug2182444_usCentral-set.csv'"}}, {"failing_test": {"className": " org.joda.time.TestDateTimeZoneCutover", "methodName": "testBug2182444_usCentral", "error": "junit.framework.AssertionFailedError", "message": "expected:<2008-11-02T01:00:00.000-06:00> but was:<2008-11-02T01:00:00.000-05:00>"}, "patched_method": {"file_path": "/src/main/java/org/joda/time/chrono/ZonedChronology.java", "method_name": "set", "content": "        public long set(long instant, int value) {\n            long localInstant = iZone.convertUTCToLocal(instant);\n            localInstant = iField.set(localInstant, value);\n            long result = iZone.convertLocalToUTC(localInstant, false);\n            if (get(result) != value) {\n                throw new IllegalFieldValueException(iField.getType(), new Integer(value),\n                    \"Illegal instant due to time zone offset transition: \" +\n                    DateTimeFormat.forPattern(\"yyyy-MM-dd'T'HH:mm:ss.SSS\").print(new Instant(localInstant)) +\n                    \" (\" + iZone.getID() + \")\");\n            }\n            return result;\n        }", "javadoc_start_line": 464, "annotations_start_line": 464, "method_start_line": 464, "end_line": 475}, "steps": [{"file_path": "/src/test/java/org/joda/time/TestDateTimeZoneCutover.java", "method_name": "testBug2182444_usCentral", "content": "    public void testBug2182444_usCentral() {\n        Chronology chronUSCentral = GregorianChronology.getInstance(DateTimeZone.forID(\"US/Central\"));\n        Chronology chronUTC = GregorianChronology.getInstance(DateTimeZone.UTC);\n        DateTime usCentralStandardInUTC = new DateTime(2008, 11, 2, 7, 0, 0, 0, chronUTC);\n        DateTime usCentralDaylightInUTC = new DateTime(2008, 11, 2, 6, 0, 0, 0, chronUTC);\n        assertTrue(\"Should be standard time\", chronUSCentral.getZone().isStandardOffset(usCentralStandardInUTC.getMillis()));\n        assertFalse(\"Should be daylight time\", chronUSCentral.getZone().isStandardOffset(usCentralDaylightInUTC.getMillis()));\n        \n        DateTime usCentralStandardInUSCentral = usCentralStandardInUTC.toDateTime(chronUSCentral);\n        DateTime usCentralDaylightInUSCentral = usCentralDaylightInUTC.toDateTime(chronUSCentral);\n        assertEquals(1, usCentralStandardInUSCentral.getHourOfDay());\n        assertEquals(usCentralStandardInUSCentral.getHourOfDay(), usCentralDaylightInUSCentral.getHourOfDay());\n        assertTrue(usCentralStandardInUSCentral.getMillis() != usCentralDaylightInUSCentral.getMillis());\n        assertEquals(usCentralStandardInUSCentral, usCentralStandardInUSCentral.withHourOfDay(1));\n        assertEquals(usCentralStandardInUSCentral.getMillis() + 3, usCentralStandardInUSCentral.withMillisOfSecond(3).getMillis());\n        assertEquals(usCentralDaylightInUSCentral, usCentralDaylightInUSCentral.withHourOfDay(1));\n        assertEquals(usCentralDaylightInUSCentral.getMillis() + 3, usCentralDaylightInUSCentral.withMillisOfSecond(3).getMillis());\n    }", "javadoc_start_line": 1153, "annotations_start_line": 1153, "method_start_line": 1153, "end_line": 1170}, {"file_path": "/src/main/java/org/joda/time/DateTime.java", "method_name": "withHourOfDay", "content": "    /**\n     * Returns a copy of this datetime with the hour of day field updated.\n     * <p>\n     * DateTime is immutable, so there are no set methods.\n     * Instead, this method returns a new instance with the value of\n     * hour of day changed.\n     *\n     * @param hour  the hour of day to set\n     * @return a copy of this object with the field set\n     * @throws IllegalArgumentException if the value is invalid\n     * @since 1.3\n     */\n    public DateTime withHourOfDay(int hour) {\n        return withMillis(getChronology().hourOfDay().set(getMillis(), hour));\n    }", "javadoc_start_line": 1633, "annotations_start_line": 1645, "method_start_line": 1645, "end_line": 1647}]}, {"failing_test": {"className": " org.joda.time.TestDateTimeZoneCutover", "methodName": "testBug2182444_usCentral", "error": "junit.framework.AssertionFailedError", "message": "expected:<2008-11-02T01:00:00.000-06:00> but was:<2008-11-02T01:00:00.000-05:00>"}, "patched_method": {"file_path": "/src/main/java/org/joda/time/chrono/ZonedChronology.java", "method_name": "addWrapField", "content": "        public long addWrapField(long instant, int value) {\n            if (iTimeField) {\n                int offset = getOffsetToAdd(instant);\n                long localInstant = iField.addWrapField(instant + offset, value);\n                return localInstant - offset;\n            } else {\n                long localInstant = iZone.convertUTCToLocal(instant);\n                localInstant = iField.addWrapField(localInstant, value);\n                return iZone.convertLocalToUTC(localInstant, false);\n            }\n        }", "javadoc_start_line": 452, "annotations_start_line": 452, "method_start_line": 452, "end_line": 462}, "steps": [], "generation_failure": {"error": "Failed to generate stacktrace", "error_message": "[Errno 2] No such file or directory: './projects/Time/26/results/stacktrace-testBug2182444_usCentral-addWrapField.csv'"}}, {"failing_test": {"className": " org.joda.time.TestDateTimeZoneCutover", "methodName": "testBug2182444_usCentral", "error": "junit.framework.AssertionFailedError", "message": "expected:<2008-11-02T01:00:00.000-06:00> but was:<2008-11-02T01:00:00.000-05:00>"}, "patched_method": {"file_path": "/src/main/java/org/joda/time/chrono/ZonedChronology.java", "method_name": "add", "content": "        public long add(long instant, long value) {\n            if (iTimeField) {\n                int offset = getOffsetToAdd(instant);\n                long localInstant = iField.add(instant + offset, value);\n                return localInstant - offset;\n            } else {\n               long localInstant = iZone.convertUTCToLocal(instant);\n               localInstant = iField.add(localInstant, value);\n               return iZone.convertLocalToUTC(localInstant, false);\n            }\n        }", "javadoc_start_line": 440, "annotations_start_line": 440, "method_start_line": 440, "end_line": 450}, "steps": [], "generation_failure": {"error": "Failed to generate stacktrace", "error_message": "[Errno 2] No such file or directory: './projects/Time/26/results/stacktrace-testBug2182444_usCentral-add.csv'"}}, {"failing_test": {"className": " org.joda.time.TestDateTimeZoneCutover", "methodName": "testBug2182444_usCentral", "error": "junit.framework.AssertionFailedError", "message": "expected:<2008-11-02T01:00:00.000-06:00> but was:<2008-11-02T01:00:00.000-05:00>"}, "patched_method": {"file_path": "/src/main/java/org/joda/time/chrono/ZonedChronology.java", "method_name": "add", "content": "        public long add(long instant, int value) {\n            if (iTimeField) {\n                int offset = getOffsetToAdd(instant);\n                long localInstant = iField.add(instant + offset, value);\n                return localInstant - offset;\n            } else {\n               long localInstant = iZone.convertUTCToLocal(instant);\n               localInstant = iField.add(localInstant, value);\n               return iZone.convertLocalToUTC(localInstant, false);\n            }\n        }", "javadoc_start_line": 428, "annotations_start_line": 428, "method_start_line": 428, "end_line": 438}, "steps": [], "generation_failure": {"error": "Failed to generate stacktrace", "error_message": "[Errno 2] No such file or directory: './projects/Time/26/results/stacktrace-testBug2182444_usCentral-add.csv'"}}, {"failing_test": {"className": " org.joda.time.TestDateTimeZoneCutover", "methodName": "testWithMillisOfSecondInDstChange_Paris_summer", "error": "junit.framework.ComparisonFailure", "message": "expected:<...10-31T02:30:10.000+0[2]:00> but was:<...10-31T02:30:10.000+0[1]:00>"}, "patched_method": {"file_path": "/src/main/java/org/joda/time/chrono/ZonedChronology.java", "method_name": "roundCeiling", "content": "        public long roundCeiling(long instant) {\n            if (iTimeField) {\n                int offset = getOffsetToAdd(instant);\n                instant = iField.roundCeiling(instant + offset);\n                return instant - offset;\n            } else {\n                long localInstant = iZone.convertUTCToLocal(instant);\n                localInstant = iField.roundCeiling(localInstant);\n                return iZone.convertLocalToUTC(localInstant, false);\n            }\n        }", "javadoc_start_line": 532, "annotations_start_line": 532, "method_start_line": 532, "end_line": 542}, "steps": [], "generation_failure": {"error": "Failed to generate stacktrace", "error_message": "[Errno 2] No such file or directory: './projects/Time/26/results/stacktrace-testWithMillisOfSecondInDstChange_Paris_summer-roundCeiling.csv'"}}, {"failing_test": {"className": " org.joda.time.TestDateTimeZoneCutover", "methodName": "testWithMillisOfSecondInDstChange_Paris_summer", "error": "junit.framework.ComparisonFailure", "message": "expected:<...10-31T02:30:10.000+0[2]:00> but was:<...10-31T02:30:10.000+0[1]:00>"}, "patched_method": {"file_path": "/src/main/java/org/joda/time/chrono/ZonedChronology.java", "method_name": "roundFloor", "content": "        public long roundFloor(long instant) {\n            if (iTimeField) {\n                int offset = getOffsetToAdd(instant);\n                instant = iField.roundFloor(instant + offset);\n                return instant - offset;\n            } else {\n                long localInstant = iZone.convertUTCToLocal(instant);\n                localInstant = iField.roundFloor(localInstant);\n                return iZone.convertLocalToUTC(localInstant, false);\n            }\n        }", "javadoc_start_line": 520, "annotations_start_line": 520, "method_start_line": 520, "end_line": 530}, "steps": [], "generation_failure": {"error": "Failed to generate stacktrace", "error_message": "[Errno 2] No such file or directory: './projects/Time/26/results/stacktrace-testWithMillisOfSecondInDstChange_Paris_summer-roundFloor.csv'"}}, {"failing_test": {"className": " org.joda.time.TestDateTimeZoneCutover", "methodName": "testWithMillisOfSecondInDstChange_Paris_summer", "error": "junit.framework.ComparisonFailure", "message": "expected:<...10-31T02:30:10.000+0[2]:00> but was:<...10-31T02:30:10.000+0[1]:00>"}, "patched_method": {"file_path": "/src/main/java/org/joda/time/chrono/ZonedChronology.java", "method_name": "set", "content": "        public long set(long instant, String text, Locale locale) {\n            // cannot verify that new value stuck because set may be lenient\n            long localInstant = iZone.convertUTCToLocal(instant);\n            localInstant = iField.set(localInstant, text, locale);\n            return iZone.convertLocalToUTC(localInstant, false);\n        }", "javadoc_start_line": 477, "annotations_start_line": 477, "method_start_line": 477, "end_line": 482}, "steps": [], "generation_failure": {"error": "Failed to generate stacktrace", "error_message": "[Errno 2] No such file or directory: './projects/Time/26/results/stacktrace-testWithMillisOfSecondInDstChange_Paris_summer-set.csv'"}}, {"failing_test": {"className": " org.joda.time.TestDateTimeZoneCutover", "methodName": "testWithMillisOfSecondInDstChange_Paris_summer", "error": "junit.framework.ComparisonFailure", "message": "expected:<...10-31T02:30:10.000+0[2]:00> but was:<...10-31T02:30:10.000+0[1]:00>"}, "patched_method": {"file_path": "/src/main/java/org/joda/time/chrono/ZonedChronology.java", "method_name": "set", "content": "        public long set(long instant, int value) {\n            long localInstant = iZone.convertUTCToLocal(instant);\n            localInstant = iField.set(localInstant, value);\n            long result = iZone.convertLocalToUTC(localInstant, false);\n            if (get(result) != value) {\n                throw new IllegalFieldValueException(iField.getType(), new Integer(value),\n                    \"Illegal instant due to time zone offset transition: \" +\n                    DateTimeFormat.forPattern(\"yyyy-MM-dd'T'HH:mm:ss.SSS\").print(new Instant(localInstant)) +\n                    \" (\" + iZone.getID() + \")\");\n            }\n            return result;\n        }", "javadoc_start_line": 464, "annotations_start_line": 464, "method_start_line": 464, "end_line": 475}, "steps": [{"file_path": "/src/test/java/org/joda/time/TestDateTimeZoneCutover.java", "method_name": "testWithMillisOfSecondInDstChange_Paris_summer", "content": "    public void testWithMillisOfSecondInDstChange_Paris_summer() {\n        DateTime dateTime = new DateTime(\"2010-10-31T02:30:10.123+02:00\", ZONE_PARIS);\n        assertEquals(\"2010-10-31T02:30:10.123+02:00\", dateTime.toString());\n        DateTime test = dateTime.withMillisOfSecond(0);\n        assertEquals(\"2010-10-31T02:30:10.000+02:00\", test.toString());\n    }", "javadoc_start_line": 1104, "annotations_start_line": 1104, "method_start_line": 1104, "end_line": 1109}, {"file_path": "/src/main/java/org/joda/time/DateTime.java", "method_name": "withMillisOfSecond", "content": "    /**\n     * Returns a copy of this datetime with the millis of second field updated.\n     * <p>\n     * DateTime is immutable, so there are no set methods.\n     * Instead, this method returns a new instance with the value of\n     * millis of second changed.\n     *\n     * @param millis  the millis of second to set\n     * @return a copy of this object with the field set\n     * @throws IllegalArgumentException if the value is invalid\n     * @since 1.3\n     */\n    public DateTime withMillisOfSecond(int millis) {\n        return withMillis(getChronology().millisOfSecond().set(getMillis(), millis));\n    }", "javadoc_start_line": 1681, "annotations_start_line": 1693, "method_start_line": 1693, "end_line": 1695}]}, {"failing_test": {"className": " org.joda.time.TestDateTimeZoneCutover", "methodName": "testWithMillisOfSecondInDstChange_Paris_summer", "error": "junit.framework.ComparisonFailure", "message": "expected:<...10-31T02:30:10.000+0[2]:00> but was:<...10-31T02:30:10.000+0[1]:00>"}, "patched_method": {"file_path": "/src/main/java/org/joda/time/chrono/ZonedChronology.java", "method_name": "addWrapField", "content": "        public long addWrapField(long instant, int value) {\n            if (iTimeField) {\n                int offset = getOffsetToAdd(instant);\n                long localInstant = iField.addWrapField(instant + offset, value);\n                return localInstant - offset;\n            } else {\n                long localInstant = iZone.convertUTCToLocal(instant);\n                localInstant = iField.addWrapField(localInstant, value);\n                return iZone.convertLocalToUTC(localInstant, false);\n            }\n        }", "javadoc_start_line": 452, "annotations_start_line": 452, "method_start_line": 452, "end_line": 462}, "steps": [], "generation_failure": {"error": "Failed to generate stacktrace", "error_message": "[Errno 2] No such file or directory: './projects/Time/26/results/stacktrace-testWithMillisOfSecondInDstChange_Paris_summer-addWrapField.csv'"}}, {"failing_test": {"className": " org.joda.time.TestDateTimeZoneCutover", "methodName": "testWithMillisOfSecondInDstChange_Paris_summer", "error": "junit.framework.ComparisonFailure", "message": "expected:<...10-31T02:30:10.000+0[2]:00> but was:<...10-31T02:30:10.000+0[1]:00>"}, "patched_method": {"file_path": "/src/main/java/org/joda/time/chrono/ZonedChronology.java", "method_name": "add", "content": "        public long add(long instant, long value) {\n            if (iTimeField) {\n                int offset = getOffsetToAdd(instant);\n                long localInstant = iField.add(instant + offset, value);\n                return localInstant - offset;\n            } else {\n               long localInstant = iZone.convertUTCToLocal(instant);\n               localInstant = iField.add(localInstant, value);\n               return iZone.convertLocalToUTC(localInstant, false);\n            }\n        }", "javadoc_start_line": 440, "annotations_start_line": 440, "method_start_line": 440, "end_line": 450}, "steps": [], "generation_failure": {"error": "Failed to generate stacktrace", "error_message": "[Errno 2] No such file or directory: './projects/Time/26/results/stacktrace-testWithMillisOfSecondInDstChange_Paris_summer-add.csv'"}}, {"failing_test": {"className": " org.joda.time.TestDateTimeZoneCutover", "methodName": "testWithMillisOfSecondInDstChange_Paris_summer", "error": "junit.framework.ComparisonFailure", "message": "expected:<...10-31T02:30:10.000+0[2]:00> but was:<...10-31T02:30:10.000+0[1]:00>"}, "patched_method": {"file_path": "/src/main/java/org/joda/time/chrono/ZonedChronology.java", "method_name": "add", "content": "        public long add(long instant, int value) {\n            if (iTimeField) {\n                int offset = getOffsetToAdd(instant);\n                long localInstant = iField.add(instant + offset, value);\n                return localInstant - offset;\n            } else {\n               long localInstant = iZone.convertUTCToLocal(instant);\n               localInstant = iField.add(localInstant, value);\n               return iZone.convertLocalToUTC(localInstant, false);\n            }\n        }", "javadoc_start_line": 428, "annotations_start_line": 428, "method_start_line": 428, "end_line": 438}, "steps": [], "generation_failure": {"error": "Failed to generate stacktrace", "error_message": "[Errno 2] No such file or directory: './projects/Time/26/results/stacktrace-testWithMillisOfSecondInDstChange_Paris_summer-add.csv'"}}, {"failing_test": {"className": " org.joda.time.TestDateTimeZoneCutover", "methodName": "testWithHourOfDayInDstChange", "error": "junit.framework.ComparisonFailure", "message": "expected:<...10-31T02:30:10.123+0[2]:00> but was:<...10-31T02:30:10.123+0[1]:00>"}, "patched_method": {"file_path": "/src/main/java/org/joda/time/chrono/ZonedChronology.java", "method_name": "roundCeiling", "content": "        public long roundCeiling(long instant) {\n            if (iTimeField) {\n                int offset = getOffsetToAdd(instant);\n                instant = iField.roundCeiling(instant + offset);\n                return instant - offset;\n            } else {\n                long localInstant = iZone.convertUTCToLocal(instant);\n                localInstant = iField.roundCeiling(localInstant);\n                return iZone.convertLocalToUTC(localInstant, false);\n            }\n        }", "javadoc_start_line": 532, "annotations_start_line": 532, "method_start_line": 532, "end_line": 542}, "steps": [], "generation_failure": {"error": "Failed to generate stacktrace", "error_message": "[Errno 2] No such file or directory: './projects/Time/26/results/stacktrace-testWithHourOfDayInDstChange-roundCeiling.csv'"}}, {"failing_test": {"className": " org.joda.time.TestDateTimeZoneCutover", "methodName": "testWithHourOfDayInDstChange", "error": "junit.framework.ComparisonFailure", "message": "expected:<...10-31T02:30:10.123+0[2]:00> but was:<...10-31T02:30:10.123+0[1]:00>"}, "patched_method": {"file_path": "/src/main/java/org/joda/time/chrono/ZonedChronology.java", "method_name": "roundFloor", "content": "        public long roundFloor(long instant) {\n            if (iTimeField) {\n                int offset = getOffsetToAdd(instant);\n                instant = iField.roundFloor(instant + offset);\n                return instant - offset;\n            } else {\n                long localInstant = iZone.convertUTCToLocal(instant);\n                localInstant = iField.roundFloor(localInstant);\n                return iZone.convertLocalToUTC(localInstant, false);\n            }\n        }", "javadoc_start_line": 520, "annotations_start_line": 520, "method_start_line": 520, "end_line": 530}, "steps": [], "generation_failure": {"error": "Failed to generate stacktrace", "error_message": "[Errno 2] No such file or directory: './projects/Time/26/results/stacktrace-testWithHourOfDayInDstChange-roundFloor.csv'"}}, {"failing_test": {"className": " org.joda.time.TestDateTimeZoneCutover", "methodName": "testWithHourOfDayInDstChange", "error": "junit.framework.ComparisonFailure", "message": "expected:<...10-31T02:30:10.123+0[2]:00> but was:<...10-31T02:30:10.123+0[1]:00>"}, "patched_method": {"file_path": "/src/main/java/org/joda/time/chrono/ZonedChronology.java", "method_name": "set", "content": "        public long set(long instant, String text, Locale locale) {\n            // cannot verify that new value stuck because set may be lenient\n            long localInstant = iZone.convertUTCToLocal(instant);\n            localInstant = iField.set(localInstant, text, locale);\n            return iZone.convertLocalToUTC(localInstant, false);\n        }", "javadoc_start_line": 477, "annotations_start_line": 477, "method_start_line": 477, "end_line": 482}, "steps": [], "generation_failure": {"error": "Failed to generate stacktrace", "error_message": "[Errno 2] No such file or directory: './projects/Time/26/results/stacktrace-testWithHourOfDayInDstChange-set.csv'"}}, {"failing_test": {"className": " org.joda.time.TestDateTimeZoneCutover", "methodName": "testWithHourOfDayInDstChange", "error": "junit.framework.ComparisonFailure", "message": "expected:<...10-31T02:30:10.123+0[2]:00> but was:<...10-31T02:30:10.123+0[1]:00>"}, "patched_method": {"file_path": "/src/main/java/org/joda/time/chrono/ZonedChronology.java", "method_name": "set", "content": "        public long set(long instant, int value) {\n            long localInstant = iZone.convertUTCToLocal(instant);\n            localInstant = iField.set(localInstant, value);\n            long result = iZone.convertLocalToUTC(localInstant, false);\n            if (get(result) != value) {\n                throw new IllegalFieldValueException(iField.getType(), new Integer(value),\n                    \"Illegal instant due to time zone offset transition: \" +\n                    DateTimeFormat.forPattern(\"yyyy-MM-dd'T'HH:mm:ss.SSS\").print(new Instant(localInstant)) +\n                    \" (\" + iZone.getID() + \")\");\n            }\n            return result;\n        }", "javadoc_start_line": 464, "annotations_start_line": 464, "method_start_line": 464, "end_line": 475}, "steps": [{"file_path": "/src/test/java/org/joda/time/TestDateTimeZoneCutover.java", "method_name": "testWithHourOfDayInDstChange", "content": "    public void testWithHourOfDayInDstChange() {\n        DateTime dateTime = new DateTime(\"2010-10-31T02:30:10.123+02:00\", ZONE_PARIS);\n        assertEquals(\"2010-10-31T02:30:10.123+02:00\", dateTime.toString());\n        DateTime test = dateTime.withHourOfDay(2);\n        assertEquals(\"2010-10-31T02:30:10.123+02:00\", test.toString());\n    }", "javadoc_start_line": 1083, "annotations_start_line": 1083, "method_start_line": 1083, "end_line": 1088}, {"file_path": "/src/main/java/org/joda/time/DateTime.java", "method_name": "withHourOfDay", "content": "    /**\n     * Returns a copy of this datetime with the hour of day field updated.\n     * <p>\n     * DateTime is immutable, so there are no set methods.\n     * Instead, this method returns a new instance with the value of\n     * hour of day changed.\n     *\n     * @param hour  the hour of day to set\n     * @return a copy of this object with the field set\n     * @throws IllegalArgumentException if the value is invalid\n     * @since 1.3\n     */\n    public DateTime withHourOfDay(int hour) {\n        return withMillis(getChronology().hourOfDay().set(getMillis(), hour));\n    }", "javadoc_start_line": 1633, "annotations_start_line": 1645, "method_start_line": 1645, "end_line": 1647}]}, {"failing_test": {"className": " org.joda.time.TestDateTimeZoneCutover", "methodName": "testWithHourOfDayInDstChange", "error": "junit.framework.ComparisonFailure", "message": "expected:<...10-31T02:30:10.123+0[2]:00> but was:<...10-31T02:30:10.123+0[1]:00>"}, "patched_method": {"file_path": "/src/main/java/org/joda/time/chrono/ZonedChronology.java", "method_name": "addWrapField", "content": "        public long addWrapField(long instant, int value) {\n            if (iTimeField) {\n                int offset = getOffsetToAdd(instant);\n                long localInstant = iField.addWrapField(instant + offset, value);\n                return localInstant - offset;\n            } else {\n                long localInstant = iZone.convertUTCToLocal(instant);\n                localInstant = iField.addWrapField(localInstant, value);\n                return iZone.convertLocalToUTC(localInstant, false);\n            }\n        }", "javadoc_start_line": 452, "annotations_start_line": 452, "method_start_line": 452, "end_line": 462}, "steps": [], "generation_failure": {"error": "Failed to generate stacktrace", "error_message": "[Errno 2] No such file or directory: './projects/Time/26/results/stacktrace-testWithHourOfDayInDstChange-addWrapField.csv'"}}, {"failing_test": {"className": " org.joda.time.TestDateTimeZoneCutover", "methodName": "testWithHourOfDayInDstChange", "error": "junit.framework.ComparisonFailure", "message": "expected:<...10-31T02:30:10.123+0[2]:00> but was:<...10-31T02:30:10.123+0[1]:00>"}, "patched_method": {"file_path": "/src/main/java/org/joda/time/chrono/ZonedChronology.java", "method_name": "add", "content": "        public long add(long instant, long value) {\n            if (iTimeField) {\n                int offset = getOffsetToAdd(instant);\n                long localInstant = iField.add(instant + offset, value);\n                return localInstant - offset;\n            } else {\n               long localInstant = iZone.convertUTCToLocal(instant);\n               localInstant = iField.add(localInstant, value);\n               return iZone.convertLocalToUTC(localInstant, false);\n            }\n        }", "javadoc_start_line": 440, "annotations_start_line": 440, "method_start_line": 440, "end_line": 450}, "steps": [], "generation_failure": {"error": "Failed to generate stacktrace", "error_message": "[Errno 2] No such file or directory: './projects/Time/26/results/stacktrace-testWithHourOfDayInDstChange-add.csv'"}}, {"failing_test": {"className": " org.joda.time.TestDateTimeZoneCutover", "methodName": "testWithHourOfDayInDstChange", "error": "junit.framework.ComparisonFailure", "message": "expected:<...10-31T02:30:10.123+0[2]:00> but was:<...10-31T02:30:10.123+0[1]:00>"}, "patched_method": {"file_path": "/src/main/java/org/joda/time/chrono/ZonedChronology.java", "method_name": "add", "content": "        public long add(long instant, int value) {\n            if (iTimeField) {\n                int offset = getOffsetToAdd(instant);\n                long localInstant = iField.add(instant + offset, value);\n                return localInstant - offset;\n            } else {\n               long localInstant = iZone.convertUTCToLocal(instant);\n               localInstant = iField.add(localInstant, value);\n               return iZone.convertLocalToUTC(localInstant, false);\n            }\n        }", "javadoc_start_line": 428, "annotations_start_line": 428, "method_start_line": 428, "end_line": 438}, "steps": [], "generation_failure": {"error": "Failed to generate stacktrace", "error_message": "[Errno 2] No such file or directory: './projects/Time/26/results/stacktrace-testWithHourOfDayInDstChange-add.csv'"}}, {"failing_test": {"className": " org.joda.time.TestDateTimeZoneCutover", "methodName": "testWithMillisOfSecondInDstChange_NewYork_winter", "error": "junit.framework.ComparisonFailure", "message": "expected:<...11-04T01:30:00.000-0[5]:00> but was:<...11-04T01:30:00.000-0[4]:00>"}, "patched_method": {"file_path": "/src/main/java/org/joda/time/chrono/ZonedChronology.java", "method_name": "roundCeiling", "content": "        public long roundCeiling(long instant) {\n            if (iTimeField) {\n                int offset = getOffsetToAdd(instant);\n                instant = iField.roundCeiling(instant + offset);\n                return instant - offset;\n            } else {\n                long localInstant = iZone.convertUTCToLocal(instant);\n                localInstant = iField.roundCeiling(localInstant);\n                return iZone.convertLocalToUTC(localInstant, false);\n            }\n        }", "javadoc_start_line": 532, "annotations_start_line": 532, "method_start_line": 532, "end_line": 542}, "steps": [], "generation_failure": {"error": "Failed to generate stacktrace", "error_message": "[Errno 2] No such file or directory: './projects/Time/26/results/stacktrace-testWithMillisOfSecondInDstChange_NewYork_winter-roundCeiling.csv'"}}, {"failing_test": {"className": " org.joda.time.TestDateTimeZoneCutover", "methodName": "testWithMillisOfSecondInDstChange_NewYork_winter", "error": "junit.framework.ComparisonFailure", "message": "expected:<...11-04T01:30:00.000-0[5]:00> but was:<...11-04T01:30:00.000-0[4]:00>"}, "patched_method": {"file_path": "/src/main/java/org/joda/time/chrono/ZonedChronology.java", "method_name": "roundFloor", "content": "        public long roundFloor(long instant) {\n            if (iTimeField) {\n                int offset = getOffsetToAdd(instant);\n                instant = iField.roundFloor(instant + offset);\n                return instant - offset;\n            } else {\n                long localInstant = iZone.convertUTCToLocal(instant);\n                localInstant = iField.roundFloor(localInstant);\n                return iZone.convertLocalToUTC(localInstant, false);\n            }\n        }", "javadoc_start_line": 520, "annotations_start_line": 520, "method_start_line": 520, "end_line": 530}, "steps": [], "generation_failure": {"error": "Failed to generate stacktrace", "error_message": "[Errno 2] No such file or directory: './projects/Time/26/results/stacktrace-testWithMillisOfSecondInDstChange_NewYork_winter-roundFloor.csv'"}}, {"failing_test": {"className": " org.joda.time.TestDateTimeZoneCutover", "methodName": "testWithMillisOfSecondInDstChange_NewYork_winter", "error": "junit.framework.ComparisonFailure", "message": "expected:<...11-04T01:30:00.000-0[5]:00> but was:<...11-04T01:30:00.000-0[4]:00>"}, "patched_method": {"file_path": "/src/main/java/org/joda/time/chrono/ZonedChronology.java", "method_name": "set", "content": "        public long set(long instant, String text, Locale locale) {\n            // cannot verify that new value stuck because set may be lenient\n            long localInstant = iZone.convertUTCToLocal(instant);\n            localInstant = iField.set(localInstant, text, locale);\n            return iZone.convertLocalToUTC(localInstant, false);\n        }", "javadoc_start_line": 477, "annotations_start_line": 477, "method_start_line": 477, "end_line": 482}, "steps": [], "generation_failure": {"error": "Failed to generate stacktrace", "error_message": "[Errno 2] No such file or directory: './projects/Time/26/results/stacktrace-testWithMillisOfSecondInDstChange_NewYork_winter-set.csv'"}}, {"failing_test": {"className": " org.joda.time.TestDateTimeZoneCutover", "methodName": "testWithMillisOfSecondInDstChange_NewYork_winter", "error": "junit.framework.ComparisonFailure", "message": "expected:<...11-04T01:30:00.000-0[5]:00> but was:<...11-04T01:30:00.000-0[4]:00>"}, "patched_method": {"file_path": "/src/main/java/org/joda/time/chrono/ZonedChronology.java", "method_name": "set", "content": "        public long set(long instant, int value) {\n            long localInstant = iZone.convertUTCToLocal(instant);\n            localInstant = iField.set(localInstant, value);\n            long result = iZone.convertLocalToUTC(localInstant, false);\n            if (get(result) != value) {\n                throw new IllegalFieldValueException(iField.getType(), new Integer(value),\n                    \"Illegal instant due to time zone offset transition: \" +\n                    DateTimeFormat.forPattern(\"yyyy-MM-dd'T'HH:mm:ss.SSS\").print(new Instant(localInstant)) +\n                    \" (\" + iZone.getID() + \")\");\n            }\n            return result;\n        }", "javadoc_start_line": 464, "annotations_start_line": 464, "method_start_line": 464, "end_line": 475}, "steps": [{"file_path": "/src/test/java/org/joda/time/TestDateTimeZoneCutover.java", "method_name": "testWithMillisOfSecondInDstChange_NewYork_winter", "content": "    public void testWithMillisOfSecondInDstChange_NewYork_winter() {\n        DateTime dateTime = new DateTime(\"2007-11-04T01:30:00.123-05:00\", ZONE_NEW_YORK);\n        assertEquals(\"2007-11-04T01:30:00.123-05:00\", dateTime.toString());\n        DateTime test = dateTime.withMillisOfSecond(0);\n        assertEquals(\"2007-11-04T01:30:00.000-05:00\", test.toString());\n    }", "javadoc_start_line": 1125, "annotations_start_line": 1125, "method_start_line": 1125, "end_line": 1130}, {"file_path": "/src/main/java/org/joda/time/DateTime.java", "method_name": "withMillisOfSecond", "content": "    /**\n     * Returns a copy of this datetime with the millis of second field updated.\n     * <p>\n     * DateTime is immutable, so there are no set methods.\n     * Instead, this method returns a new instance with the value of\n     * millis of second changed.\n     *\n     * @param millis  the millis of second to set\n     * @return a copy of this object with the field set\n     * @throws IllegalArgumentException if the value is invalid\n     * @since 1.3\n     */\n    public DateTime withMillisOfSecond(int millis) {\n        return withMillis(getChronology().millisOfSecond().set(getMillis(), millis));\n    }", "javadoc_start_line": 1681, "annotations_start_line": 1693, "method_start_line": 1693, "end_line": 1695}]}, {"failing_test": {"className": " org.joda.time.TestDateTimeZoneCutover", "methodName": "testWithMillisOfSecondInDstChange_NewYork_winter", "error": "junit.framework.ComparisonFailure", "message": "expected:<...11-04T01:30:00.000-0[5]:00> but was:<...11-04T01:30:00.000-0[4]:00>"}, "patched_method": {"file_path": "/src/main/java/org/joda/time/chrono/ZonedChronology.java", "method_name": "addWrapField", "content": "        public long addWrapField(long instant, int value) {\n            if (iTimeField) {\n                int offset = getOffsetToAdd(instant);\n                long localInstant = iField.addWrapField(instant + offset, value);\n                return localInstant - offset;\n            } else {\n                long localInstant = iZone.convertUTCToLocal(instant);\n                localInstant = iField.addWrapField(localInstant, value);\n                return iZone.convertLocalToUTC(localInstant, false);\n            }\n        }", "javadoc_start_line": 452, "annotations_start_line": 452, "method_start_line": 452, "end_line": 462}, "steps": [], "generation_failure": {"error": "Failed to generate stacktrace", "error_message": "[Errno 2] No such file or directory: './projects/Time/26/results/stacktrace-testWithMillisOfSecondInDstChange_NewYork_winter-addWrapField.csv'"}}, {"failing_test": {"className": " org.joda.time.TestDateTimeZoneCutover", "methodName": "testWithMillisOfSecondInDstChange_NewYork_winter", "error": "junit.framework.ComparisonFailure", "message": "expected:<...11-04T01:30:00.000-0[5]:00> but was:<...11-04T01:30:00.000-0[4]:00>"}, "patched_method": {"file_path": "/src/main/java/org/joda/time/chrono/ZonedChronology.java", "method_name": "add", "content": "        public long add(long instant, long value) {\n            if (iTimeField) {\n                int offset = getOffsetToAdd(instant);\n                long localInstant = iField.add(instant + offset, value);\n                return localInstant - offset;\n            } else {\n               long localInstant = iZone.convertUTCToLocal(instant);\n               localInstant = iField.add(localInstant, value);\n               return iZone.convertLocalToUTC(localInstant, false);\n            }\n        }", "javadoc_start_line": 440, "annotations_start_line": 440, "method_start_line": 440, "end_line": 450}, "steps": [], "generation_failure": {"error": "Failed to generate stacktrace", "error_message": "[Errno 2] No such file or directory: './projects/Time/26/results/stacktrace-testWithMillisOfSecondInDstChange_NewYork_winter-add.csv'"}}, {"failing_test": {"className": " org.joda.time.TestDateTimeZoneCutover", "methodName": "testWithMillisOfSecondInDstChange_NewYork_winter", "error": "junit.framework.ComparisonFailure", "message": "expected:<...11-04T01:30:00.000-0[5]:00> but was:<...11-04T01:30:00.000-0[4]:00>"}, "patched_method": {"file_path": "/src/main/java/org/joda/time/chrono/ZonedChronology.java", "method_name": "add", "content": "        public long add(long instant, int value) {\n            if (iTimeField) {\n                int offset = getOffsetToAdd(instant);\n                long localInstant = iField.add(instant + offset, value);\n                return localInstant - offset;\n            } else {\n               long localInstant = iZone.convertUTCToLocal(instant);\n               localInstant = iField.add(localInstant, value);\n               return iZone.convertLocalToUTC(localInstant, false);\n            }\n        }", "javadoc_start_line": 428, "annotations_start_line": 428, "method_start_line": 428, "end_line": 438}, "steps": [], "generation_failure": {"error": "Failed to generate stacktrace", "error_message": "[Errno 2] No such file or directory: './projects/Time/26/results/stacktrace-testWithMillisOfSecondInDstChange_NewYork_winter-add.csv'"}}, {"failing_test": {"className": " org.joda.time.TestDateTimeZoneCutover", "methodName": "testBug2182444_ausNSW", "error": "junit.framework.AssertionFailedError", "message": "expected:<2008-04-06T02:00:00.000+11:00> but was:<2008-04-06T02:00:00.000+10:00>"}, "patched_method": {"file_path": "/src/main/java/org/joda/time/chrono/ZonedChronology.java", "method_name": "roundCeiling", "content": "        public long roundCeiling(long instant) {\n            if (iTimeField) {\n                int offset = getOffsetToAdd(instant);\n                instant = iField.roundCeiling(instant + offset);\n                return instant - offset;\n            } else {\n                long localInstant = iZone.convertUTCToLocal(instant);\n                localInstant = iField.roundCeiling(localInstant);\n                return iZone.convertLocalToUTC(localInstant, false);\n            }\n        }", "javadoc_start_line": 532, "annotations_start_line": 532, "method_start_line": 532, "end_line": 542}, "steps": [], "generation_failure": {"error": "Failed to generate stacktrace", "error_message": "[Errno 2] No such file or directory: './projects/Time/26/results/stacktrace-testBug2182444_ausNSW-roundCeiling.csv'"}}, {"failing_test": {"className": " org.joda.time.TestDateTimeZoneCutover", "methodName": "testBug2182444_ausNSW", "error": "junit.framework.AssertionFailedError", "message": "expected:<2008-04-06T02:00:00.000+11:00> but was:<2008-04-06T02:00:00.000+10:00>"}, "patched_method": {"file_path": "/src/main/java/org/joda/time/chrono/ZonedChronology.java", "method_name": "roundFloor", "content": "        public long roundFloor(long instant) {\n            if (iTimeField) {\n                int offset = getOffsetToAdd(instant);\n                instant = iField.roundFloor(instant + offset);\n                return instant - offset;\n            } else {\n                long localInstant = iZone.convertUTCToLocal(instant);\n                localInstant = iField.roundFloor(localInstant);\n                return iZone.convertLocalToUTC(localInstant, false);\n            }\n        }", "javadoc_start_line": 520, "annotations_start_line": 520, "method_start_line": 520, "end_line": 530}, "steps": [], "generation_failure": {"error": "Failed to generate stacktrace", "error_message": "[Errno 2] No such file or directory: './projects/Time/26/results/stacktrace-testBug2182444_ausNSW-roundFloor.csv'"}}, {"failing_test": {"className": " org.joda.time.TestDateTimeZoneCutover", "methodName": "testBug2182444_ausNSW", "error": "junit.framework.AssertionFailedError", "message": "expected:<2008-04-06T02:00:00.000+11:00> but was:<2008-04-06T02:00:00.000+10:00>"}, "patched_method": {"file_path": "/src/main/java/org/joda/time/chrono/ZonedChronology.java", "method_name": "set", "content": "        public long set(long instant, String text, Locale locale) {\n            // cannot verify that new value stuck because set may be lenient\n            long localInstant = iZone.convertUTCToLocal(instant);\n            localInstant = iField.set(localInstant, text, locale);\n            return iZone.convertLocalToUTC(localInstant, false);\n        }", "javadoc_start_line": 477, "annotations_start_line": 477, "method_start_line": 477, "end_line": 482}, "steps": [], "generation_failure": {"error": "Failed to generate stacktrace", "error_message": "[Errno 2] No such file or directory: './projects/Time/26/results/stacktrace-testBug2182444_ausNSW-set.csv'"}}, {"failing_test": {"className": " org.joda.time.TestDateTimeZoneCutover", "methodName": "testBug2182444_ausNSW", "error": "junit.framework.AssertionFailedError", "message": "expected:<2008-04-06T02:00:00.000+11:00> but was:<2008-04-06T02:00:00.000+10:00>"}, "patched_method": {"file_path": "/src/main/java/org/joda/time/chrono/ZonedChronology.java", "method_name": "set", "content": "        public long set(long instant, int value) {\n            long localInstant = iZone.convertUTCToLocal(instant);\n            localInstant = iField.set(localInstant, value);\n            long result = iZone.convertLocalToUTC(localInstant, false);\n            if (get(result) != value) {\n                throw new IllegalFieldValueException(iField.getType(), new Integer(value),\n                    \"Illegal instant due to time zone offset transition: \" +\n                    DateTimeFormat.forPattern(\"yyyy-MM-dd'T'HH:mm:ss.SSS\").print(new Instant(localInstant)) +\n                    \" (\" + iZone.getID() + \")\");\n            }\n            return result;\n        }", "javadoc_start_line": 464, "annotations_start_line": 464, "method_start_line": 464, "end_line": 475}, "steps": [{"file_path": "/src/test/java/org/joda/time/TestDateTimeZoneCutover.java", "method_name": "testBug2182444_ausNSW", "content": "    public void testBug2182444_ausNSW() {\n        Chronology chronAusNSW = GregorianChronology.getInstance(DateTimeZone.forID(\"Australia/NSW\"));\n        Chronology chronUTC = GregorianChronology.getInstance(DateTimeZone.UTC);\n        DateTime australiaNSWStandardInUTC = new DateTime(2008, 4, 5, 16, 0, 0, 0, chronUTC);\n        DateTime australiaNSWDaylightInUTC = new DateTime(2008, 4, 5, 15, 0, 0, 0, chronUTC);\n        assertTrue(\"Should be standard time\", chronAusNSW.getZone().isStandardOffset(australiaNSWStandardInUTC.getMillis()));\n        assertFalse(\"Should be daylight time\", chronAusNSW.getZone().isStandardOffset(australiaNSWDaylightInUTC.getMillis()));\n        \n        DateTime australiaNSWStandardInAustraliaNSW = australiaNSWStandardInUTC.toDateTime(chronAusNSW);\n        DateTime australiaNSWDaylightInAusraliaNSW = australiaNSWDaylightInUTC.toDateTime(chronAusNSW);\n        assertEquals(2, australiaNSWStandardInAustraliaNSW.getHourOfDay());\n        assertEquals(australiaNSWStandardInAustraliaNSW.getHourOfDay(), australiaNSWDaylightInAusraliaNSW.getHourOfDay());\n        assertTrue(australiaNSWStandardInAustraliaNSW.getMillis() != australiaNSWDaylightInAusraliaNSW.getMillis());\n        assertEquals(australiaNSWStandardInAustraliaNSW, australiaNSWStandardInAustraliaNSW.withHourOfDay(2));\n        assertEquals(australiaNSWStandardInAustraliaNSW.getMillis() + 3, australiaNSWStandardInAustraliaNSW.withMillisOfSecond(3).getMillis());\n        assertEquals(australiaNSWDaylightInAusraliaNSW, australiaNSWDaylightInAusraliaNSW.withHourOfDay(2));\n        assertEquals(australiaNSWDaylightInAusraliaNSW.getMillis() + 3, australiaNSWDaylightInAusraliaNSW.withMillisOfSecond(3).getMillis());\n    }", "javadoc_start_line": 1172, "annotations_start_line": 1172, "method_start_line": 1172, "end_line": 1189}, {"file_path": "/src/main/java/org/joda/time/DateTime.java", "method_name": "withHourOfDay", "content": "    /**\n     * Returns a copy of this datetime with the hour of day field updated.\n     * <p>\n     * DateTime is immutable, so there are no set methods.\n     * Instead, this method returns a new instance with the value of\n     * hour of day changed.\n     *\n     * @param hour  the hour of day to set\n     * @return a copy of this object with the field set\n     * @throws IllegalArgumentException if the value is invalid\n     * @since 1.3\n     */\n    public DateTime withHourOfDay(int hour) {\n        return withMillis(getChronology().hourOfDay().set(getMillis(), hour));\n    }", "javadoc_start_line": 1633, "annotations_start_line": 1645, "method_start_line": 1645, "end_line": 1647}]}, {"failing_test": {"className": " org.joda.time.TestDateTimeZoneCutover", "methodName": "testBug2182444_ausNSW", "error": "junit.framework.AssertionFailedError", "message": "expected:<2008-04-06T02:00:00.000+11:00> but was:<2008-04-06T02:00:00.000+10:00>"}, "patched_method": {"file_path": "/src/main/java/org/joda/time/chrono/ZonedChronology.java", "method_name": "addWrapField", "content": "        public long addWrapField(long instant, int value) {\n            if (iTimeField) {\n                int offset = getOffsetToAdd(instant);\n                long localInstant = iField.addWrapField(instant + offset, value);\n                return localInstant - offset;\n            } else {\n                long localInstant = iZone.convertUTCToLocal(instant);\n                localInstant = iField.addWrapField(localInstant, value);\n                return iZone.convertLocalToUTC(localInstant, false);\n            }\n        }", "javadoc_start_line": 452, "annotations_start_line": 452, "method_start_line": 452, "end_line": 462}, "steps": [], "generation_failure": {"error": "Failed to generate stacktrace", "error_message": "[Errno 2] No such file or directory: './projects/Time/26/results/stacktrace-testBug2182444_ausNSW-addWrapField.csv'"}}, {"failing_test": {"className": " org.joda.time.TestDateTimeZoneCutover", "methodName": "testBug2182444_ausNSW", "error": "junit.framework.AssertionFailedError", "message": "expected:<2008-04-06T02:00:00.000+11:00> but was:<2008-04-06T02:00:00.000+10:00>"}, "patched_method": {"file_path": "/src/main/java/org/joda/time/chrono/ZonedChronology.java", "method_name": "add", "content": "        public long add(long instant, long value) {\n            if (iTimeField) {\n                int offset = getOffsetToAdd(instant);\n                long localInstant = iField.add(instant + offset, value);\n                return localInstant - offset;\n            } else {\n               long localInstant = iZone.convertUTCToLocal(instant);\n               localInstant = iField.add(localInstant, value);\n               return iZone.convertLocalToUTC(localInstant, false);\n            }\n        }", "javadoc_start_line": 440, "annotations_start_line": 440, "method_start_line": 440, "end_line": 450}, "steps": [], "generation_failure": {"error": "Failed to generate stacktrace", "error_message": "[Errno 2] No such file or directory: './projects/Time/26/results/stacktrace-testBug2182444_ausNSW-add.csv'"}}, {"failing_test": {"className": " org.joda.time.TestDateTimeZoneCutover", "methodName": "testBug2182444_ausNSW", "error": "junit.framework.AssertionFailedError", "message": "expected:<2008-04-06T02:00:00.000+11:00> but was:<2008-04-06T02:00:00.000+10:00>"}, "patched_method": {"file_path": "/src/main/java/org/joda/time/chrono/ZonedChronology.java", "method_name": "add", "content": "        public long add(long instant, int value) {\n            if (iTimeField) {\n                int offset = getOffsetToAdd(instant);\n                long localInstant = iField.add(instant + offset, value);\n                return localInstant - offset;\n            } else {\n               long localInstant = iZone.convertUTCToLocal(instant);\n               localInstant = iField.add(localInstant, value);\n               return iZone.convertLocalToUTC(localInstant, false);\n            }\n        }", "javadoc_start_line": 428, "annotations_start_line": 428, "method_start_line": 428, "end_line": 438}, "steps": [], "generation_failure": {"error": "Failed to generate stacktrace", "error_message": "[Errno 2] No such file or directory: './projects/Time/26/results/stacktrace-testBug2182444_ausNSW-add.csv'"}}], "project": {"name": "Time", "version": 26}}