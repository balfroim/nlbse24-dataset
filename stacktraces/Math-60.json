{"tours": [{"failing_test": {"className": " org.apache.commons.math.distribution.NormalDistributionTest", "methodName": "testExtremeValues", "error": "org.apache.commons.math.ConvergenceException", "message": "Continued fraction diverged to NaN for value \u221e"}, "patched_method": {"file_path": "/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java", "method_name": "cumulativeProbability", "content": "    /**\n     * For this distribution, {@code X}, this method returns {@code P(X < x)}.\n     * If {@code x}is more than 40 standard deviations from the mean, 0 or 1 is returned,\n     * as in these cases the actual value is within {@code Double.MIN_VALUE} of 0 or 1.\n     *\n     * @param x Value at which the CDF is evaluated.\n     * @return CDF evaluated at {@code x}.\n     * @throws MathException if the algorithm fails to converge\n     */\n    public double cumulativeProbability(double x) throws MathException {\n        final double dev = x - mean;\n        try {\n        return 0.5 * (1.0 + Erf.erf((dev) /\n                    (standardDeviation * FastMath.sqrt(2.0))));\n        } catch (MaxIterationsExceededException ex) {\n            if (x < (mean - 20 * standardDeviation)) { // JDK 1.5 blows at 38\n                return 0;\n            } else if (x > (mean + 20 * standardDeviation)) {\n                return 1;\n            } else {\n                throw ex;\n            }\n        }\n    }", "javadoc_start_line": 115, "annotations_start_line": 124, "method_start_line": 124, "end_line": 138}, "steps": [{"file_path": "/src/test/java/org/apache/commons/math/distribution/NormalDistributionTest.java", "method_name": "testExtremeValues", "content": "    /**\n     * Check to make sure top-coding of extreme values works correctly.\n     * Verifies fixes for JIRA MATH-167, MATH-414\n     */\n    public void testExtremeValues() throws Exception {\n        NormalDistribution distribution = new NormalDistributionImpl(0, 1);\n        for (int i = 0; i < 100; i++) { // make sure no convergence exception\n            double lowerTail = distribution.cumulativeProbability(-i);\n            double upperTail = distribution.cumulativeProbability(i);\n            if (i < 9) { // make sure not top-coded \n                // For i = 10, due to bad tail precision in erf (MATH-364), 1 is returned\n                // TODO: once MATH-364 is resolved, replace 9 with 30\n                assertTrue(lowerTail > 0.0d);\n                assertTrue(upperTail < 1.0d);\n            }\n            else { // make sure top coding not reversed\n                assertTrue(lowerTail < 0.00001);\n                assertTrue(upperTail > 0.99999);\n            }\n        }\n        \n        assertEquals(distribution.cumulativeProbability(Double.MAX_VALUE), 1, 0);\n        assertEquals(distribution.cumulativeProbability(-Double.MAX_VALUE), 0, 0);\n        assertEquals(distribution.cumulativeProbability(Double.POSITIVE_INFINITY), 1, 0);\n        assertEquals(distribution.cumulativeProbability(Double.NEGATIVE_INFINITY), 0, 0);\n        \n   }", "javadoc_start_line": 153, "annotations_start_line": 157, "method_start_line": 157, "end_line": 179}, {"file_path": "/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java", "method_name": "cumulativeProbability", "content": "    /**\n     * For this distribution, {@code X}, this method returns {@code P(X < x)}.\n     * If {@code x}is more than 40 standard deviations from the mean, 0 or 1 is returned,\n     * as in these cases the actual value is within {@code Double.MIN_VALUE} of 0 or 1.\n     *\n     * @param x Value at which the CDF is evaluated.\n     * @return CDF evaluated at {@code x}.\n     * @throws MathException if the algorithm fails to converge\n     */\n    public double cumulativeProbability(double x) throws MathException {\n        final double dev = x - mean;\n        try {\n        return 0.5 * (1.0 + Erf.erf((dev) /\n                    (standardDeviation * FastMath.sqrt(2.0))));\n        } catch (MaxIterationsExceededException ex) {\n            if (x < (mean - 20 * standardDeviation)) { // JDK 1.5 blows at 38\n                return 0;\n            } else if (x > (mean + 20 * standardDeviation)) {\n                return 1;\n            } else {\n                throw ex;\n            }\n        }\n    }", "javadoc_start_line": 115, "annotations_start_line": 124, "method_start_line": 124, "end_line": 138}]}], "project": {"name": "Math", "version": 60}}