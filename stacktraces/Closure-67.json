{"tours": [{"failing_test": {"className": " com.google.javascript.jscomp.RemoveUnusedPrototypePropertiesTest", "methodName": "testAliasing7", "error": "junit.framework.AssertionFailedError", "message": ""}, "patched_method": {"file_path": "/src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java", "method_name": "isPrototypePropertyAssign", "content": "    private boolean isPrototypePropertyAssign(Node assign) {\n      Node n = assign.getFirstChild();\n      if (n != null && NodeUtil.isVarOrSimpleAssignLhs(n, assign)\n          && n.getType() == Token.GETPROP\n          ) {\n        // We want to exclude the assignment itself from the usage list\n        boolean isChainedProperty =\n            n.getFirstChild().getType() == Token.GETPROP;\n\n        if (isChainedProperty) {\n          Node child = n.getFirstChild().getFirstChild().getNext();\n\n          if (child.getType() == Token.STRING &&\n              child.getString().equals(\"prototype\")) {\n            return true;\n          }\n        }\n      }\n\n      return false;\n    }", "javadoc_start_line": 314, "annotations_start_line": 314, "method_start_line": 314, "end_line": 334}, "steps": [{"file_path": "/src/com/google/javascript/jscomp/RemoveUnusedPrototypeProperties.java", "method_name": "process", "content": "  public void process(Node externRoot, Node root) {\n    AnalyzePrototypeProperties analyzer =\n        new AnalyzePrototypeProperties(compiler,\n            null /* no module graph */, canModifyExterns, anchorUnusedVars);\n    analyzer.process(externRoot, root);\n    removeUnusedSymbols(analyzer.getAllNameInfo());\n  }", "javadoc_start_line": 68, "annotations_start_line": 67, "method_start_line": 68, "end_line": 74}, {"file_path": "/src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java", "method_name": "process", "content": "  public void process(Node externRoot, Node root) {\n    if (!canModifyExterns) {\n      NodeTraversal.traverse(compiler, externRoot,\n          new ProcessExternProperties());\n    }\n\n    NodeTraversal.traverse(compiler, root, new ProcessProperties());\n\n    FixedPointGraphTraversal<NameInfo, JSModule> t =\n        FixedPointGraphTraversal.newTraversal(new PropagateReferences());\n    t.computeFixedPoint(symbolGraph,\n        Sets.newHashSet(externNode, globalNode));\n  }", "javadoc_start_line": 145, "annotations_start_line": 145, "method_start_line": 145, "end_line": 157}, {"file_path": "/src/com/google/javascript/jscomp/NodeTraversal.java", "method_name": "traverse", "content": "  /**\n   * Traverses a node recursively.\n   */\n  public static void traverse(\n      AbstractCompiler compiler, Node root, Callback cb) {\n    NodeTraversal t = new NodeTraversal(compiler, cb);\n    t.traverse(root);\n  }", "javadoc_start_line": 416, "annotations_start_line": 419, "method_start_line": 420, "end_line": 423}, {"file_path": "/src/com/google/javascript/jscomp/NodeTraversal.java", "method_name": "traverse", "content": "  /**\n   * Traverses a parse tree recursively.\n   */\n  public void traverse(Node root) {\n    try {\n      sourceName = \"\";\n      curNode = root;\n      pushScope(root);\n      traverseBranch(root, null);\n      popScope();\n    } catch (Exception unexpectedException) {\n      throwUnexpectedException(unexpectedException);\n    }\n  }", "javadoc_start_line": 241, "annotations_start_line": 244, "method_start_line": 244, "end_line": 254}, {"file_path": "/src/com/google/javascript/jscomp/NodeTraversal.java", "method_name": "traverseBranch", "content": "  /**\n   * Traverses a branch.\n   */\n  @SuppressWarnings(\"fallthrough\")\n  private void traverseBranch(Node n, Node parent) {\n    int type = n.getType();\n    if (type == Token.SCRIPT) {\n      sourceName = getSourceName(n);\n    }\n\n    curNode = n;\n    if (!callback.shouldTraverse(this, n, parent)) return;\n\n    switch (type) {\n      case Token.FUNCTION:\n        traverseFunction(n, parent);\n        break;\n\n      default:\n        for (Node child = n.getFirstChild(); child != null; ) {\n          // child could be replaced, in which case our child node\n          // would no longer point to the true next\n          Node next = child.getNext();\n          traverseBranch(child, n);\n          child = next;\n        }\n        break;\n    }\n\n    curNode = n;\n    callback.visit(this, n, parent);\n  }", "javadoc_start_line": 434, "annotations_start_line": 437, "method_start_line": 438, "end_line": 465}]}], "project": {"name": "Closure", "version": 67}}