{"tours": [{"failing_test": {"className": " org.joda.time.format.TestISOPeriodFormat", "methodName": "testFormatStandard_negative", "error": "junit.framework.ComparisonFailure", "message": "expected:<PT[-]0.008S> but was:<PT[]0.008S>"}, "patched_method": {"file_path": "/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java", "method_name": "printTo", "content": "        public void printTo(StringBuffer buf, ReadablePeriod period, Locale locale) {\n            long valueLong = getFieldValue(period);\n            if (valueLong == Long.MAX_VALUE) {\n                return;\n            }\n            int value = (int) valueLong;\n            if (iFieldType >= SECONDS_MILLIS) {\n                value = (int) (valueLong / DateTimeConstants.MILLIS_PER_SECOND);\n            }\n\n            if (iPrefix != null) {\n                iPrefix.printTo(buf, value);\n            }\n            int minDigits = iMinPrintedDigits;\n            if (minDigits <= 1) {\n                FormatUtils.appendUnpaddedInteger(buf, value);\n            } else {\n                FormatUtils.appendPaddedInteger(buf, value, minDigits);\n            }\n            if (iFieldType >= SECONDS_MILLIS) {\n                int dp = (int) (Math.abs(valueLong) % DateTimeConstants.MILLIS_PER_SECOND);\n                if (iFieldType == SECONDS_MILLIS || dp > 0) {\n                    buf.append('.');\n                    FormatUtils.appendPaddedInteger(buf, dp, 3);\n                }\n            }\n            if (iSuffix != null) {\n                iSuffix.printTo(buf, value);\n            }\n        }", "javadoc_start_line": 1120, "annotations_start_line": 1120, "method_start_line": 1120, "end_line": 1149}, "steps": [{"file_path": "/src/test/java/org/joda/time/format/TestISOPeriodFormat.java", "method_name": "testFormatStandard_negative", "content": "    public void testFormatStandard_negative() {\n        Period p = new Period(-1, -2, -3, -4, -5, -6, -7, -8);\n        assertEquals(\"P-1Y-2M-3W-4DT-5H-6M-7.008S\", ISOPeriodFormat.standard().print(p));\n        \n        p = Period.years(-54);\n        assertEquals(\"P-54Y\", ISOPeriodFormat.standard().print(p));\n        \n        p = Period.seconds(4).withMillis(-8);\n        assertEquals(\"PT3.992S\", ISOPeriodFormat.standard().print(p));\n        \n        p = Period.seconds(-4).withMillis(8);\n        assertEquals(\"PT-3.992S\", ISOPeriodFormat.standard().print(p));\n        \n        p = Period.seconds(-23);\n        assertEquals(\"PT-23S\", ISOPeriodFormat.standard().print(p));\n        \n        p = Period.millis(-8);\n        assertEquals(\"PT-0.008S\", ISOPeriodFormat.standard().print(p));\n    }", "javadoc_start_line": 118, "annotations_start_line": 118, "method_start_line": 118, "end_line": 136}, {"file_path": "/src/main/java/org/joda/time/format/PeriodFormatter.java", "method_name": "print", "content": "    /**\n     * Prints a ReadablePeriod to a new String.\n     *\n     * @param period  the period to format, not null\n     * @return the printed result\n     */\n    public String print(ReadablePeriod period) {\n        checkPrinter();\n        checkPeriod(period);\n        \n        PeriodPrinter printer = getPrinter();\n        StringBuffer buf = new StringBuffer(printer.calculatePrintedLength(period, iLocale));\n        printer.printTo(buf, period, iLocale);\n        return buf.toString();\n    }", "javadoc_start_line": 229, "annotations_start_line": 235, "method_start_line": 235, "end_line": 243}]}, {"failing_test": {"className": " org.joda.time.format.TestISOPeriodFormat", "methodName": "testFormatStandard_negative", "error": "junit.framework.ComparisonFailure", "message": "expected:<PT[-]0.008S> but was:<PT[]0.008S>"}, "patched_method": {"file_path": "/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java", "method_name": "calculatePrintedLength", "content": "        public int calculatePrintedLength(ReadablePeriod period, Locale locale) {\n            long valueLong = getFieldValue(period);\n            if (valueLong == Long.MAX_VALUE) {\n                return 0;\n            }\n\n            int sum = Math.max(FormatUtils.calculateDigitCount(valueLong), iMinPrintedDigits);\n            if (iFieldType >= SECONDS_MILLIS) {\n                // valueLong contains the seconds and millis fields\n                // the minimum output is 0.000, which is 4 or 5 digits with a negative\n                sum = Math.max(sum, 4);\n                // plus one for the decimal point\n                sum++;\n                if (iFieldType == SECONDS_OPTIONAL_MILLIS &&\n                        (Math.abs(valueLong) % DateTimeConstants.MILLIS_PER_SECOND) == 0) {\n                    sum -= 4; // remove three digits and decimal point\n                }\n                // reset valueLong to refer to the seconds part for the prefic/suffix calculation\n                valueLong = valueLong / DateTimeConstants.MILLIS_PER_SECOND;\n            }\n            int value = (int) valueLong;\n\n            if (iPrefix != null) {\n                sum += iPrefix.calculatePrintedLength(value);\n            }\n            if (iSuffix != null) {\n                sum += iSuffix.calculatePrintedLength(value);\n            }\n\n            return sum;\n        }", "javadoc_start_line": 1088, "annotations_start_line": 1088, "method_start_line": 1088, "end_line": 1118}, "steps": [{"file_path": "/src/test/java/org/joda/time/format/TestISOPeriodFormat.java", "method_name": "testFormatStandard_negative", "content": "    public void testFormatStandard_negative() {\n        Period p = new Period(-1, -2, -3, -4, -5, -6, -7, -8);\n        assertEquals(\"P-1Y-2M-3W-4DT-5H-6M-7.008S\", ISOPeriodFormat.standard().print(p));\n        \n        p = Period.years(-54);\n        assertEquals(\"P-54Y\", ISOPeriodFormat.standard().print(p));\n        \n        p = Period.seconds(4).withMillis(-8);\n        assertEquals(\"PT3.992S\", ISOPeriodFormat.standard().print(p));\n        \n        p = Period.seconds(-4).withMillis(8);\n        assertEquals(\"PT-3.992S\", ISOPeriodFormat.standard().print(p));\n        \n        p = Period.seconds(-23);\n        assertEquals(\"PT-23S\", ISOPeriodFormat.standard().print(p));\n        \n        p = Period.millis(-8);\n        assertEquals(\"PT-0.008S\", ISOPeriodFormat.standard().print(p));\n    }", "javadoc_start_line": 118, "annotations_start_line": 118, "method_start_line": 118, "end_line": 136}, {"file_path": "/src/main/java/org/joda/time/format/PeriodFormatter.java", "method_name": "print", "content": "    /**\n     * Prints a ReadablePeriod to a new String.\n     *\n     * @param period  the period to format, not null\n     * @return the printed result\n     */\n    public String print(ReadablePeriod period) {\n        checkPrinter();\n        checkPeriod(period);\n        \n        PeriodPrinter printer = getPrinter();\n        StringBuffer buf = new StringBuffer(printer.calculatePrintedLength(period, iLocale));\n        printer.printTo(buf, period, iLocale);\n        return buf.toString();\n    }", "javadoc_start_line": 229, "annotations_start_line": 235, "method_start_line": 235, "end_line": 243}]}], "project": {"name": "Time", "version": 13}}