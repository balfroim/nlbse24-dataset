{"tours": [{"failing_test": {"className": " org.apache.commons.math.optimization.fitting.GaussianFitterTest", "methodName": "testMath519", "error": "org.apache.commons.math.exception.NotStrictlyPositiveException", "message": "-1.277 is smaller than, or equal to, the minimum (0)"}, "patched_method": {"file_path": "/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java", "method_name": "fit", "content": "    /**\n     * Fits a Gaussian function to the observed points.\n     *\n     * @return the parameters of the Gaussian function that best fits the\n     * observed points (in the same order as above).\n     */\n    public double[] fit() {\n        final double[] guess = (new ParameterGuesser(getObservations())).guess();\n        return fit(new Gaussian.Parametric(), guess);\n    }", "javadoc_start_line": 113, "annotations_start_line": 119, "method_start_line": 119, "end_line": 122}, "steps": [{"file_path": "/src/test/java/org/apache/commons/math/optimization/fitting/GaussianFitterTest.java", "method_name": "testMath519", "content": "    public void testMath519() {\n        // The optimizer will try negative sigma values but \"GaussianFitter\"\n        // will catch the raised exceptions and return NaN values instead.\n\n        final double[] data = { \n            1.1143831578403364E-29,\n            4.95281403484594E-28,\n            1.1171347211930288E-26,\n            1.7044813962636277E-25,\n            1.9784716574832164E-24,\n            1.8630236407866774E-23,\n            1.4820532905097742E-22,\n            1.0241963854632831E-21,\n            6.275077366673128E-21,\n            3.461808994532493E-20,\n            1.7407124684715706E-19,\n            8.056687953553974E-19,\n            3.460193945992071E-18,\n            1.3883326374011525E-17,\n            5.233894983671116E-17,\n            1.8630791465263745E-16,\n            6.288759227922111E-16,\n            2.0204433920597856E-15,\n            6.198768938576155E-15,\n            1.821419346860626E-14,\n            5.139176445538471E-14,\n            1.3956427429045787E-13,\n            3.655705706448139E-13,\n            9.253753324779779E-13,\n            2.267636001476696E-12,\n            5.3880460095836855E-12,\n            1.2431632654852931E-11\n        };\n\n        GaussianFitter fitter = new GaussianFitter(new LevenbergMarquardtOptimizer());\n        for (int i = 0; i < data.length; i++) {\n            fitter.addObservedPoint(i, data[i]);\n        }\n        final double[] p = fitter.fit();\n\n        Assert.assertEquals(53.1572792, p[1], 1e-7);\n        Assert.assertEquals(5.75214622, p[2], 1e-8);\n    }", "javadoc_start_line": 298, "annotations_start_line": 297, "method_start_line": 298, "end_line": 340}, {"file_path": "/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java", "method_name": "fit", "content": "    /**\n     * Fits a Gaussian function to the observed points.\n     *\n     * @return the parameters of the Gaussian function that best fits the\n     * observed points (in the same order as above).\n     */\n    public double[] fit() {\n        final double[] guess = (new ParameterGuesser(getObservations())).guess();\n        return fit(new Gaussian.Parametric(), guess);\n    }", "javadoc_start_line": 113, "annotations_start_line": 119, "method_start_line": 119, "end_line": 122}]}], "project": {"name": "Math", "version": 58}}