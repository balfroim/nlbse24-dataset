{"tours": [{"failing_test": {"className": " org.apache.commons.lang3.SystemUtilsTest", "methodName": "testJavaVersionAsInt", "error": "junit.framework.AssertionFailedError", "message": "expected:<0> but was:<0.0>"}, "patched_method": {"file_path": "/src/main/java/org/apache/commons/lang3/SystemUtils.java", "method_name": "toJavaVersionInt", "content": "    /**\n     * <p>\n     * Converts the given Java version string to an <code>int</code>.\n     * </p>\n     * \n     * <p>\n     * Example return values:\n     * </p>\n     * <ul>\n     * <li><code>120</code> for Java 1.2</li>\n     * <li><code>131</code> for Java 1.3.1</li>\n     * <li><code>160</code> for Java 1.6.0_20</li>\n     * </ul>\n     * \n     * <p>\n     * Patch releases are not reported.\n     * </p>\n     * <p>\n     * This method is package private instead of private to support unit test invocation.\n     * </p>\n     * \n     * @return the version, for example 131 for Java 1.3.1\n     */\n    static float toJavaVersionInt(String version) {\n        return toVersionInt(toJavaVersionIntArray(version, JAVA_VERSION_TRIM_SIZE));\n    }", "javadoc_start_line": 1649, "annotations_start_line": 1672, "method_start_line": 1672, "end_line": 1674}, "steps": [{"file_path": "/src/test/java/org/apache/commons/lang3/SystemUtilsTest.java", "method_name": "testJavaVersionAsInt", "content": "    public void testJavaVersionAsInt() {\n        assertEquals(0, SystemUtils.toJavaVersionInt(null));\n        assertEquals(0, SystemUtils.toJavaVersionInt(\"\"));\n        assertEquals(0, SystemUtils.toJavaVersionInt(\"0\"));\n        assertEquals(110, SystemUtils.toJavaVersionInt(\"1.1\"));\n        assertEquals(120, SystemUtils.toJavaVersionInt(\"1.2\"));\n        assertEquals(130, SystemUtils.toJavaVersionInt(\"1.3.0\"));\n        assertEquals(131, SystemUtils.toJavaVersionInt(\"1.3.1\"));\n        assertEquals(140, SystemUtils.toJavaVersionInt(\"1.4.0\"));\n        assertEquals(141, SystemUtils.toJavaVersionInt(\"1.4.1\"));\n        assertEquals(142, SystemUtils.toJavaVersionInt(\"1.4.2\"));\n        assertEquals(150, SystemUtils.toJavaVersionInt(\"1.5.0\"));\n        assertEquals(160, SystemUtils.toJavaVersionInt(\"1.6.0\"));\n        assertEquals(131, SystemUtils.toJavaVersionInt(\"JavaVM-1.3.1\"));\n        assertEquals(131, SystemUtils.toJavaVersionInt(\"1.3.1 subset\"));\n        // This used to return 0f in [lang] version 2.5:\n        assertEquals(130, SystemUtils.toJavaVersionInt(\"XXX-1.3.x\"));\n    }", "javadoc_start_line": 209, "annotations_start_line": 209, "method_start_line": 209, "end_line": 226}, {"file_path": "/src/main/java/org/apache/commons/lang3/SystemUtils.java", "method_name": "toJavaVersionInt", "content": "    /**\n     * <p>\n     * Converts the given Java version string to an <code>int</code>.\n     * </p>\n     * \n     * <p>\n     * Example return values:\n     * </p>\n     * <ul>\n     * <li><code>120</code> for Java 1.2</li>\n     * <li><code>131</code> for Java 1.3.1</li>\n     * <li><code>160</code> for Java 1.6.0_20</li>\n     * </ul>\n     * \n     * <p>\n     * Patch releases are not reported.\n     * </p>\n     * <p>\n     * This method is package private instead of private to support unit test invocation.\n     * </p>\n     * \n     * @return the version, for example 131 for Java 1.3.1\n     */\n    static float toJavaVersionInt(String version) {\n        return toVersionInt(toJavaVersionIntArray(version, JAVA_VERSION_TRIM_SIZE));\n    }", "javadoc_start_line": 1649, "annotations_start_line": 1672, "method_start_line": 1672, "end_line": 1674}]}], "project": {"name": "Lang", "version": 29}}