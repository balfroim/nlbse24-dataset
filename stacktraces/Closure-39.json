{"tours": [{"failing_test": {"className": " com.google.javascript.rhino.jstype.RecordTypeTest", "methodName": "testRecursiveRecord", "error": "junit.framework.ComparisonFailure", "message": "expected:<{loop: [?], number: number, st...> but was:<{loop: [{...}], number: number, st...>"}, "patched_method": {"file_path": "/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", "method_name": "toStringHelper", "content": "  String toStringHelper(boolean forAnnotations) {\n    if (hasReferenceName()) {\n      return getReferenceName();\n    } else if (prettyPrint) {\n      // Don't pretty print recursively.\n      prettyPrint = false;\n\n      // Use a tree set so that the properties are sorted.\n      Set<String> propertyNames = Sets.newTreeSet();\n      for (ObjectType current = this;\n           current != null && !current.isNativeObjectType() &&\n               propertyNames.size() <= MAX_PRETTY_PRINTED_PROPERTIES;\n           current = current.getImplicitPrototype()) {\n        propertyNames.addAll(current.getOwnPropertyNames());\n      }\n\n      StringBuilder sb = new StringBuilder();\n      sb.append(\"{\");\n\n      int i = 0;\n      for (String property : propertyNames) {\n        if (i > 0) {\n          sb.append(\", \");\n        }\n\n        sb.append(property);\n        sb.append(\": \");\n        sb.append(getPropertyType(property).toString());\n\n        ++i;\n        if (i == MAX_PRETTY_PRINTED_PROPERTIES) {\n          sb.append(\", ...\");\n          break;\n        }\n      }\n\n      sb.append(\"}\");\n\n      prettyPrint = true;\n      return sb.toString();\n    } else {\n      return \"{...}\";\n    }\n  }", "javadoc_start_line": 353, "annotations_start_line": 352, "method_start_line": 353, "end_line": 396}, "steps": [{"file_path": "/src/com/google/javascript/rhino/jstype/JSType.java", "method_name": "toAnnotationString", "content": "  /**\n   * A string representation of this type, suitable for printing\n   * in type annotations at code generation time.\n   */\n  public final String toAnnotationString() {\n    return toStringHelper(true);\n  }", "javadoc_start_line": 1160, "annotations_start_line": 1164, "method_start_line": 1164, "end_line": 1166}, {"file_path": "/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", "method_name": "toStringHelper", "content": "  String toStringHelper(boolean forAnnotations) {\n    if (hasReferenceName()) {\n      return getReferenceName();\n    } else if (prettyPrint) {\n      // Don't pretty print recursively.\n      prettyPrint = false;\n\n      // Use a tree set so that the properties are sorted.\n      Set<String> propertyNames = Sets.newTreeSet();\n      for (ObjectType current = this;\n           current != null && !current.isNativeObjectType() &&\n               propertyNames.size() <= MAX_PRETTY_PRINTED_PROPERTIES;\n           current = current.getImplicitPrototype()) {\n        propertyNames.addAll(current.getOwnPropertyNames());\n      }\n\n      StringBuilder sb = new StringBuilder();\n      sb.append(\"{\");\n\n      int i = 0;\n      for (String property : propertyNames) {\n        if (i > 0) {\n          sb.append(\", \");\n        }\n\n        sb.append(property);\n        sb.append(\": \");\n        sb.append(getPropertyType(property).toString());\n\n        ++i;\n        if (i == MAX_PRETTY_PRINTED_PROPERTIES) {\n          sb.append(\", ...\");\n          break;\n        }\n      }\n\n      sb.append(\"}\");\n\n      prettyPrint = true;\n      return sb.toString();\n    } else {\n      return \"{...}\";\n    }\n  }", "javadoc_start_line": 353, "annotations_start_line": 352, "method_start_line": 353, "end_line": 396}]}, {"failing_test": {"className": " com.google.javascript.rhino.jstype.RecordTypeTest", "methodName": "testLongToString", "error": "junit.framework.ComparisonFailure", "message": "expected:<...number, a4: number, [a5: number, a6: number]}> but was:<...number, a4: number, [...]}>"}, "patched_method": {"file_path": "/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", "method_name": "toStringHelper", "content": "  String toStringHelper(boolean forAnnotations) {\n    if (hasReferenceName()) {\n      return getReferenceName();\n    } else if (prettyPrint) {\n      // Don't pretty print recursively.\n      prettyPrint = false;\n\n      // Use a tree set so that the properties are sorted.\n      Set<String> propertyNames = Sets.newTreeSet();\n      for (ObjectType current = this;\n           current != null && !current.isNativeObjectType() &&\n               propertyNames.size() <= MAX_PRETTY_PRINTED_PROPERTIES;\n           current = current.getImplicitPrototype()) {\n        propertyNames.addAll(current.getOwnPropertyNames());\n      }\n\n      StringBuilder sb = new StringBuilder();\n      sb.append(\"{\");\n\n      int i = 0;\n      for (String property : propertyNames) {\n        if (i > 0) {\n          sb.append(\", \");\n        }\n\n        sb.append(property);\n        sb.append(\": \");\n        sb.append(getPropertyType(property).toString());\n\n        ++i;\n        if (i == MAX_PRETTY_PRINTED_PROPERTIES) {\n          sb.append(\", ...\");\n          break;\n        }\n      }\n\n      sb.append(\"}\");\n\n      prettyPrint = true;\n      return sb.toString();\n    } else {\n      return \"{...}\";\n    }\n  }", "javadoc_start_line": 353, "annotations_start_line": 352, "method_start_line": 353, "end_line": 396}, "steps": [{"file_path": "/src/com/google/javascript/rhino/jstype/JSType.java", "method_name": "toAnnotationString", "content": "  /**\n   * A string representation of this type, suitable for printing\n   * in type annotations at code generation time.\n   */\n  public final String toAnnotationString() {\n    return toStringHelper(true);\n  }", "javadoc_start_line": 1160, "annotations_start_line": 1164, "method_start_line": 1164, "end_line": 1166}, {"file_path": "/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", "method_name": "toStringHelper", "content": "  String toStringHelper(boolean forAnnotations) {\n    if (hasReferenceName()) {\n      return getReferenceName();\n    } else if (prettyPrint) {\n      // Don't pretty print recursively.\n      prettyPrint = false;\n\n      // Use a tree set so that the properties are sorted.\n      Set<String> propertyNames = Sets.newTreeSet();\n      for (ObjectType current = this;\n           current != null && !current.isNativeObjectType() &&\n               propertyNames.size() <= MAX_PRETTY_PRINTED_PROPERTIES;\n           current = current.getImplicitPrototype()) {\n        propertyNames.addAll(current.getOwnPropertyNames());\n      }\n\n      StringBuilder sb = new StringBuilder();\n      sb.append(\"{\");\n\n      int i = 0;\n      for (String property : propertyNames) {\n        if (i > 0) {\n          sb.append(\", \");\n        }\n\n        sb.append(property);\n        sb.append(\": \");\n        sb.append(getPropertyType(property).toString());\n\n        ++i;\n        if (i == MAX_PRETTY_PRINTED_PROPERTIES) {\n          sb.append(\", ...\");\n          break;\n        }\n      }\n\n      sb.append(\"}\");\n\n      prettyPrint = true;\n      return sb.toString();\n    } else {\n      return \"{...}\";\n    }\n  }", "javadoc_start_line": 353, "annotations_start_line": 352, "method_start_line": 353, "end_line": 396}]}], "project": {"name": "Closure", "version": 39}}