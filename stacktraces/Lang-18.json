{"tours": [{"failing_test": {"className": " org.apache.commons.lang3.time.FastDateFormatTest", "methodName": "testFormat", "error": "junit.framework.ComparisonFailure", "message": "expected:<AD AD AD AD 2003 [2003 03 20]03 January Jan 01 1 ...> but was:<AD AD AD AD 2003 [03 03 ]03 January Jan 01 1 ...>"}, "patched_method": {"file_path": "/src/main/java/org/apache/commons/lang3/time/FastDateFormat.java", "method_name": "parsePattern", "content": "    /**\n     * <p>Returns a list of Rules given a pattern.</p>\n     *\n     * @return a {@code List} of Rule objects\n     * @throws IllegalArgumentException if pattern is invalid\n     */\n    protected List<Rule> parsePattern() {\n        DateFormatSymbols symbols = new DateFormatSymbols(mLocale);\n        List<Rule> rules = new ArrayList<Rule>();\n\n        String[] ERAs = symbols.getEras();\n        String[] months = symbols.getMonths();\n        String[] shortMonths = symbols.getShortMonths();\n        String[] weekdays = symbols.getWeekdays();\n        String[] shortWeekdays = symbols.getShortWeekdays();\n        String[] AmPmStrings = symbols.getAmPmStrings();\n\n        int length = mPattern.length();\n        int[] indexRef = new int[1];\n\n        for (int i = 0; i < length; i++) {\n            indexRef[0] = i;\n            String token = parseToken(mPattern, indexRef);\n            i = indexRef[0];\n\n            int tokenLen = token.length();\n            if (tokenLen == 0) {\n                break;\n            }\n\n            Rule rule;\n            char c = token.charAt(0);\n\n            switch (c) {\n            case 'G': // era designator (text)\n                rule = new TextField(Calendar.ERA, ERAs);\n                break;\n            case 'y': // year (number)\n                if (tokenLen >= 4) {\n                    rule = selectNumberRule(Calendar.YEAR, tokenLen);\n                } else {\n                    rule = TwoDigitYearField.INSTANCE;\n                }\n                break;\n            case 'M': // month in year (text and number)\n                if (tokenLen >= 4) {\n                    rule = new TextField(Calendar.MONTH, months);\n                } else if (tokenLen == 3) {\n                    rule = new TextField(Calendar.MONTH, shortMonths);\n                } else if (tokenLen == 2) {\n                    rule = TwoDigitMonthField.INSTANCE;\n                } else {\n                    rule = UnpaddedMonthField.INSTANCE;\n                }\n                break;\n            case 'd': // day in month (number)\n                rule = selectNumberRule(Calendar.DAY_OF_MONTH, tokenLen);\n                break;\n            case 'h': // hour in am/pm (number, 1..12)\n                rule = new TwelveHourField(selectNumberRule(Calendar.HOUR, tokenLen));\n                break;\n            case 'H': // hour in day (number, 0..23)\n                rule = selectNumberRule(Calendar.HOUR_OF_DAY, tokenLen);\n                break;\n            case 'm': // minute in hour (number)\n                rule = selectNumberRule(Calendar.MINUTE, tokenLen);\n                break;\n            case 's': // second in minute (number)\n                rule = selectNumberRule(Calendar.SECOND, tokenLen);\n                break;\n            case 'S': // millisecond (number)\n                rule = selectNumberRule(Calendar.MILLISECOND, tokenLen);\n                break;\n            case 'E': // day in week (text)\n                rule = new TextField(Calendar.DAY_OF_WEEK, tokenLen < 4 ? shortWeekdays : weekdays);\n                break;\n            case 'D': // day in year (number)\n                rule = selectNumberRule(Calendar.DAY_OF_YEAR, tokenLen);\n                break;\n            case 'F': // day of week in month (number)\n                rule = selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH, tokenLen);\n                break;\n            case 'w': // week in year (number)\n                rule = selectNumberRule(Calendar.WEEK_OF_YEAR, tokenLen);\n                break;\n            case 'W': // week in month (number)\n                rule = selectNumberRule(Calendar.WEEK_OF_MONTH, tokenLen);\n                break;\n            case 'a': // am/pm marker (text)\n                rule = new TextField(Calendar.AM_PM, AmPmStrings);\n                break;\n            case 'k': // hour in day (1..24)\n                rule = new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY, tokenLen));\n                break;\n            case 'K': // hour in am/pm (0..11)\n                rule = selectNumberRule(Calendar.HOUR, tokenLen);\n                break;\n            case 'z': // time zone (text)\n                if (tokenLen >= 4) {\n                    rule = new TimeZoneNameRule(mTimeZone, mLocale, TimeZone.LONG);\n                } else {\n                    rule = new TimeZoneNameRule(mTimeZone, mLocale, TimeZone.SHORT);\n                }\n                break;\n            case 'Z': // time zone (value)\n                if (tokenLen == 1) {\n                    rule = TimeZoneNumberRule.INSTANCE_NO_COLON;\n                } else {\n                    rule = TimeZoneNumberRule.INSTANCE_COLON;\n                }\n                break;\n            case '\\'': // literal text\n                String sub = token.substring(1);\n                if (sub.length() == 1) {\n                    rule = new CharacterLiteral(sub.charAt(0));\n                } else {\n                    rule = new StringLiteral(sub);\n                }\n                break;\n            default:\n                throw new IllegalArgumentException(\"Illegal pattern component: \" + token);\n            }\n\n            rules.add(rule);\n        }\n\n        return rules;\n    }", "javadoc_start_line": 457, "annotations_start_line": 463, "method_start_line": 463, "end_line": 584}, "steps": [{"file_path": "/src/test/java/org/apache/commons/lang3/time/FastDateFormatTest.java", "method_name": "testFormat", "content": "    public void testFormat() {\n        Locale realDefaultLocale = Locale.getDefault();\n        TimeZone realDefaultZone = TimeZone.getDefault();\n        try {\n            Locale.setDefault(Locale.US);\n            TimeZone.setDefault(TimeZone.getTimeZone(\"America/New_York\"));\n\n            GregorianCalendar cal1 = new GregorianCalendar(2003, 0, 10, 15, 33, 20);\n            GregorianCalendar cal2 = new GregorianCalendar(2003, 6, 10, 9, 00, 00);\n            Date date1 = cal1.getTime();\n            Date date2 = cal2.getTime();\n            long millis1 = date1.getTime();\n            long millis2 = date2.getTime();\n\n            FastDateFormat fdf = FastDateFormat.getInstance(\"yyyy-MM-dd'T'HH:mm:ss\");\n            SimpleDateFormat sdf = new SimpleDateFormat(\"yyyy-MM-dd'T'HH:mm:ss\");\n            assertEquals(sdf.format(date1), fdf.format(date1));\n            assertEquals(\"2003-01-10T15:33:20\", fdf.format(date1));\n            assertEquals(\"2003-01-10T15:33:20\", fdf.format(cal1));\n            assertEquals(\"2003-01-10T15:33:20\", fdf.format(millis1));\n            assertEquals(\"2003-07-10T09:00:00\", fdf.format(date2));\n            assertEquals(\"2003-07-10T09:00:00\", fdf.format(cal2));\n            assertEquals(\"2003-07-10T09:00:00\", fdf.format(millis2));\n\n            fdf = FastDateFormat.getInstance(\"Z\");\n            assertEquals(\"-0500\", fdf.format(date1));\n            assertEquals(\"-0500\", fdf.format(cal1));\n            assertEquals(\"-0500\", fdf.format(millis1));\n\n            assertEquals(\"-0400\", fdf.format(date2));\n            assertEquals(\"-0400\", fdf.format(cal2));\n            assertEquals(\"-0400\", fdf.format(millis2));\n\n            fdf = FastDateFormat.getInstance(\"ZZ\");\n            assertEquals(\"-05:00\", fdf.format(date1));\n            assertEquals(\"-05:00\", fdf.format(cal1));\n            assertEquals(\"-05:00\", fdf.format(millis1));\n\n            assertEquals(\"-04:00\", fdf.format(date2));\n            assertEquals(\"-04:00\", fdf.format(cal2));\n            assertEquals(\"-04:00\", fdf.format(millis2));\n\n            String pattern = \"GGGG GGG GG G yyyy yyy yy y MMMM MMM MM M\" +\n                \" dddd ddd dd d DDDD DDD DD D EEEE EEE EE E aaaa aaa aa a zzzz zzz zz z\";\n            fdf = FastDateFormat.getInstance(pattern);\n            sdf = new SimpleDateFormat(pattern);\n            // SDF bug fix starting with Java 7\n            assertEquals(sdf.format(date1).replaceAll(\"2003 03 03 03\", \"2003 2003 03 2003\"), fdf.format(date1));\n            assertEquals(sdf.format(date2).replaceAll(\"2003 03 03 03\", \"2003 2003 03 2003\"), fdf.format(date2));\n        } finally {\n            Locale.setDefault(realDefaultLocale);\n            TimeZone.setDefault(realDefaultZone);\n        }\n    }", "javadoc_start_line": 173, "annotations_start_line": 173, "method_start_line": 173, "end_line": 226}, {"file_path": "/src/main/java/org/apache/commons/lang3/time/FastDateFormat.java", "method_name": "getInstance", "content": "    /**\n     * <p>Gets a formatter instance using the specified pattern in the\n     * default locale.</p>\n     *\n     * @param pattern  {@link java.text.SimpleDateFormat} compatible\n     *  pattern\n     * @return a pattern based date/time formatter\n     * @throws IllegalArgumentException if pattern is invalid\n     */\n    public static FastDateFormat getInstance(String pattern) {\n        return cache.getInstance(pattern, null, null);\n    }", "javadoc_start_line": 149, "annotations_start_line": 158, "method_start_line": 158, "end_line": 160}, {"file_path": "/src/main/java/org/apache/commons/lang3/time/FormatCache.java", "method_name": "getInstance", "content": "    /**\n     * <p>Gets a formatter instance using the specified pattern, time zone\n     * and locale.</p>\n     * \n     * @param pattern  {@link java.text.SimpleDateFormat} compatible\n     *  pattern\n     * @param timeZone  the non-null time zone\n     * @param locale  the non-null locale\n     * @return a pattern based date/time formatter\n     * @throws IllegalArgumentException if pattern is invalid\n     *  or <code>null</code>\n     */\n    public F getInstance(String pattern, TimeZone timeZone, Locale locale) {\n        if (pattern == null) {\n            throw new NullPointerException(\"pattern must not be null\");\n        }\n        if (timeZone == null) {\n            timeZone = TimeZone.getDefault();\n        }\n        if (locale == null) {\n            locale = Locale.getDefault();\n        }\n        MultipartKey key = new MultipartKey(pattern, timeZone, locale);\n        F format = cInstanceCache.get(key);\n        if (format == null) {           \n            format = createInstance(pattern, timeZone, locale);\n            F previousValue= cInstanceCache.putIfAbsent(key, format);\n            if (previousValue != null) {\n                // another thread snuck in and did the same work\n                // we should return the instance that is in ConcurrentMap\n                format= previousValue;              \n            }\n        }\n        return format;\n    }", "javadoc_start_line": 57, "annotations_start_line": 69, "method_start_line": 69, "end_line": 91}, {"file_path": "/src/main/java/org/apache/commons/lang3/time/FastDateFormat.java", "method_name": "FastDateFormat", "content": "    /**\n     * <p>Constructs a new FastDateFormat.</p>\n     *\n     * @param pattern  {@link java.text.SimpleDateFormat} compatible pattern\n     * @param timeZone  non-null time zone to use\n     * @param locale  non-null locale to use\n     * @throws NullPointerException if pattern, timeZone, or locale is null.\n     */\n    protected FastDateFormat(String pattern, TimeZone timeZone, Locale locale) {\n        mPattern = pattern;\n        mTimeZone = timeZone;\n        mLocale = locale;\n\n        init();\n    }", "javadoc_start_line": 424, "annotations_start_line": 432, "method_start_line": 432, "end_line": 438}, {"file_path": "/src/main/java/org/apache/commons/lang3/time/FastDateFormat.java", "method_name": "init", "content": "    /**\n     * <p>Initializes the instance for first use.</p>\n     */\n    private void init() {\n        List<Rule> rulesList = parsePattern();\n        mRules = rulesList.toArray(new Rule[rulesList.size()]);\n\n        int len = 0;\n        for (int i=mRules.length; --i >= 0; ) {\n            len += mRules[i].estimateLength();\n        }\n\n        mMaxLengthEstimate = len;\n    }", "javadoc_start_line": 440, "annotations_start_line": 443, "method_start_line": 443, "end_line": 453}, {"file_path": "/src/main/java/org/apache/commons/lang3/time/FastDateFormat.java", "method_name": "parsePattern", "content": "    /**\n     * <p>Returns a list of Rules given a pattern.</p>\n     *\n     * @return a {@code List} of Rule objects\n     * @throws IllegalArgumentException if pattern is invalid\n     */\n    protected List<Rule> parsePattern() {\n        DateFormatSymbols symbols = new DateFormatSymbols(mLocale);\n        List<Rule> rules = new ArrayList<Rule>();\n\n        String[] ERAs = symbols.getEras();\n        String[] months = symbols.getMonths();\n        String[] shortMonths = symbols.getShortMonths();\n        String[] weekdays = symbols.getWeekdays();\n        String[] shortWeekdays = symbols.getShortWeekdays();\n        String[] AmPmStrings = symbols.getAmPmStrings();\n\n        int length = mPattern.length();\n        int[] indexRef = new int[1];\n\n        for (int i = 0; i < length; i++) {\n            indexRef[0] = i;\n            String token = parseToken(mPattern, indexRef);\n            i = indexRef[0];\n\n            int tokenLen = token.length();\n            if (tokenLen == 0) {\n                break;\n            }\n\n            Rule rule;\n            char c = token.charAt(0);\n\n            switch (c) {\n            case 'G': // era designator (text)\n                rule = new TextField(Calendar.ERA, ERAs);\n                break;\n            case 'y': // year (number)\n                if (tokenLen >= 4) {\n                    rule = selectNumberRule(Calendar.YEAR, tokenLen);\n                } else {\n                    rule = TwoDigitYearField.INSTANCE;\n                }\n                break;\n            case 'M': // month in year (text and number)\n                if (tokenLen >= 4) {\n                    rule = new TextField(Calendar.MONTH, months);\n                } else if (tokenLen == 3) {\n                    rule = new TextField(Calendar.MONTH, shortMonths);\n                } else if (tokenLen == 2) {\n                    rule = TwoDigitMonthField.INSTANCE;\n                } else {\n                    rule = UnpaddedMonthField.INSTANCE;\n                }\n                break;\n            case 'd': // day in month (number)\n                rule = selectNumberRule(Calendar.DAY_OF_MONTH, tokenLen);\n                break;\n            case 'h': // hour in am/pm (number, 1..12)\n                rule = new TwelveHourField(selectNumberRule(Calendar.HOUR, tokenLen));\n                break;\n            case 'H': // hour in day (number, 0..23)\n                rule = selectNumberRule(Calendar.HOUR_OF_DAY, tokenLen);\n                break;\n            case 'm': // minute in hour (number)\n                rule = selectNumberRule(Calendar.MINUTE, tokenLen);\n                break;\n            case 's': // second in minute (number)\n                rule = selectNumberRule(Calendar.SECOND, tokenLen);\n                break;\n            case 'S': // millisecond (number)\n                rule = selectNumberRule(Calendar.MILLISECOND, tokenLen);\n                break;\n            case 'E': // day in week (text)\n                rule = new TextField(Calendar.DAY_OF_WEEK, tokenLen < 4 ? shortWeekdays : weekdays);\n                break;\n            case 'D': // day in year (number)\n                rule = selectNumberRule(Calendar.DAY_OF_YEAR, tokenLen);\n                break;\n            case 'F': // day of week in month (number)\n                rule = selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH, tokenLen);\n                break;\n            case 'w': // week in year (number)\n                rule = selectNumberRule(Calendar.WEEK_OF_YEAR, tokenLen);\n                break;\n            case 'W': // week in month (number)\n                rule = selectNumberRule(Calendar.WEEK_OF_MONTH, tokenLen);\n                break;\n            case 'a': // am/pm marker (text)\n                rule = new TextField(Calendar.AM_PM, AmPmStrings);\n                break;\n            case 'k': // hour in day (1..24)\n                rule = new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY, tokenLen));\n                break;\n            case 'K': // hour in am/pm (0..11)\n                rule = selectNumberRule(Calendar.HOUR, tokenLen);\n                break;\n            case 'z': // time zone (text)\n                if (tokenLen >= 4) {\n                    rule = new TimeZoneNameRule(mTimeZone, mLocale, TimeZone.LONG);\n                } else {\n                    rule = new TimeZoneNameRule(mTimeZone, mLocale, TimeZone.SHORT);\n                }\n                break;\n            case 'Z': // time zone (value)\n                if (tokenLen == 1) {\n                    rule = TimeZoneNumberRule.INSTANCE_NO_COLON;\n                } else {\n                    rule = TimeZoneNumberRule.INSTANCE_COLON;\n                }\n                break;\n            case '\\'': // literal text\n                String sub = token.substring(1);\n                if (sub.length() == 1) {\n                    rule = new CharacterLiteral(sub.charAt(0));\n                } else {\n                    rule = new StringLiteral(sub);\n                }\n                break;\n            default:\n                throw new IllegalArgumentException(\"Illegal pattern component: \" + token);\n            }\n\n            rules.add(rule);\n        }\n\n        return rules;\n    }", "javadoc_start_line": 457, "annotations_start_line": 463, "method_start_line": 463, "end_line": 584}]}], "project": {"name": "Lang", "version": 18}}