{"tours": [{"failing_test": {"className": " org.apache.commons.lang3.time.FastDateFormat_PrinterTest", "methodName": "testCalendarTimezoneRespected", "error": "junit.framework.AssertionFailedError", "message": "expected:<11:03PM [CL]T> but was:<11:03PM [PS]T>"}, "patched_method": {"file_path": "/src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java", "method_name": "appendTo", "content": "        /**\n         * {@inheritDoc}\n         */\n        @Override\n        public void appendTo(StringBuffer buffer, Calendar calendar) {\n            if (zone.useDaylightTime()\n                    && calendar.get(Calendar.DST_OFFSET) != 0) {\n                buffer.append(getTimeZoneDisplay(zone, true, mStyle, mLocale));\n            } else {\n                buffer.append(getTimeZoneDisplay(zone, false, mStyle, mLocale));\n            }\n        }", "javadoc_start_line": 1129, "annotations_start_line": 1132, "method_start_line": 1133, "end_line": 1140}, "steps": [{"file_path": "/src/test/java/org/apache/commons/lang3/time/FastDatePrinterTest.java", "method_name": "testCalendarTimezoneRespected", "content": "    public void testCalendarTimezoneRespected() {\n        String[] availableZones = TimeZone.getAvailableIDs();\n        TimeZone currentZone = TimeZone.getDefault();\n        \n        TimeZone anotherZone = null;\n        for (String zone : availableZones) {\n            if (!zone.equals(currentZone.getID())) {\n                anotherZone = TimeZone.getTimeZone(zone);\n            }\n        }\n        \n        assertNotNull(\"Cannot find another timezone\", anotherZone);\n        \n        final String pattern = \"h:mma z\";\n        final Calendar cal = Calendar.getInstance(anotherZone);\n        \n        SimpleDateFormat sdf = new SimpleDateFormat(pattern);\n        sdf.setTimeZone(anotherZone);\n        String expectedValue = sdf.format(cal.getTime());\n        String actualValue = FastDateFormat.getInstance(pattern).format(cal);\n        assertEquals(expectedValue, actualValue);\n    }", "javadoc_start_line": 266, "annotations_start_line": 265, "method_start_line": 266, "end_line": 287}, {"file_path": "/src/main/java/org/apache/commons/lang3/time/FastDateFormat.java", "method_name": "format", "content": "    /**\n     * <p>Formats a {@code Calendar} object.</p>\n     *\n     * @param calendar  the calendar to format\n     * @return the formatted string\n     */\n    @Override\n    public String format(Calendar calendar) {\n        return printer.format(calendar);\n    }", "javadoc_start_line": 412, "annotations_start_line": 418, "method_start_line": 419, "end_line": 421}, {"file_path": "/src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java", "method_name": "format", "content": "    public String format(Calendar calendar) {\n        return format(calendar, new StringBuffer(mMaxLengthEstimate)).toString();\n    }", "javadoc_start_line": 414, "annotations_start_line": 413, "method_start_line": 414, "end_line": 416}, {"file_path": "/src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java", "method_name": "format", "content": "    public StringBuffer format(Calendar calendar, StringBuffer buf) {\n        return applyRules(calendar, buf);\n    }", "javadoc_start_line": 440, "annotations_start_line": 439, "method_start_line": 440, "end_line": 442}, {"file_path": "/src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java", "method_name": "applyRules", "content": "    /**\n     * <p>Performs the formatting by applying the rules to the\n     * specified calendar.</p>\n     *\n     * @param calendar  the calendar to format\n     * @param buf  the buffer to format into\n     * @return the specified string buffer\n     */\n    protected StringBuffer applyRules(Calendar calendar, StringBuffer buf) {\n        for (Rule rule : mRules) {\n            rule.appendTo(buf, calendar);\n        }\n        return buf;\n    }", "javadoc_start_line": 444, "annotations_start_line": 452, "method_start_line": 452, "end_line": 457}]}, {"failing_test": {"className": " org.apache.commons.lang3.time.FastDateFormat_PrinterTest", "methodName": "testCalendarTimezoneRespected", "error": "junit.framework.AssertionFailedError", "message": "expected:<11:03PM [CL]T> but was:<11:03PM [PS]T>"}, "patched_method": {"file_path": "/src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java", "method_name": "TimeZoneNameRule", "content": "        /**\n         * Constructs an instance of {@code TimeZoneNameRule} with the specified properties.\n         *\n         * @param timeZone the time zone\n         * @param locale the locale\n         * @param style the style\n         */\n        TimeZoneNameRule(TimeZone timeZone, Locale locale, int style) {\n            mLocale = locale;\n            mStyle = style;\n            zone = timeZone;\n            \n            mStandard = getTimeZoneDisplay(timeZone, false, style, locale);\n            mDaylight = getTimeZoneDisplay(timeZone, true, style, locale);\n        }", "javadoc_start_line": 1102, "annotations_start_line": 1109, "method_start_line": 1109, "end_line": 1116}, "steps": [], "generation_failure": {"error": "Failed to generate stacktrace", "error_message": "[Errno 2] No such file or directory: './projects/Lang/8/results/stacktrace-testCalendarTimezoneRespected-TimeZoneNameRule.csv'"}}, {"failing_test": {"className": " org.apache.commons.lang3.time.FastDatePrinterTest", "methodName": "testCalendarTimezoneRespected", "error": "junit.framework.AssertionFailedError", "message": "expected:<11:03PM [CL]T> but was:<11:03PM [PS]T>"}, "patched_method": {"file_path": "/src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java", "method_name": "appendTo", "content": "        /**\n         * {@inheritDoc}\n         */\n        @Override\n        public void appendTo(StringBuffer buffer, Calendar calendar) {\n            if (zone.useDaylightTime()\n                    && calendar.get(Calendar.DST_OFFSET) != 0) {\n                buffer.append(getTimeZoneDisplay(zone, true, mStyle, mLocale));\n            } else {\n                buffer.append(getTimeZoneDisplay(zone, false, mStyle, mLocale));\n            }\n        }", "javadoc_start_line": 1129, "annotations_start_line": 1132, "method_start_line": 1133, "end_line": 1140}, "steps": [{"file_path": "/src/test/java/org/apache/commons/lang3/time/FastDatePrinterTest.java", "method_name": "testCalendarTimezoneRespected", "content": "    public void testCalendarTimezoneRespected() {\n        String[] availableZones = TimeZone.getAvailableIDs();\n        TimeZone currentZone = TimeZone.getDefault();\n        \n        TimeZone anotherZone = null;\n        for (String zone : availableZones) {\n            if (!zone.equals(currentZone.getID())) {\n                anotherZone = TimeZone.getTimeZone(zone);\n            }\n        }\n        \n        assertNotNull(\"Cannot find another timezone\", anotherZone);\n        \n        final String pattern = \"h:mma z\";\n        final Calendar cal = Calendar.getInstance(anotherZone);\n        \n        SimpleDateFormat sdf = new SimpleDateFormat(pattern);\n        sdf.setTimeZone(anotherZone);\n        String expectedValue = sdf.format(cal.getTime());\n        String actualValue = FastDateFormat.getInstance(pattern).format(cal);\n        assertEquals(expectedValue, actualValue);\n    }", "javadoc_start_line": 266, "annotations_start_line": 265, "method_start_line": 266, "end_line": 287}, {"file_path": "/src/main/java/org/apache/commons/lang3/time/FastDateFormat.java", "method_name": "format", "content": "    /**\n     * <p>Formats a {@code Calendar} object.</p>\n     *\n     * @param calendar  the calendar to format\n     * @return the formatted string\n     */\n    @Override\n    public String format(Calendar calendar) {\n        return printer.format(calendar);\n    }", "javadoc_start_line": 412, "annotations_start_line": 418, "method_start_line": 419, "end_line": 421}, {"file_path": "/src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java", "method_name": "format", "content": "    public String format(Calendar calendar) {\n        return format(calendar, new StringBuffer(mMaxLengthEstimate)).toString();\n    }", "javadoc_start_line": 414, "annotations_start_line": 413, "method_start_line": 414, "end_line": 416}, {"file_path": "/src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java", "method_name": "format", "content": "    public StringBuffer format(Calendar calendar, StringBuffer buf) {\n        return applyRules(calendar, buf);\n    }", "javadoc_start_line": 440, "annotations_start_line": 439, "method_start_line": 440, "end_line": 442}, {"file_path": "/src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java", "method_name": "applyRules", "content": "    /**\n     * <p>Performs the formatting by applying the rules to the\n     * specified calendar.</p>\n     *\n     * @param calendar  the calendar to format\n     * @param buf  the buffer to format into\n     * @return the specified string buffer\n     */\n    protected StringBuffer applyRules(Calendar calendar, StringBuffer buf) {\n        for (Rule rule : mRules) {\n            rule.appendTo(buf, calendar);\n        }\n        return buf;\n    }", "javadoc_start_line": 444, "annotations_start_line": 452, "method_start_line": 452, "end_line": 457}]}, {"failing_test": {"className": " org.apache.commons.lang3.time.FastDatePrinterTest", "methodName": "testCalendarTimezoneRespected", "error": "junit.framework.AssertionFailedError", "message": "expected:<11:03PM [CL]T> but was:<11:03PM [PS]T>"}, "patched_method": {"file_path": "/src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java", "method_name": "TimeZoneNameRule", "content": "        /**\n         * Constructs an instance of {@code TimeZoneNameRule} with the specified properties.\n         *\n         * @param timeZone the time zone\n         * @param locale the locale\n         * @param style the style\n         */\n        TimeZoneNameRule(TimeZone timeZone, Locale locale, int style) {\n            mLocale = locale;\n            mStyle = style;\n            zone = timeZone;\n            \n            mStandard = getTimeZoneDisplay(timeZone, false, style, locale);\n            mDaylight = getTimeZoneDisplay(timeZone, true, style, locale);\n        }", "javadoc_start_line": 1102, "annotations_start_line": 1109, "method_start_line": 1109, "end_line": 1116}, "steps": [], "generation_failure": {"error": "Failed to generate stacktrace", "error_message": "[Errno 2] No such file or directory: './projects/Lang/8/results/stacktrace-testCalendarTimezoneRespected-TimeZoneNameRule.csv'"}}], "project": {"name": "Lang", "version": 8}}