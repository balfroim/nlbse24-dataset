{"tours": [{"failing_test": {"className": " org.joda.time.TestMutableDateTime_Adds", "methodName": "testAddYears_int_dstOverlapWinter_addZero", "error": "junit.framework.ComparisonFailure", "message": "expected:<...10-30T02:30:00.000+0[1]:00> but was:<...10-30T02:30:00.000+0[2]:00>"}, "patched_method": {"file_path": "/src/main/java/org/joda/time/MutableDateTime.java", "method_name": "addMillis", "content": "    /**\n     * Add a number of milliseconds to the date. The implementation of this\n     * method differs from the {@link #add(long)} method in that a\n     * DateTimeField performs the addition.\n     *\n     * @param millis  the milliseconds to add\n     * @throws IllegalArgumentException if the value is invalid\n     */\n    public void addMillis(final int millis) {\n            setMillis(getChronology().millis().add(getMillis(), millis));\n    }", "javadoc_start_line": 871, "annotations_start_line": 879, "method_start_line": 879, "end_line": 881}, "steps": [], "generation_failure": {"error": "Failed to generate stacktrace", "error_message": "[Errno 2] No such file or directory: './projects/Time/3/results/stacktrace-testAddYears_int_dstOverlapWinter_addZero-addMillis.csv'"}}, {"failing_test": {"className": " org.joda.time.TestMutableDateTime_Adds", "methodName": "testAddYears_int_dstOverlapWinter_addZero", "error": "junit.framework.ComparisonFailure", "message": "expected:<...10-30T02:30:00.000+0[1]:00> but was:<...10-30T02:30:00.000+0[2]:00>"}, "patched_method": {"file_path": "/src/main/java/org/joda/time/MutableDateTime.java", "method_name": "addSeconds", "content": "    /**\n     * Add a number of seconds to the date.\n     *\n     * @param seconds  the seconds to add\n     * @throws IllegalArgumentException if the value is invalid\n     */\n    public void addSeconds(final int seconds) {\n            setMillis(getChronology().seconds().add(getMillis(), seconds));\n    }", "javadoc_start_line": 840, "annotations_start_line": 846, "method_start_line": 846, "end_line": 848}, "steps": [], "generation_failure": {"error": "Failed to generate stacktrace", "error_message": "[Errno 2] No such file or directory: './projects/Time/3/results/stacktrace-testAddYears_int_dstOverlapWinter_addZero-addSeconds.csv'"}}, {"failing_test": {"className": " org.joda.time.TestMutableDateTime_Adds", "methodName": "testAddYears_int_dstOverlapWinter_addZero", "error": "junit.framework.ComparisonFailure", "message": "expected:<...10-30T02:30:00.000+0[1]:00> but was:<...10-30T02:30:00.000+0[2]:00>"}, "patched_method": {"file_path": "/src/main/java/org/joda/time/MutableDateTime.java", "method_name": "addMinutes", "content": "    /**\n     * Add a number of minutes to the date.\n     *\n     * @param minutes  the minutes to add\n     * @throws IllegalArgumentException if the value is invalid\n     */\n    public void addMinutes(final int minutes) {\n            setMillis(getChronology().minutes().add(getMillis(), minutes));\n    }", "javadoc_start_line": 809, "annotations_start_line": 815, "method_start_line": 815, "end_line": 817}, "steps": [], "generation_failure": {"error": "Failed to generate stacktrace", "error_message": "[Errno 2] No such file or directory: './projects/Time/3/results/stacktrace-testAddYears_int_dstOverlapWinter_addZero-addMinutes.csv'"}}, {"failing_test": {"className": " org.joda.time.TestMutableDateTime_Adds", "methodName": "testAddYears_int_dstOverlapWinter_addZero", "error": "junit.framework.ComparisonFailure", "message": "expected:<...10-30T02:30:00.000+0[1]:00> but was:<...10-30T02:30:00.000+0[2]:00>"}, "patched_method": {"file_path": "/src/main/java/org/joda/time/MutableDateTime.java", "method_name": "addHours", "content": "    /**\n     * Add a number of hours to the date.\n     *\n     * @param hours  the hours to add\n     * @throws IllegalArgumentException if the value is invalid\n     */\n    public void addHours(final int hours) {\n            setMillis(getChronology().hours().add(getMillis(), hours));\n    }", "javadoc_start_line": 778, "annotations_start_line": 784, "method_start_line": 784, "end_line": 786}, "steps": [], "generation_failure": {"error": "Failed to generate stacktrace", "error_message": "[Errno 2] No such file or directory: './projects/Time/3/results/stacktrace-testAddYears_int_dstOverlapWinter_addZero-addHours.csv'"}}, {"failing_test": {"className": " org.joda.time.TestMutableDateTime_Adds", "methodName": "testAddYears_int_dstOverlapWinter_addZero", "error": "junit.framework.ComparisonFailure", "message": "expected:<...10-30T02:30:00.000+0[1]:00> but was:<...10-30T02:30:00.000+0[2]:00>"}, "patched_method": {"file_path": "/src/main/java/org/joda/time/MutableDateTime.java", "method_name": "addDays", "content": "    /**\n     * Add a number of days to the date.\n     *\n     * @param days  the days to add\n     * @throws IllegalArgumentException if the value is invalid\n     */\n    public void addDays(final int days) {\n            setMillis(getChronology().days().add(getMillis(), days));\n    }", "javadoc_start_line": 757, "annotations_start_line": 763, "method_start_line": 763, "end_line": 765}, "steps": [], "generation_failure": {"error": "Failed to generate stacktrace", "error_message": "[Errno 2] No such file or directory: './projects/Time/3/results/stacktrace-testAddYears_int_dstOverlapWinter_addZero-addDays.csv'"}}, {"failing_test": {"className": " org.joda.time.TestMutableDateTime_Adds", "methodName": "testAddYears_int_dstOverlapWinter_addZero", "error": "junit.framework.ComparisonFailure", "message": "expected:<...10-30T02:30:00.000+0[1]:00> but was:<...10-30T02:30:00.000+0[2]:00>"}, "patched_method": {"file_path": "/src/main/java/org/joda/time/MutableDateTime.java", "method_name": "addWeeks", "content": "    /**\n     * Add a number of weeks to the date.\n     *\n     * @param weeks  the weeks to add\n     * @throws IllegalArgumentException if the value is invalid\n     */\n    public void addWeeks(final int weeks) {\n            setMillis(getChronology().weeks().add(getMillis(), weeks));\n    }", "javadoc_start_line": 716, "annotations_start_line": 722, "method_start_line": 722, "end_line": 724}, "steps": [], "generation_failure": {"error": "Failed to generate stacktrace", "error_message": "[Errno 2] No such file or directory: './projects/Time/3/results/stacktrace-testAddYears_int_dstOverlapWinter_addZero-addWeeks.csv'"}}, {"failing_test": {"className": " org.joda.time.TestMutableDateTime_Adds", "methodName": "testAddYears_int_dstOverlapWinter_addZero", "error": "junit.framework.ComparisonFailure", "message": "expected:<...10-30T02:30:00.000+0[1]:00> but was:<...10-30T02:30:00.000+0[2]:00>"}, "patched_method": {"file_path": "/src/main/java/org/joda/time/MutableDateTime.java", "method_name": "addMonths", "content": "    /**\n     * Add a number of months to the date.\n     *\n     * @param months  the months to add\n     * @throws IllegalArgumentException if the value is invalid\n     */\n    public void addMonths(final int months) {\n            setMillis(getChronology().months().add(getMillis(), months));\n    }", "javadoc_start_line": 695, "annotations_start_line": 701, "method_start_line": 701, "end_line": 703}, "steps": [], "generation_failure": {"error": "Failed to generate stacktrace", "error_message": "[Errno 2] No such file or directory: './projects/Time/3/results/stacktrace-testAddYears_int_dstOverlapWinter_addZero-addMonths.csv'"}}, {"failing_test": {"className": " org.joda.time.TestMutableDateTime_Adds", "methodName": "testAddYears_int_dstOverlapWinter_addZero", "error": "junit.framework.ComparisonFailure", "message": "expected:<...10-30T02:30:00.000+0[1]:00> but was:<...10-30T02:30:00.000+0[2]:00>"}, "patched_method": {"file_path": "/src/main/java/org/joda/time/MutableDateTime.java", "method_name": "addWeekyears", "content": "    /**\n     * Add a number of weekyears to the date.\n     *\n     * @param weekyears  the weekyears to add\n     * @throws IllegalArgumentException if the value is invalid\n     */\n    public void addWeekyears(final int weekyears) {\n            setMillis(getChronology().weekyears().add(getMillis(), weekyears));\n    }", "javadoc_start_line": 674, "annotations_start_line": 680, "method_start_line": 680, "end_line": 682}, "steps": [], "generation_failure": {"error": "Failed to generate stacktrace", "error_message": "[Errno 2] No such file or directory: './projects/Time/3/results/stacktrace-testAddYears_int_dstOverlapWinter_addZero-addWeekyears.csv'"}}, {"failing_test": {"className": " org.joda.time.TestMutableDateTime_Adds", "methodName": "testAddYears_int_dstOverlapWinter_addZero", "error": "junit.framework.ComparisonFailure", "message": "expected:<...10-30T02:30:00.000+0[1]:00> but was:<...10-30T02:30:00.000+0[2]:00>"}, "patched_method": {"file_path": "/src/main/java/org/joda/time/MutableDateTime.java", "method_name": "addYears", "content": "    /**\n     * Add a number of years to the date.\n     *\n     * @param years  the years to add\n     * @throws IllegalArgumentException if the value is invalid\n     */\n    public void addYears(final int years) {\n            setMillis(getChronology().years().add(getMillis(), years));\n    }", "javadoc_start_line": 653, "annotations_start_line": 659, "method_start_line": 659, "end_line": 661}, "steps": [], "generation_failure": {"error": "Failed to generate stacktrace", "error_message": "[Errno 2] No such file or directory: './projects/Time/3/results/stacktrace-testAddYears_int_dstOverlapWinter_addZero-addYears.csv'"}}, {"failing_test": {"className": " org.joda.time.TestMutableDateTime_Adds", "methodName": "testAddYears_int_dstOverlapWinter_addZero", "error": "junit.framework.ComparisonFailure", "message": "expected:<...10-30T02:30:00.000+0[1]:00> but was:<...10-30T02:30:00.000+0[2]:00>"}, "patched_method": {"file_path": "/src/main/java/org/joda/time/MutableDateTime.java", "method_name": "add", "content": "    /**\n     * Adds to the instant specifying the duration and multiple to add.\n     *\n     * @param type  a field type, usually obtained from DateTimeFieldType, not null\n     * @param amount  the amount to add of this duration\n     * @throws IllegalArgumentException if the value is null or invalid\n     * @throws ArithmeticException if the result exceeds the capacity of the instant\n     */\n    public void add(DurationFieldType type, int amount) {\n        if (type == null) {\n            throw new IllegalArgumentException(\"Field must not be null\");\n        }\n            setMillis(type.getField(getChronology()).add(getMillis(), amount));\n    }", "javadoc_start_line": 627, "annotations_start_line": 635, "method_start_line": 635, "end_line": 640}, "steps": [], "generation_failure": {"error": "Failed to generate stacktrace", "error_message": "[Errno 2] No such file or directory: './projects/Time/3/results/stacktrace-testAddYears_int_dstOverlapWinter_addZero-add.csv'"}}, {"failing_test": {"className": " org.joda.time.TestMutableDateTime_Adds", "methodName": "testAddDays_int_dstOverlapWinter_addZero", "error": "junit.framework.ComparisonFailure", "message": "expected:<...10-30T02:30:00.000+0[1]:00> but was:<...10-30T02:30:00.000+0[2]:00>"}, "patched_method": {"file_path": "/src/main/java/org/joda/time/MutableDateTime.java", "method_name": "addMillis", "content": "    /**\n     * Add a number of milliseconds to the date. The implementation of this\n     * method differs from the {@link #add(long)} method in that a\n     * DateTimeField performs the addition.\n     *\n     * @param millis  the milliseconds to add\n     * @throws IllegalArgumentException if the value is invalid\n     */\n    public void addMillis(final int millis) {\n            setMillis(getChronology().millis().add(getMillis(), millis));\n    }", "javadoc_start_line": 871, "annotations_start_line": 879, "method_start_line": 879, "end_line": 881}, "steps": [], "generation_failure": {"error": "Failed to generate stacktrace", "error_message": "[Errno 2] No such file or directory: './projects/Time/3/results/stacktrace-testAddDays_int_dstOverlapWinter_addZero-addMillis.csv'"}}, {"failing_test": {"className": " org.joda.time.TestMutableDateTime_Adds", "methodName": "testAddDays_int_dstOverlapWinter_addZero", "error": "junit.framework.ComparisonFailure", "message": "expected:<...10-30T02:30:00.000+0[1]:00> but was:<...10-30T02:30:00.000+0[2]:00>"}, "patched_method": {"file_path": "/src/main/java/org/joda/time/MutableDateTime.java", "method_name": "addSeconds", "content": "    /**\n     * Add a number of seconds to the date.\n     *\n     * @param seconds  the seconds to add\n     * @throws IllegalArgumentException if the value is invalid\n     */\n    public void addSeconds(final int seconds) {\n            setMillis(getChronology().seconds().add(getMillis(), seconds));\n    }", "javadoc_start_line": 840, "annotations_start_line": 846, "method_start_line": 846, "end_line": 848}, "steps": [], "generation_failure": {"error": "Failed to generate stacktrace", "error_message": "[Errno 2] No such file or directory: './projects/Time/3/results/stacktrace-testAddDays_int_dstOverlapWinter_addZero-addSeconds.csv'"}}, {"failing_test": {"className": " org.joda.time.TestMutableDateTime_Adds", "methodName": "testAddDays_int_dstOverlapWinter_addZero", "error": "junit.framework.ComparisonFailure", "message": "expected:<...10-30T02:30:00.000+0[1]:00> but was:<...10-30T02:30:00.000+0[2]:00>"}, "patched_method": {"file_path": "/src/main/java/org/joda/time/MutableDateTime.java", "method_name": "addMinutes", "content": "    /**\n     * Add a number of minutes to the date.\n     *\n     * @param minutes  the minutes to add\n     * @throws IllegalArgumentException if the value is invalid\n     */\n    public void addMinutes(final int minutes) {\n            setMillis(getChronology().minutes().add(getMillis(), minutes));\n    }", "javadoc_start_line": 809, "annotations_start_line": 815, "method_start_line": 815, "end_line": 817}, "steps": [], "generation_failure": {"error": "Failed to generate stacktrace", "error_message": "[Errno 2] No such file or directory: './projects/Time/3/results/stacktrace-testAddDays_int_dstOverlapWinter_addZero-addMinutes.csv'"}}, {"failing_test": {"className": " org.joda.time.TestMutableDateTime_Adds", "methodName": "testAddDays_int_dstOverlapWinter_addZero", "error": "junit.framework.ComparisonFailure", "message": "expected:<...10-30T02:30:00.000+0[1]:00> but was:<...10-30T02:30:00.000+0[2]:00>"}, "patched_method": {"file_path": "/src/main/java/org/joda/time/MutableDateTime.java", "method_name": "addHours", "content": "    /**\n     * Add a number of hours to the date.\n     *\n     * @param hours  the hours to add\n     * @throws IllegalArgumentException if the value is invalid\n     */\n    public void addHours(final int hours) {\n            setMillis(getChronology().hours().add(getMillis(), hours));\n    }", "javadoc_start_line": 778, "annotations_start_line": 784, "method_start_line": 784, "end_line": 786}, "steps": [], "generation_failure": {"error": "Failed to generate stacktrace", "error_message": "[Errno 2] No such file or directory: './projects/Time/3/results/stacktrace-testAddDays_int_dstOverlapWinter_addZero-addHours.csv'"}}, {"failing_test": {"className": " org.joda.time.TestMutableDateTime_Adds", "methodName": "testAddDays_int_dstOverlapWinter_addZero", "error": "junit.framework.ComparisonFailure", "message": "expected:<...10-30T02:30:00.000+0[1]:00> but was:<...10-30T02:30:00.000+0[2]:00>"}, "patched_method": {"file_path": "/src/main/java/org/joda/time/MutableDateTime.java", "method_name": "addDays", "content": "    /**\n     * Add a number of days to the date.\n     *\n     * @param days  the days to add\n     * @throws IllegalArgumentException if the value is invalid\n     */\n    public void addDays(final int days) {\n            setMillis(getChronology().days().add(getMillis(), days));\n    }", "javadoc_start_line": 757, "annotations_start_line": 763, "method_start_line": 763, "end_line": 765}, "steps": [], "generation_failure": {"error": "Failed to generate stacktrace", "error_message": "[Errno 2] No such file or directory: './projects/Time/3/results/stacktrace-testAddDays_int_dstOverlapWinter_addZero-addDays.csv'"}}, {"failing_test": {"className": " org.joda.time.TestMutableDateTime_Adds", "methodName": "testAddDays_int_dstOverlapWinter_addZero", "error": "junit.framework.ComparisonFailure", "message": "expected:<...10-30T02:30:00.000+0[1]:00> but was:<...10-30T02:30:00.000+0[2]:00>"}, "patched_method": {"file_path": "/src/main/java/org/joda/time/MutableDateTime.java", "method_name": "addWeeks", "content": "    /**\n     * Add a number of weeks to the date.\n     *\n     * @param weeks  the weeks to add\n     * @throws IllegalArgumentException if the value is invalid\n     */\n    public void addWeeks(final int weeks) {\n            setMillis(getChronology().weeks().add(getMillis(), weeks));\n    }", "javadoc_start_line": 716, "annotations_start_line": 722, "method_start_line": 722, "end_line": 724}, "steps": [], "generation_failure": {"error": "Failed to generate stacktrace", "error_message": "[Errno 2] No such file or directory: './projects/Time/3/results/stacktrace-testAddDays_int_dstOverlapWinter_addZero-addWeeks.csv'"}}, {"failing_test": {"className": " org.joda.time.TestMutableDateTime_Adds", "methodName": "testAddDays_int_dstOverlapWinter_addZero", "error": "junit.framework.ComparisonFailure", "message": "expected:<...10-30T02:30:00.000+0[1]:00> but was:<...10-30T02:30:00.000+0[2]:00>"}, "patched_method": {"file_path": "/src/main/java/org/joda/time/MutableDateTime.java", "method_name": "addMonths", "content": "    /**\n     * Add a number of months to the date.\n     *\n     * @param months  the months to add\n     * @throws IllegalArgumentException if the value is invalid\n     */\n    public void addMonths(final int months) {\n            setMillis(getChronology().months().add(getMillis(), months));\n    }", "javadoc_start_line": 695, "annotations_start_line": 701, "method_start_line": 701, "end_line": 703}, "steps": [], "generation_failure": {"error": "Failed to generate stacktrace", "error_message": "[Errno 2] No such file or directory: './projects/Time/3/results/stacktrace-testAddDays_int_dstOverlapWinter_addZero-addMonths.csv'"}}, {"failing_test": {"className": " org.joda.time.TestMutableDateTime_Adds", "methodName": "testAddDays_int_dstOverlapWinter_addZero", "error": "junit.framework.ComparisonFailure", "message": "expected:<...10-30T02:30:00.000+0[1]:00> but was:<...10-30T02:30:00.000+0[2]:00>"}, "patched_method": {"file_path": "/src/main/java/org/joda/time/MutableDateTime.java", "method_name": "addWeekyears", "content": "    /**\n     * Add a number of weekyears to the date.\n     *\n     * @param weekyears  the weekyears to add\n     * @throws IllegalArgumentException if the value is invalid\n     */\n    public void addWeekyears(final int weekyears) {\n            setMillis(getChronology().weekyears().add(getMillis(), weekyears));\n    }", "javadoc_start_line": 674, "annotations_start_line": 680, "method_start_line": 680, "end_line": 682}, "steps": [], "generation_failure": {"error": "Failed to generate stacktrace", "error_message": "[Errno 2] No such file or directory: './projects/Time/3/results/stacktrace-testAddDays_int_dstOverlapWinter_addZero-addWeekyears.csv'"}}, {"failing_test": {"className": " org.joda.time.TestMutableDateTime_Adds", "methodName": "testAddDays_int_dstOverlapWinter_addZero", "error": "junit.framework.ComparisonFailure", "message": "expected:<...10-30T02:30:00.000+0[1]:00> but was:<...10-30T02:30:00.000+0[2]:00>"}, "patched_method": {"file_path": "/src/main/java/org/joda/time/MutableDateTime.java", "method_name": "addYears", "content": "    /**\n     * Add a number of years to the date.\n     *\n     * @param years  the years to add\n     * @throws IllegalArgumentException if the value is invalid\n     */\n    public void addYears(final int years) {\n            setMillis(getChronology().years().add(getMillis(), years));\n    }", "javadoc_start_line": 653, "annotations_start_line": 659, "method_start_line": 659, "end_line": 661}, "steps": [], "generation_failure": {"error": "Failed to generate stacktrace", "error_message": "[Errno 2] No such file or directory: './projects/Time/3/results/stacktrace-testAddDays_int_dstOverlapWinter_addZero-addYears.csv'"}}, {"failing_test": {"className": " org.joda.time.TestMutableDateTime_Adds", "methodName": "testAddDays_int_dstOverlapWinter_addZero", "error": "junit.framework.ComparisonFailure", "message": "expected:<...10-30T02:30:00.000+0[1]:00> but was:<...10-30T02:30:00.000+0[2]:00>"}, "patched_method": {"file_path": "/src/main/java/org/joda/time/MutableDateTime.java", "method_name": "add", "content": "    /**\n     * Adds to the instant specifying the duration and multiple to add.\n     *\n     * @param type  a field type, usually obtained from DateTimeFieldType, not null\n     * @param amount  the amount to add of this duration\n     * @throws IllegalArgumentException if the value is null or invalid\n     * @throws ArithmeticException if the result exceeds the capacity of the instant\n     */\n    public void add(DurationFieldType type, int amount) {\n        if (type == null) {\n            throw new IllegalArgumentException(\"Field must not be null\");\n        }\n            setMillis(type.getField(getChronology()).add(getMillis(), amount));\n    }", "javadoc_start_line": 627, "annotations_start_line": 635, "method_start_line": 635, "end_line": 640}, "steps": [], "generation_failure": {"error": "Failed to generate stacktrace", "error_message": "[Errno 2] No such file or directory: './projects/Time/3/results/stacktrace-testAddDays_int_dstOverlapWinter_addZero-add.csv'"}}, {"failing_test": {"className": " org.joda.time.TestMutableDateTime_Adds", "methodName": "testAddWeeks_int_dstOverlapWinter_addZero", "error": "junit.framework.ComparisonFailure", "message": "expected:<...10-30T02:30:00.000+0[1]:00> but was:<...10-30T02:30:00.000+0[2]:00>"}, "patched_method": {"file_path": "/src/main/java/org/joda/time/MutableDateTime.java", "method_name": "addMillis", "content": "    /**\n     * Add a number of milliseconds to the date. The implementation of this\n     * method differs from the {@link #add(long)} method in that a\n     * DateTimeField performs the addition.\n     *\n     * @param millis  the milliseconds to add\n     * @throws IllegalArgumentException if the value is invalid\n     */\n    public void addMillis(final int millis) {\n            setMillis(getChronology().millis().add(getMillis(), millis));\n    }", "javadoc_start_line": 871, "annotations_start_line": 879, "method_start_line": 879, "end_line": 881}, "steps": [], "generation_failure": {"error": "Failed to generate stacktrace", "error_message": "[Errno 2] No such file or directory: './projects/Time/3/results/stacktrace-testAddWeeks_int_dstOverlapWinter_addZero-addMillis.csv'"}}, {"failing_test": {"className": " org.joda.time.TestMutableDateTime_Adds", "methodName": "testAddWeeks_int_dstOverlapWinter_addZero", "error": "junit.framework.ComparisonFailure", "message": "expected:<...10-30T02:30:00.000+0[1]:00> but was:<...10-30T02:30:00.000+0[2]:00>"}, "patched_method": {"file_path": "/src/main/java/org/joda/time/MutableDateTime.java", "method_name": "addSeconds", "content": "    /**\n     * Add a number of seconds to the date.\n     *\n     * @param seconds  the seconds to add\n     * @throws IllegalArgumentException if the value is invalid\n     */\n    public void addSeconds(final int seconds) {\n            setMillis(getChronology().seconds().add(getMillis(), seconds));\n    }", "javadoc_start_line": 840, "annotations_start_line": 846, "method_start_line": 846, "end_line": 848}, "steps": [], "generation_failure": {"error": "Failed to generate stacktrace", "error_message": "[Errno 2] No such file or directory: './projects/Time/3/results/stacktrace-testAddWeeks_int_dstOverlapWinter_addZero-addSeconds.csv'"}}, {"failing_test": {"className": " org.joda.time.TestMutableDateTime_Adds", "methodName": "testAddWeeks_int_dstOverlapWinter_addZero", "error": "junit.framework.ComparisonFailure", "message": "expected:<...10-30T02:30:00.000+0[1]:00> but was:<...10-30T02:30:00.000+0[2]:00>"}, "patched_method": {"file_path": "/src/main/java/org/joda/time/MutableDateTime.java", "method_name": "addMinutes", "content": "    /**\n     * Add a number of minutes to the date.\n     *\n     * @param minutes  the minutes to add\n     * @throws IllegalArgumentException if the value is invalid\n     */\n    public void addMinutes(final int minutes) {\n            setMillis(getChronology().minutes().add(getMillis(), minutes));\n    }", "javadoc_start_line": 809, "annotations_start_line": 815, "method_start_line": 815, "end_line": 817}, "steps": [], "generation_failure": {"error": "Failed to generate stacktrace", "error_message": "[Errno 2] No such file or directory: './projects/Time/3/results/stacktrace-testAddWeeks_int_dstOverlapWinter_addZero-addMinutes.csv'"}}, {"failing_test": {"className": " org.joda.time.TestMutableDateTime_Adds", "methodName": "testAddWeeks_int_dstOverlapWinter_addZero", "error": "junit.framework.ComparisonFailure", "message": "expected:<...10-30T02:30:00.000+0[1]:00> but was:<...10-30T02:30:00.000+0[2]:00>"}, "patched_method": {"file_path": "/src/main/java/org/joda/time/MutableDateTime.java", "method_name": "addHours", "content": "    /**\n     * Add a number of hours to the date.\n     *\n     * @param hours  the hours to add\n     * @throws IllegalArgumentException if the value is invalid\n     */\n    public void addHours(final int hours) {\n            setMillis(getChronology().hours().add(getMillis(), hours));\n    }", "javadoc_start_line": 778, "annotations_start_line": 784, "method_start_line": 784, "end_line": 786}, "steps": [], "generation_failure": {"error": "Failed to generate stacktrace", "error_message": "[Errno 2] No such file or directory: './projects/Time/3/results/stacktrace-testAddWeeks_int_dstOverlapWinter_addZero-addHours.csv'"}}, {"failing_test": {"className": " org.joda.time.TestMutableDateTime_Adds", "methodName": "testAddWeeks_int_dstOverlapWinter_addZero", "error": "junit.framework.ComparisonFailure", "message": "expected:<...10-30T02:30:00.000+0[1]:00> but was:<...10-30T02:30:00.000+0[2]:00>"}, "patched_method": {"file_path": "/src/main/java/org/joda/time/MutableDateTime.java", "method_name": "addDays", "content": "    /**\n     * Add a number of days to the date.\n     *\n     * @param days  the days to add\n     * @throws IllegalArgumentException if the value is invalid\n     */\n    public void addDays(final int days) {\n            setMillis(getChronology().days().add(getMillis(), days));\n    }", "javadoc_start_line": 757, "annotations_start_line": 763, "method_start_line": 763, "end_line": 765}, "steps": [], "generation_failure": {"error": "Failed to generate stacktrace", "error_message": "[Errno 2] No such file or directory: './projects/Time/3/results/stacktrace-testAddWeeks_int_dstOverlapWinter_addZero-addDays.csv'"}}, {"failing_test": {"className": " org.joda.time.TestMutableDateTime_Adds", "methodName": "testAddWeeks_int_dstOverlapWinter_addZero", "error": "junit.framework.ComparisonFailure", "message": "expected:<...10-30T02:30:00.000+0[1]:00> but was:<...10-30T02:30:00.000+0[2]:00>"}, "patched_method": {"file_path": "/src/main/java/org/joda/time/MutableDateTime.java", "method_name": "addWeeks", "content": "    /**\n     * Add a number of weeks to the date.\n     *\n     * @param weeks  the weeks to add\n     * @throws IllegalArgumentException if the value is invalid\n     */\n    public void addWeeks(final int weeks) {\n            setMillis(getChronology().weeks().add(getMillis(), weeks));\n    }", "javadoc_start_line": 716, "annotations_start_line": 722, "method_start_line": 722, "end_line": 724}, "steps": [], "generation_failure": {"error": "Failed to generate stacktrace", "error_message": "[Errno 2] No such file or directory: './projects/Time/3/results/stacktrace-testAddWeeks_int_dstOverlapWinter_addZero-addWeeks.csv'"}}, {"failing_test": {"className": " org.joda.time.TestMutableDateTime_Adds", "methodName": "testAddWeeks_int_dstOverlapWinter_addZero", "error": "junit.framework.ComparisonFailure", "message": "expected:<...10-30T02:30:00.000+0[1]:00> but was:<...10-30T02:30:00.000+0[2]:00>"}, "patched_method": {"file_path": "/src/main/java/org/joda/time/MutableDateTime.java", "method_name": "addMonths", "content": "    /**\n     * Add a number of months to the date.\n     *\n     * @param months  the months to add\n     * @throws IllegalArgumentException if the value is invalid\n     */\n    public void addMonths(final int months) {\n            setMillis(getChronology().months().add(getMillis(), months));\n    }", "javadoc_start_line": 695, "annotations_start_line": 701, "method_start_line": 701, "end_line": 703}, "steps": [], "generation_failure": {"error": "Failed to generate stacktrace", "error_message": "[Errno 2] No such file or directory: './projects/Time/3/results/stacktrace-testAddWeeks_int_dstOverlapWinter_addZero-addMonths.csv'"}}, {"failing_test": {"className": " org.joda.time.TestMutableDateTime_Adds", "methodName": "testAddWeeks_int_dstOverlapWinter_addZero", "error": "junit.framework.ComparisonFailure", "message": "expected:<...10-30T02:30:00.000+0[1]:00> but was:<...10-30T02:30:00.000+0[2]:00>"}, "patched_method": {"file_path": "/src/main/java/org/joda/time/MutableDateTime.java", "method_name": "addWeekyears", "content": "    /**\n     * Add a number of weekyears to the date.\n     *\n     * @param weekyears  the weekyears to add\n     * @throws IllegalArgumentException if the value is invalid\n     */\n    public void addWeekyears(final int weekyears) {\n            setMillis(getChronology().weekyears().add(getMillis(), weekyears));\n    }", "javadoc_start_line": 674, "annotations_start_line": 680, "method_start_line": 680, "end_line": 682}, "steps": [], "generation_failure": {"error": "Failed to generate stacktrace", "error_message": "[Errno 2] No such file or directory: './projects/Time/3/results/stacktrace-testAddWeeks_int_dstOverlapWinter_addZero-addWeekyears.csv'"}}, {"failing_test": {"className": " org.joda.time.TestMutableDateTime_Adds", "methodName": "testAddWeeks_int_dstOverlapWinter_addZero", "error": "junit.framework.ComparisonFailure", "message": "expected:<...10-30T02:30:00.000+0[1]:00> but was:<...10-30T02:30:00.000+0[2]:00>"}, "patched_method": {"file_path": "/src/main/java/org/joda/time/MutableDateTime.java", "method_name": "addYears", "content": "    /**\n     * Add a number of years to the date.\n     *\n     * @param years  the years to add\n     * @throws IllegalArgumentException if the value is invalid\n     */\n    public void addYears(final int years) {\n            setMillis(getChronology().years().add(getMillis(), years));\n    }", "javadoc_start_line": 653, "annotations_start_line": 659, "method_start_line": 659, "end_line": 661}, "steps": [], "generation_failure": {"error": "Failed to generate stacktrace", "error_message": "[Errno 2] No such file or directory: './projects/Time/3/results/stacktrace-testAddWeeks_int_dstOverlapWinter_addZero-addYears.csv'"}}, {"failing_test": {"className": " org.joda.time.TestMutableDateTime_Adds", "methodName": "testAddWeeks_int_dstOverlapWinter_addZero", "error": "junit.framework.ComparisonFailure", "message": "expected:<...10-30T02:30:00.000+0[1]:00> but was:<...10-30T02:30:00.000+0[2]:00>"}, "patched_method": {"file_path": "/src/main/java/org/joda/time/MutableDateTime.java", "method_name": "add", "content": "    /**\n     * Adds to the instant specifying the duration and multiple to add.\n     *\n     * @param type  a field type, usually obtained from DateTimeFieldType, not null\n     * @param amount  the amount to add of this duration\n     * @throws IllegalArgumentException if the value is null or invalid\n     * @throws ArithmeticException if the result exceeds the capacity of the instant\n     */\n    public void add(DurationFieldType type, int amount) {\n        if (type == null) {\n            throw new IllegalArgumentException(\"Field must not be null\");\n        }\n            setMillis(type.getField(getChronology()).add(getMillis(), amount));\n    }", "javadoc_start_line": 627, "annotations_start_line": 635, "method_start_line": 635, "end_line": 640}, "steps": [], "generation_failure": {"error": "Failed to generate stacktrace", "error_message": "[Errno 2] No such file or directory: './projects/Time/3/results/stacktrace-testAddWeeks_int_dstOverlapWinter_addZero-add.csv'"}}, {"failing_test": {"className": " org.joda.time.TestMutableDateTime_Adds", "methodName": "testAdd_DurationFieldType_int_dstOverlapWinter_addZero", "error": "junit.framework.ComparisonFailure", "message": "expected:<...10-30T02:30:00.000+0[1]:00> but was:<...10-30T02:30:00.000+0[2]:00>"}, "patched_method": {"file_path": "/src/main/java/org/joda/time/MutableDateTime.java", "method_name": "addMillis", "content": "    /**\n     * Add a number of milliseconds to the date. The implementation of this\n     * method differs from the {@link #add(long)} method in that a\n     * DateTimeField performs the addition.\n     *\n     * @param millis  the milliseconds to add\n     * @throws IllegalArgumentException if the value is invalid\n     */\n    public void addMillis(final int millis) {\n            setMillis(getChronology().millis().add(getMillis(), millis));\n    }", "javadoc_start_line": 871, "annotations_start_line": 879, "method_start_line": 879, "end_line": 881}, "steps": [], "generation_failure": {"error": "Failed to generate stacktrace", "error_message": "[Errno 2] No such file or directory: './projects/Time/3/results/stacktrace-testAdd_DurationFieldType_int_dstOverlapWinter_addZero-addMillis.csv'"}}, {"failing_test": {"className": " org.joda.time.TestMutableDateTime_Adds", "methodName": "testAdd_DurationFieldType_int_dstOverlapWinter_addZero", "error": "junit.framework.ComparisonFailure", "message": "expected:<...10-30T02:30:00.000+0[1]:00> but was:<...10-30T02:30:00.000+0[2]:00>"}, "patched_method": {"file_path": "/src/main/java/org/joda/time/MutableDateTime.java", "method_name": "addSeconds", "content": "    /**\n     * Add a number of seconds to the date.\n     *\n     * @param seconds  the seconds to add\n     * @throws IllegalArgumentException if the value is invalid\n     */\n    public void addSeconds(final int seconds) {\n            setMillis(getChronology().seconds().add(getMillis(), seconds));\n    }", "javadoc_start_line": 840, "annotations_start_line": 846, "method_start_line": 846, "end_line": 848}, "steps": [], "generation_failure": {"error": "Failed to generate stacktrace", "error_message": "[Errno 2] No such file or directory: './projects/Time/3/results/stacktrace-testAdd_DurationFieldType_int_dstOverlapWinter_addZero-addSeconds.csv'"}}, {"failing_test": {"className": " org.joda.time.TestMutableDateTime_Adds", "methodName": "testAdd_DurationFieldType_int_dstOverlapWinter_addZero", "error": "junit.framework.ComparisonFailure", "message": "expected:<...10-30T02:30:00.000+0[1]:00> but was:<...10-30T02:30:00.000+0[2]:00>"}, "patched_method": {"file_path": "/src/main/java/org/joda/time/MutableDateTime.java", "method_name": "addMinutes", "content": "    /**\n     * Add a number of minutes to the date.\n     *\n     * @param minutes  the minutes to add\n     * @throws IllegalArgumentException if the value is invalid\n     */\n    public void addMinutes(final int minutes) {\n            setMillis(getChronology().minutes().add(getMillis(), minutes));\n    }", "javadoc_start_line": 809, "annotations_start_line": 815, "method_start_line": 815, "end_line": 817}, "steps": [], "generation_failure": {"error": "Failed to generate stacktrace", "error_message": "[Errno 2] No such file or directory: './projects/Time/3/results/stacktrace-testAdd_DurationFieldType_int_dstOverlapWinter_addZero-addMinutes.csv'"}}, {"failing_test": {"className": " org.joda.time.TestMutableDateTime_Adds", "methodName": "testAdd_DurationFieldType_int_dstOverlapWinter_addZero", "error": "junit.framework.ComparisonFailure", "message": "expected:<...10-30T02:30:00.000+0[1]:00> but was:<...10-30T02:30:00.000+0[2]:00>"}, "patched_method": {"file_path": "/src/main/java/org/joda/time/MutableDateTime.java", "method_name": "addHours", "content": "    /**\n     * Add a number of hours to the date.\n     *\n     * @param hours  the hours to add\n     * @throws IllegalArgumentException if the value is invalid\n     */\n    public void addHours(final int hours) {\n            setMillis(getChronology().hours().add(getMillis(), hours));\n    }", "javadoc_start_line": 778, "annotations_start_line": 784, "method_start_line": 784, "end_line": 786}, "steps": [], "generation_failure": {"error": "Failed to generate stacktrace", "error_message": "[Errno 2] No such file or directory: './projects/Time/3/results/stacktrace-testAdd_DurationFieldType_int_dstOverlapWinter_addZero-addHours.csv'"}}, {"failing_test": {"className": " org.joda.time.TestMutableDateTime_Adds", "methodName": "testAdd_DurationFieldType_int_dstOverlapWinter_addZero", "error": "junit.framework.ComparisonFailure", "message": "expected:<...10-30T02:30:00.000+0[1]:00> but was:<...10-30T02:30:00.000+0[2]:00>"}, "patched_method": {"file_path": "/src/main/java/org/joda/time/MutableDateTime.java", "method_name": "addDays", "content": "    /**\n     * Add a number of days to the date.\n     *\n     * @param days  the days to add\n     * @throws IllegalArgumentException if the value is invalid\n     */\n    public void addDays(final int days) {\n            setMillis(getChronology().days().add(getMillis(), days));\n    }", "javadoc_start_line": 757, "annotations_start_line": 763, "method_start_line": 763, "end_line": 765}, "steps": [], "generation_failure": {"error": "Failed to generate stacktrace", "error_message": "[Errno 2] No such file or directory: './projects/Time/3/results/stacktrace-testAdd_DurationFieldType_int_dstOverlapWinter_addZero-addDays.csv'"}}, {"failing_test": {"className": " org.joda.time.TestMutableDateTime_Adds", "methodName": "testAdd_DurationFieldType_int_dstOverlapWinter_addZero", "error": "junit.framework.ComparisonFailure", "message": "expected:<...10-30T02:30:00.000+0[1]:00> but was:<...10-30T02:30:00.000+0[2]:00>"}, "patched_method": {"file_path": "/src/main/java/org/joda/time/MutableDateTime.java", "method_name": "addWeeks", "content": "    /**\n     * Add a number of weeks to the date.\n     *\n     * @param weeks  the weeks to add\n     * @throws IllegalArgumentException if the value is invalid\n     */\n    public void addWeeks(final int weeks) {\n            setMillis(getChronology().weeks().add(getMillis(), weeks));\n    }", "javadoc_start_line": 716, "annotations_start_line": 722, "method_start_line": 722, "end_line": 724}, "steps": [], "generation_failure": {"error": "Failed to generate stacktrace", "error_message": "[Errno 2] No such file or directory: './projects/Time/3/results/stacktrace-testAdd_DurationFieldType_int_dstOverlapWinter_addZero-addWeeks.csv'"}}, {"failing_test": {"className": " org.joda.time.TestMutableDateTime_Adds", "methodName": "testAdd_DurationFieldType_int_dstOverlapWinter_addZero", "error": "junit.framework.ComparisonFailure", "message": "expected:<...10-30T02:30:00.000+0[1]:00> but was:<...10-30T02:30:00.000+0[2]:00>"}, "patched_method": {"file_path": "/src/main/java/org/joda/time/MutableDateTime.java", "method_name": "addMonths", "content": "    /**\n     * Add a number of months to the date.\n     *\n     * @param months  the months to add\n     * @throws IllegalArgumentException if the value is invalid\n     */\n    public void addMonths(final int months) {\n            setMillis(getChronology().months().add(getMillis(), months));\n    }", "javadoc_start_line": 695, "annotations_start_line": 701, "method_start_line": 701, "end_line": 703}, "steps": [], "generation_failure": {"error": "Failed to generate stacktrace", "error_message": "[Errno 2] No such file or directory: './projects/Time/3/results/stacktrace-testAdd_DurationFieldType_int_dstOverlapWinter_addZero-addMonths.csv'"}}, {"failing_test": {"className": " org.joda.time.TestMutableDateTime_Adds", "methodName": "testAdd_DurationFieldType_int_dstOverlapWinter_addZero", "error": "junit.framework.ComparisonFailure", "message": "expected:<...10-30T02:30:00.000+0[1]:00> but was:<...10-30T02:30:00.000+0[2]:00>"}, "patched_method": {"file_path": "/src/main/java/org/joda/time/MutableDateTime.java", "method_name": "addWeekyears", "content": "    /**\n     * Add a number of weekyears to the date.\n     *\n     * @param weekyears  the weekyears to add\n     * @throws IllegalArgumentException if the value is invalid\n     */\n    public void addWeekyears(final int weekyears) {\n            setMillis(getChronology().weekyears().add(getMillis(), weekyears));\n    }", "javadoc_start_line": 674, "annotations_start_line": 680, "method_start_line": 680, "end_line": 682}, "steps": [], "generation_failure": {"error": "Failed to generate stacktrace", "error_message": "[Errno 2] No such file or directory: './projects/Time/3/results/stacktrace-testAdd_DurationFieldType_int_dstOverlapWinter_addZero-addWeekyears.csv'"}}, {"failing_test": {"className": " org.joda.time.TestMutableDateTime_Adds", "methodName": "testAdd_DurationFieldType_int_dstOverlapWinter_addZero", "error": "junit.framework.ComparisonFailure", "message": "expected:<...10-30T02:30:00.000+0[1]:00> but was:<...10-30T02:30:00.000+0[2]:00>"}, "patched_method": {"file_path": "/src/main/java/org/joda/time/MutableDateTime.java", "method_name": "addYears", "content": "    /**\n     * Add a number of years to the date.\n     *\n     * @param years  the years to add\n     * @throws IllegalArgumentException if the value is invalid\n     */\n    public void addYears(final int years) {\n            setMillis(getChronology().years().add(getMillis(), years));\n    }", "javadoc_start_line": 653, "annotations_start_line": 659, "method_start_line": 659, "end_line": 661}, "steps": [], "generation_failure": {"error": "Failed to generate stacktrace", "error_message": "[Errno 2] No such file or directory: './projects/Time/3/results/stacktrace-testAdd_DurationFieldType_int_dstOverlapWinter_addZero-addYears.csv'"}}, {"failing_test": {"className": " org.joda.time.TestMutableDateTime_Adds", "methodName": "testAdd_DurationFieldType_int_dstOverlapWinter_addZero", "error": "junit.framework.ComparisonFailure", "message": "expected:<...10-30T02:30:00.000+0[1]:00> but was:<...10-30T02:30:00.000+0[2]:00>"}, "patched_method": {"file_path": "/src/main/java/org/joda/time/MutableDateTime.java", "method_name": "add", "content": "    /**\n     * Adds to the instant specifying the duration and multiple to add.\n     *\n     * @param type  a field type, usually obtained from DateTimeFieldType, not null\n     * @param amount  the amount to add of this duration\n     * @throws IllegalArgumentException if the value is null or invalid\n     * @throws ArithmeticException if the result exceeds the capacity of the instant\n     */\n    public void add(DurationFieldType type, int amount) {\n        if (type == null) {\n            throw new IllegalArgumentException(\"Field must not be null\");\n        }\n            setMillis(type.getField(getChronology()).add(getMillis(), amount));\n    }", "javadoc_start_line": 627, "annotations_start_line": 635, "method_start_line": 635, "end_line": 640}, "steps": [], "generation_failure": {"error": "Failed to generate stacktrace", "error_message": "[Errno 2] No such file or directory: './projects/Time/3/results/stacktrace-testAdd_DurationFieldType_int_dstOverlapWinter_addZero-add.csv'"}}, {"failing_test": {"className": " org.joda.time.TestMutableDateTime_Adds", "methodName": "testAddMonths_int_dstOverlapWinter_addZero", "error": "junit.framework.ComparisonFailure", "message": "expected:<...10-30T02:30:00.000+0[1]:00> but was:<...10-30T02:30:00.000+0[2]:00>"}, "patched_method": {"file_path": "/src/main/java/org/joda/time/MutableDateTime.java", "method_name": "addMillis", "content": "    /**\n     * Add a number of milliseconds to the date. The implementation of this\n     * method differs from the {@link #add(long)} method in that a\n     * DateTimeField performs the addition.\n     *\n     * @param millis  the milliseconds to add\n     * @throws IllegalArgumentException if the value is invalid\n     */\n    public void addMillis(final int millis) {\n            setMillis(getChronology().millis().add(getMillis(), millis));\n    }", "javadoc_start_line": 871, "annotations_start_line": 879, "method_start_line": 879, "end_line": 881}, "steps": [], "generation_failure": {"error": "Failed to generate stacktrace", "error_message": "[Errno 2] No such file or directory: './projects/Time/3/results/stacktrace-testAddMonths_int_dstOverlapWinter_addZero-addMillis.csv'"}}, {"failing_test": {"className": " org.joda.time.TestMutableDateTime_Adds", "methodName": "testAddMonths_int_dstOverlapWinter_addZero", "error": "junit.framework.ComparisonFailure", "message": "expected:<...10-30T02:30:00.000+0[1]:00> but was:<...10-30T02:30:00.000+0[2]:00>"}, "patched_method": {"file_path": "/src/main/java/org/joda/time/MutableDateTime.java", "method_name": "addSeconds", "content": "    /**\n     * Add a number of seconds to the date.\n     *\n     * @param seconds  the seconds to add\n     * @throws IllegalArgumentException if the value is invalid\n     */\n    public void addSeconds(final int seconds) {\n            setMillis(getChronology().seconds().add(getMillis(), seconds));\n    }", "javadoc_start_line": 840, "annotations_start_line": 846, "method_start_line": 846, "end_line": 848}, "steps": [], "generation_failure": {"error": "Failed to generate stacktrace", "error_message": "[Errno 2] No such file or directory: './projects/Time/3/results/stacktrace-testAddMonths_int_dstOverlapWinter_addZero-addSeconds.csv'"}}, {"failing_test": {"className": " org.joda.time.TestMutableDateTime_Adds", "methodName": "testAddMonths_int_dstOverlapWinter_addZero", "error": "junit.framework.ComparisonFailure", "message": "expected:<...10-30T02:30:00.000+0[1]:00> but was:<...10-30T02:30:00.000+0[2]:00>"}, "patched_method": {"file_path": "/src/main/java/org/joda/time/MutableDateTime.java", "method_name": "addMinutes", "content": "    /**\n     * Add a number of minutes to the date.\n     *\n     * @param minutes  the minutes to add\n     * @throws IllegalArgumentException if the value is invalid\n     */\n    public void addMinutes(final int minutes) {\n            setMillis(getChronology().minutes().add(getMillis(), minutes));\n    }", "javadoc_start_line": 809, "annotations_start_line": 815, "method_start_line": 815, "end_line": 817}, "steps": [], "generation_failure": {"error": "Failed to generate stacktrace", "error_message": "[Errno 2] No such file or directory: './projects/Time/3/results/stacktrace-testAddMonths_int_dstOverlapWinter_addZero-addMinutes.csv'"}}, {"failing_test": {"className": " org.joda.time.TestMutableDateTime_Adds", "methodName": "testAddMonths_int_dstOverlapWinter_addZero", "error": "junit.framework.ComparisonFailure", "message": "expected:<...10-30T02:30:00.000+0[1]:00> but was:<...10-30T02:30:00.000+0[2]:00>"}, "patched_method": {"file_path": "/src/main/java/org/joda/time/MutableDateTime.java", "method_name": "addHours", "content": "    /**\n     * Add a number of hours to the date.\n     *\n     * @param hours  the hours to add\n     * @throws IllegalArgumentException if the value is invalid\n     */\n    public void addHours(final int hours) {\n            setMillis(getChronology().hours().add(getMillis(), hours));\n    }", "javadoc_start_line": 778, "annotations_start_line": 784, "method_start_line": 784, "end_line": 786}, "steps": [], "generation_failure": {"error": "Failed to generate stacktrace", "error_message": "[Errno 2] No such file or directory: './projects/Time/3/results/stacktrace-testAddMonths_int_dstOverlapWinter_addZero-addHours.csv'"}}, {"failing_test": {"className": " org.joda.time.TestMutableDateTime_Adds", "methodName": "testAddMonths_int_dstOverlapWinter_addZero", "error": "junit.framework.ComparisonFailure", "message": "expected:<...10-30T02:30:00.000+0[1]:00> but was:<...10-30T02:30:00.000+0[2]:00>"}, "patched_method": {"file_path": "/src/main/java/org/joda/time/MutableDateTime.java", "method_name": "addDays", "content": "    /**\n     * Add a number of days to the date.\n     *\n     * @param days  the days to add\n     * @throws IllegalArgumentException if the value is invalid\n     */\n    public void addDays(final int days) {\n            setMillis(getChronology().days().add(getMillis(), days));\n    }", "javadoc_start_line": 757, "annotations_start_line": 763, "method_start_line": 763, "end_line": 765}, "steps": [], "generation_failure": {"error": "Failed to generate stacktrace", "error_message": "[Errno 2] No such file or directory: './projects/Time/3/results/stacktrace-testAddMonths_int_dstOverlapWinter_addZero-addDays.csv'"}}, {"failing_test": {"className": " org.joda.time.TestMutableDateTime_Adds", "methodName": "testAddMonths_int_dstOverlapWinter_addZero", "error": "junit.framework.ComparisonFailure", "message": "expected:<...10-30T02:30:00.000+0[1]:00> but was:<...10-30T02:30:00.000+0[2]:00>"}, "patched_method": {"file_path": "/src/main/java/org/joda/time/MutableDateTime.java", "method_name": "addWeeks", "content": "    /**\n     * Add a number of weeks to the date.\n     *\n     * @param weeks  the weeks to add\n     * @throws IllegalArgumentException if the value is invalid\n     */\n    public void addWeeks(final int weeks) {\n            setMillis(getChronology().weeks().add(getMillis(), weeks));\n    }", "javadoc_start_line": 716, "annotations_start_line": 722, "method_start_line": 722, "end_line": 724}, "steps": [], "generation_failure": {"error": "Failed to generate stacktrace", "error_message": "[Errno 2] No such file or directory: './projects/Time/3/results/stacktrace-testAddMonths_int_dstOverlapWinter_addZero-addWeeks.csv'"}}, {"failing_test": {"className": " org.joda.time.TestMutableDateTime_Adds", "methodName": "testAddMonths_int_dstOverlapWinter_addZero", "error": "junit.framework.ComparisonFailure", "message": "expected:<...10-30T02:30:00.000+0[1]:00> but was:<...10-30T02:30:00.000+0[2]:00>"}, "patched_method": {"file_path": "/src/main/java/org/joda/time/MutableDateTime.java", "method_name": "addMonths", "content": "    /**\n     * Add a number of months to the date.\n     *\n     * @param months  the months to add\n     * @throws IllegalArgumentException if the value is invalid\n     */\n    public void addMonths(final int months) {\n            setMillis(getChronology().months().add(getMillis(), months));\n    }", "javadoc_start_line": 695, "annotations_start_line": 701, "method_start_line": 701, "end_line": 703}, "steps": [], "generation_failure": {"error": "Failed to generate stacktrace", "error_message": "[Errno 2] No such file or directory: './projects/Time/3/results/stacktrace-testAddMonths_int_dstOverlapWinter_addZero-addMonths.csv'"}}, {"failing_test": {"className": " org.joda.time.TestMutableDateTime_Adds", "methodName": "testAddMonths_int_dstOverlapWinter_addZero", "error": "junit.framework.ComparisonFailure", "message": "expected:<...10-30T02:30:00.000+0[1]:00> but was:<...10-30T02:30:00.000+0[2]:00>"}, "patched_method": {"file_path": "/src/main/java/org/joda/time/MutableDateTime.java", "method_name": "addWeekyears", "content": "    /**\n     * Add a number of weekyears to the date.\n     *\n     * @param weekyears  the weekyears to add\n     * @throws IllegalArgumentException if the value is invalid\n     */\n    public void addWeekyears(final int weekyears) {\n            setMillis(getChronology().weekyears().add(getMillis(), weekyears));\n    }", "javadoc_start_line": 674, "annotations_start_line": 680, "method_start_line": 680, "end_line": 682}, "steps": [], "generation_failure": {"error": "Failed to generate stacktrace", "error_message": "[Errno 2] No such file or directory: './projects/Time/3/results/stacktrace-testAddMonths_int_dstOverlapWinter_addZero-addWeekyears.csv'"}}, {"failing_test": {"className": " org.joda.time.TestMutableDateTime_Adds", "methodName": "testAddMonths_int_dstOverlapWinter_addZero", "error": "junit.framework.ComparisonFailure", "message": "expected:<...10-30T02:30:00.000+0[1]:00> but was:<...10-30T02:30:00.000+0[2]:00>"}, "patched_method": {"file_path": "/src/main/java/org/joda/time/MutableDateTime.java", "method_name": "addYears", "content": "    /**\n     * Add a number of years to the date.\n     *\n     * @param years  the years to add\n     * @throws IllegalArgumentException if the value is invalid\n     */\n    public void addYears(final int years) {\n            setMillis(getChronology().years().add(getMillis(), years));\n    }", "javadoc_start_line": 653, "annotations_start_line": 659, "method_start_line": 659, "end_line": 661}, "steps": [], "generation_failure": {"error": "Failed to generate stacktrace", "error_message": "[Errno 2] No such file or directory: './projects/Time/3/results/stacktrace-testAddMonths_int_dstOverlapWinter_addZero-addYears.csv'"}}, {"failing_test": {"className": " org.joda.time.TestMutableDateTime_Adds", "methodName": "testAddMonths_int_dstOverlapWinter_addZero", "error": "junit.framework.ComparisonFailure", "message": "expected:<...10-30T02:30:00.000+0[1]:00> but was:<...10-30T02:30:00.000+0[2]:00>"}, "patched_method": {"file_path": "/src/main/java/org/joda/time/MutableDateTime.java", "method_name": "add", "content": "    /**\n     * Adds to the instant specifying the duration and multiple to add.\n     *\n     * @param type  a field type, usually obtained from DateTimeFieldType, not null\n     * @param amount  the amount to add of this duration\n     * @throws IllegalArgumentException if the value is null or invalid\n     * @throws ArithmeticException if the result exceeds the capacity of the instant\n     */\n    public void add(DurationFieldType type, int amount) {\n        if (type == null) {\n            throw new IllegalArgumentException(\"Field must not be null\");\n        }\n            setMillis(type.getField(getChronology()).add(getMillis(), amount));\n    }", "javadoc_start_line": 627, "annotations_start_line": 635, "method_start_line": 635, "end_line": 640}, "steps": [], "generation_failure": {"error": "Failed to generate stacktrace", "error_message": "[Errno 2] No such file or directory: './projects/Time/3/results/stacktrace-testAddMonths_int_dstOverlapWinter_addZero-add.csv'"}}], "project": {"name": "Time", "version": 3}}