{"tours": [{"failing_test": {"className": " com.google.javascript.jscomp.ClosureReverseAbstractInterpreterTest", "methodName": "testGoogIsFunction2", "error": "junit.framework.AssertionFailedError", "message": "Expected: (Object|boolean|number|string)"}, "patched_method": {"file_path": "/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java", "method_name": "caseObjectType", "content": "    public JSType caseObjectType(ObjectType type) {\n      if (value.equals(\"function\")) {\n        JSType ctorType = getNativeType(U2U_CONSTRUCTOR_TYPE);\n        return resultEqualsValue && ctorType.isSubtype(type) ? ctorType : null;\n          // Objects are restricted to \"Function\", subtypes are left\n          // Only filter out subtypes of \"function\"\n      }\n      return matchesExpectation(\"object\") ? type : null;\n    }", "javadoc_start_line": 610, "annotations_start_line": 609, "method_start_line": 610, "end_line": 618}, "steps": [{"file_path": "/src/com/google/javascript/jscomp/type/ClosureReverseAbstractInterpreter.java", "method_name": "getPreciserScopeKnowingConditionOutcome", "content": "  public FlowScope getPreciserScopeKnowingConditionOutcome(Node condition,\n      FlowScope blindScope, boolean outcome) {\n    if (condition.isCall() && condition.getChildCount() == 2) {\n      Node callee = condition.getFirstChild();\n      Node param = condition.getLastChild();\n      if (callee.isGetProp() && param.isQualifiedName()) {\n        JSType paramType =  getTypeIfRefinable(param, blindScope);\n        Node left = callee.getFirstChild();\n        Node right = callee.getLastChild();\n        if (left.isName() && \"goog\".equals(left.getString()) &&\n            right.isString()) {\n          Function<TypeRestriction, JSType> restricter =\n              restricters.get(right.getString());\n          if (restricter != null) {\n            return restrictParameter(param, paramType, blindScope, restricter,\n                outcome);\n          }\n        }\n      }\n    }\n    return nextPreciserScopeKnowingConditionOutcome(\n        condition, blindScope, outcome);\n  }", "javadoc_start_line": 206, "annotations_start_line": 205, "method_start_line": 207, "end_line": 228}, {"file_path": "/src/com/google/javascript/jscomp/type/ClosureReverseAbstractInterpreter.java", "method_name": "restrictParameter", "content": "  private FlowScope restrictParameter(Node parameter, JSType type,\n      FlowScope blindScope, Function<TypeRestriction, JSType> restriction,\n      boolean outcome) {\n    // restricting\n    type = restriction.apply(new TypeRestriction(type, outcome));\n\n    // changing the scope\n    if (type != null) {\n      FlowScope informed = blindScope.createChildFlowScope();\n      declareNameInScope(informed, parameter, type);\n      return informed;\n    } else {\n      return blindScope;\n    }\n  }", "javadoc_start_line": 230, "annotations_start_line": 230, "method_start_line": 232, "end_line": 244}, {"file_path": "/src/com/google/javascript/rhino/jstype/UnionType.java", "method_name": "visit", "content": "  public <T> T visit(Visitor<T> visitor) {\n    return visitor.caseUnionType(this);\n  }", "javadoc_start_line": 540, "annotations_start_line": 539, "method_start_line": 540, "end_line": 542}, {"file_path": "/src/com/google/javascript/rhino/jstype/ObjectType.java", "method_name": "visit", "content": "  public <T> T visit(Visitor<T> visitor) {\n    return visitor.caseObjectType(this);\n  }", "javadoc_start_line": 464, "annotations_start_line": 463, "method_start_line": 464, "end_line": 466}]}, {"failing_test": {"className": " com.google.javascript.jscomp.SemanticReverseAbstractInterpreterTest", "methodName": "testTypeof3", "error": "junit.framework.AssertionFailedError", "message": "Expected: (Object|boolean|number|string)"}, "patched_method": {"file_path": "/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java", "method_name": "caseObjectType", "content": "    public JSType caseObjectType(ObjectType type) {\n      if (value.equals(\"function\")) {\n        JSType ctorType = getNativeType(U2U_CONSTRUCTOR_TYPE);\n        return resultEqualsValue && ctorType.isSubtype(type) ? ctorType : null;\n          // Objects are restricted to \"Function\", subtypes are left\n          // Only filter out subtypes of \"function\"\n      }\n      return matchesExpectation(\"object\") ? type : null;\n    }", "javadoc_start_line": 610, "annotations_start_line": 609, "method_start_line": 610, "end_line": 618}, "steps": [{"file_path": "/src/com/google/javascript/jscomp/type/SemanticReverseAbstractInterpreter.java", "method_name": "getPreciserScopeKnowingConditionOutcome", "content": "  public FlowScope getPreciserScopeKnowingConditionOutcome(Node condition,\n      FlowScope blindScope, boolean outcome) {\n    // Check for the typeof operator.\n    int operatorToken = condition.getType();\n    switch (operatorToken) {\n      case Token.EQ:\n      case Token.NE:\n      case Token.SHEQ:\n      case Token.SHNE:\n      case Token.CASE:\n        Node left;\n        Node right;\n        if (operatorToken == Token.CASE) {\n          left = condition.getParent().getFirstChild(); // the switch condition\n          right = condition.getFirstChild();\n        } else {\n          left = condition.getFirstChild();\n          right = condition.getLastChild();\n        }\n\n        Node typeOfNode = null;\n        Node stringNode = null;\n        if (left.isTypeOf() && right.isString()) {\n          typeOfNode = left;\n          stringNode = right;\n        } else if (right.isTypeOf() &&\n                   left.isString()) {\n          typeOfNode = right;\n          stringNode = left;\n        }\n        if (typeOfNode != null && stringNode != null) {\n          Node operandNode = typeOfNode.getFirstChild();\n          JSType operandType = getTypeIfRefinable(operandNode, blindScope);\n          if (operandType != null) {\n            boolean resultEqualsValue = operatorToken == Token.EQ ||\n                operatorToken == Token.SHEQ || operatorToken == Token.CASE;\n            if (!outcome) {\n              resultEqualsValue = !resultEqualsValue;\n            }\n            return caseTypeOf(operandNode, operandType, stringNode.getString(),\n                resultEqualsValue, blindScope);\n          }\n        }\n    }\n    switch (operatorToken) {\n      case Token.AND:\n        if (outcome) {\n          return caseAndOrNotShortCircuiting(condition.getFirstChild(),\n              condition.getLastChild(), blindScope, true);\n        } else {\n          return caseAndOrMaybeShortCircuiting(condition.getFirstChild(),\n              condition.getLastChild(), blindScope, true);\n        }\n\n      case Token.OR:\n        if (!outcome) {\n          return caseAndOrNotShortCircuiting(condition.getFirstChild(),\n              condition.getLastChild(), blindScope, false);\n        } else {\n          return caseAndOrMaybeShortCircuiting(condition.getFirstChild(),\n              condition.getLastChild(), blindScope, false);\n        }\n\n      case Token.EQ:\n        if (outcome) {\n          return caseEquality(condition, blindScope, EQ);\n        } else {\n          return caseEquality(condition, blindScope, NE);\n        }\n\n      case Token.NE:\n        if (outcome) {\n          return caseEquality(condition, blindScope, NE);\n        } else {\n          return caseEquality(condition, blindScope, EQ);\n        }\n\n      case Token.SHEQ:\n        if (outcome) {\n          return caseEquality(condition, blindScope, SHEQ);\n        } else {\n          return caseEquality(condition, blindScope, SHNE);\n        }\n\n      case Token.SHNE:\n        if (outcome) {\n          return caseEquality(condition, blindScope, SHNE);\n        } else {\n          return caseEquality(condition, blindScope, SHEQ);\n        }\n\n      case Token.NAME:\n      case Token.GETPROP:\n        return caseNameOrGetProp(condition, blindScope, outcome);\n\n      case Token.ASSIGN:\n        return firstPreciserScopeKnowingConditionOutcome(\n            condition.getFirstChild(),\n            firstPreciserScopeKnowingConditionOutcome(\n                condition.getFirstChild().getNext(), blindScope, outcome),\n            outcome);\n\n      case Token.NOT:\n        return firstPreciserScopeKnowingConditionOutcome(\n            condition.getFirstChild(), blindScope, !outcome);\n\n      case Token.LE:\n      case Token.LT:\n      case Token.GE:\n      case Token.GT:\n        if (outcome) {\n          return caseEquality(condition, blindScope, INEQ);\n        }\n        break;\n\n      case Token.INSTANCEOF:\n        return caseInstanceOf(\n            condition.getFirstChild(), condition.getLastChild(), blindScope,\n            outcome);\n\n      case Token.IN:\n        if (outcome && condition.getFirstChild().isString()) {\n          return caseIn(condition.getLastChild(),\n              condition.getFirstChild().getString(), blindScope);\n        }\n        break;\n\n      case Token.CASE:\n        Node left =\n            condition.getParent().getFirstChild(); // the switch condition\n        Node right = condition.getFirstChild();\n        if (outcome) {\n          return caseEquality(left, right, blindScope, SHEQ);\n        } else {\n          return caseEquality(left, right, blindScope, SHNE);\n        }\n    }\n    return nextPreciserScopeKnowingConditionOutcome(\n        condition, blindScope, outcome);\n  }", "javadoc_start_line": 125, "annotations_start_line": 124, "method_start_line": 126, "end_line": 264}, {"file_path": "/src/com/google/javascript/jscomp/type/SemanticReverseAbstractInterpreter.java", "method_name": "caseTypeOf", "content": "  private FlowScope caseTypeOf(Node node, JSType type, String value,\n        boolean resultEqualsValue, FlowScope blindScope) {\n    return maybeRestrictName(\n        blindScope, node, type,\n        getRestrictedByTypeOfResult(type, value, resultEqualsValue));\n  }", "javadoc_start_line": 437, "annotations_start_line": 437, "method_start_line": 438, "end_line": 442}, {"file_path": "/src/com/google/javascript/rhino/jstype/UnionType.java", "method_name": "visit", "content": "  public <T> T visit(Visitor<T> visitor) {\n    return visitor.caseUnionType(this);\n  }", "javadoc_start_line": 540, "annotations_start_line": 539, "method_start_line": 540, "end_line": 542}, {"file_path": "/src/com/google/javascript/rhino/jstype/ObjectType.java", "method_name": "visit", "content": "  public <T> T visit(Visitor<T> visitor) {\n    return visitor.caseObjectType(this);\n  }", "javadoc_start_line": 464, "annotations_start_line": 463, "method_start_line": 464, "end_line": 466}]}], "project": {"name": "Closure", "version": 7}}