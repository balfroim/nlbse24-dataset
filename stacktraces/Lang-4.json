{"tours": [{"failing_test": {"className": " org.apache.commons.lang3.text.translate.LookupTranslatorTest", "methodName": "testLang882", "error": "junit.framework.AssertionFailedError", "message": "Incorrect codepoint consumption expected:<3> but was:<0>"}, "patched_method": {"file_path": "/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java", "method_name": "translate", "content": "    /**\n     * {@inheritDoc}\n     */\n    @Override\n    public int translate(final CharSequence input, final int index, final Writer out) throws IOException {\n        int max = longest;\n        if (index + longest > input.length()) {\n            max = input.length() - index;\n        }\n        // descend so as to get a greedy algorithm\n        for (int i = max; i >= shortest; i--) {\n            final CharSequence subSeq = input.subSequence(index, index + i);\n            final CharSequence result = lookupMap.get(subSeq);\n            if (result != null) {\n                out.write(result.toString());\n                return i;\n            }\n        }\n        return 0;\n    }", "javadoc_start_line": 65, "annotations_start_line": 68, "method_start_line": 69, "end_line": 84}, "steps": [{"file_path": "/src/test/java/org/apache/commons/lang3/text/translate/LookupTranslatorTest.java", "method_name": "testLang882", "content": "    public void testLang882() throws IOException {\n        final LookupTranslator lt = new LookupTranslator(new CharSequence[][] { { new StringBuffer(\"one\"), new StringBuffer(\"two\") } });\n        final StringWriter out = new StringWriter();\n        final int result = lt.translate(new StringBuffer(\"one\"), 0, out);\n        assertEquals(\"Incorrect codepoint consumption\", 3, result);\n        assertEquals(\"Incorrect value\", \"two\", out.toString());\n    }", "javadoc_start_line": 44, "annotations_start_line": 43, "method_start_line": 44, "end_line": 50}, {"file_path": "/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java", "method_name": "translate", "content": "    /**\n     * {@inheritDoc}\n     */\n    @Override\n    public int translate(final CharSequence input, final int index, final Writer out) throws IOException {\n        int max = longest;\n        if (index + longest > input.length()) {\n            max = input.length() - index;\n        }\n        // descend so as to get a greedy algorithm\n        for (int i = max; i >= shortest; i--) {\n            final CharSequence subSeq = input.subSequence(index, index + i);\n            final CharSequence result = lookupMap.get(subSeq);\n            if (result != null) {\n                out.write(result.toString());\n                return i;\n            }\n        }\n        return 0;\n    }", "javadoc_start_line": 65, "annotations_start_line": 68, "method_start_line": 69, "end_line": 84}]}, {"failing_test": {"className": " org.apache.commons.lang3.text.translate.LookupTranslatorTest", "methodName": "testLang882", "error": "junit.framework.AssertionFailedError", "message": "Incorrect codepoint consumption expected:<3> but was:<0>"}, "patched_method": {"file_path": "/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java", "method_name": "LookupTranslator", "content": "    /**\n     * Define the lookup table to be used in translation\n     *\n     * Note that, as of Lang 3.1, the key to the lookup table is converted to a \n     * java.lang.String, while the value remains as a java.lang.CharSequence. \n     * This is because we need the key to support hashCode and equals(Object), \n     * allowing it to be the key for a HashMap. See LANG-882.\n     *\n     * @param lookup CharSequence[][] table of size [*][2]\n     */\n    public LookupTranslator(final CharSequence[]... lookup) {\n        lookupMap = new HashMap<CharSequence, CharSequence>();\n        int _shortest = Integer.MAX_VALUE;\n        int _longest = 0;\n        if (lookup != null) {\n            for (final CharSequence[] seq : lookup) {\n                this.lookupMap.put(seq[0], seq[1]);\n                final int sz = seq[0].length();\n                if (sz < _shortest) {\n                    _shortest = sz;\n                }\n                if (sz > _longest) {\n                    _longest = sz;\n                }\n            }\n        }\n        shortest = _shortest;\n        longest = _longest;\n    }", "javadoc_start_line": 35, "annotations_start_line": 45, "method_start_line": 45, "end_line": 63}, "steps": [], "generation_failure": {"error": "Failed to generate stacktrace", "error_message": "[Errno 2] No such file or directory: './projects/Lang/4/results/stacktrace-testLang882-LookupTranslator.csv'"}}], "project": {"name": "Lang", "version": 4}}