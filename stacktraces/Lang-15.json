{"tours": [{"failing_test": {"className": " org.apache.commons.lang3.reflect.TypeUtilsTest", "methodName": "testGetTypeArguments", "error": "junit.framework.AssertionFailedError", "message": "expected:<2> but was:<0>"}, "patched_method": {"file_path": "/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java", "method_name": "getTypeArguments", "content": "    /**\n     * <p> Return a map of the type arguments of a class in the context of <code>toClass</code>. </p>\n     *\n     * @param cls the class in question\n     * @param toClass the context class\n     * @param subtypeVarAssigns a map with type variables\n     * @return the map with type arguments\n     */\n    private static Map<TypeVariable<?>, Type> getTypeArguments(Class<?> cls, Class<?> toClass,\n            Map<TypeVariable<?>, Type> subtypeVarAssigns) {\n        // make sure they're assignable\n        if (!isAssignable(cls, toClass)) {\n            return null;\n        }\n\n        // can't work with primitives\n        if (cls.isPrimitive()) {\n            // both classes are primitives?\n            if (toClass.isPrimitive()) {\n                // dealing with widening here. No type arguments to be\n                // harvested with these two types.\n                return new HashMap<TypeVariable<?>, Type>();\n            }\n\n            // work with wrapper the wrapper class instead of the primitive\n            cls = ClassUtils.primitiveToWrapper(cls);\n        }\n\n        // create a copy of the incoming map, or an empty one if it's null\n        HashMap<TypeVariable<?>, Type> typeVarAssigns = subtypeVarAssigns == null ? new HashMap<TypeVariable<?>, Type>()\n                : new HashMap<TypeVariable<?>, Type>(subtypeVarAssigns);\n\n        // has target class been reached?\n        if (cls.getTypeParameters().length > 0 || toClass.equals(cls)) {\n            return typeVarAssigns;\n        }\n\n        // walk the inheritance hierarchy until the target class is reached\n        return getTypeArguments(getClosestParentType(cls, toClass), toClass, typeVarAssigns);\n    }", "javadoc_start_line": 642, "annotations_start_line": 650, "method_start_line": 651, "end_line": 681}, "steps": [], "generation_failure": {"error": "Failed to generate stacktrace", "error_message": "[Errno 2] No such file or directory: './projects/Lang/15/results/stacktrace-testGetTypeArguments-getTypeArguments.csv'"}}, {"failing_test": {"className": " org.apache.commons.lang3.reflect.TypeUtilsTest", "methodName": "testGetTypeArguments", "error": "junit.framework.AssertionFailedError", "message": "expected:<2> but was:<0>"}, "patched_method": {"file_path": "/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java", "method_name": "isAssignable", "content": "    /**\n     * <p> Checks if the subject type may be implicitly cast to the target\n     * parameterized type following the Java generics rules. </p>\n     *\n     * @param type the subject type to be assigned to the target type\n     * @param toParameterizedType the target parameterized type\n     * @param typeVarAssigns a map with type variables\n     * @return true if <code>type</code> is assignable to <code>toType</code>.\n     */\n    private static boolean isAssignable(Type type, ParameterizedType toParameterizedType,\n            Map<TypeVariable<?>, Type> typeVarAssigns) {\n        if (type == null) {\n            return true;\n        }\n\n        // only a null type can be assigned to null type which\n        // would have cause the previous to return true\n        if (toParameterizedType == null) {\n            return false;\n        }\n\n        // all types are assignable to themselves\n        if (toParameterizedType.equals(type)) {\n            return true;\n        }\n\n        // get the target type's raw type\n        Class<?> toClass = getRawType(toParameterizedType);\n        // get the subject type's type arguments including owner type arguments\n        // and supertype arguments up to and including the target class.\n        Map<TypeVariable<?>, Type> fromTypeVarAssigns = getTypeArguments(type, toClass, null);\n\n        // null means the two types are not compatible\n        if (fromTypeVarAssigns == null) {\n            return false;\n        }\n\n        // compatible types, but there's no type arguments. this is equivalent\n        // to comparing Map< ?, ? > to Map, and raw types are always assignable\n        // to parameterized types.\n        if (fromTypeVarAssigns.isEmpty()) {\n            return true;\n        }\n\n        // get the target type's type arguments including owner type arguments\n        Map<TypeVariable<?>, Type> toTypeVarAssigns = getTypeArguments(toParameterizedType,\n                toClass, typeVarAssigns);\n\n        // now to check each type argument\n        for (Map.Entry<TypeVariable<?>, Type> entry : toTypeVarAssigns.entrySet()) {\n            Type toTypeArg = entry.getValue();\n            Type fromTypeArg = fromTypeVarAssigns.get(entry.getKey());\n\n            // parameters must either be absent from the subject type, within\n            // the bounds of the wildcard type, or be an exact match to the\n            // parameters of the target type.\n            if (fromTypeArg != null\n                    && !toTypeArg.equals(fromTypeArg)\n                    && !(toTypeArg instanceof WildcardType && isAssignable(fromTypeArg, toTypeArg,\n                            typeVarAssigns))) {\n                return false;\n            }\n        }\n\n        return true;\n    }", "javadoc_start_line": 170, "annotations_start_line": 179, "method_start_line": 180, "end_line": 235}, "steps": [], "generation_failure": {"error": "Failed to generate stacktrace", "error_message": "[Errno 2] No such file or directory: './projects/Lang/15/results/stacktrace-testGetTypeArguments-isAssignable.csv'"}}, {"failing_test": {"className": " org.apache.commons.lang3.reflect.TypeUtilsTest", "methodName": "testIsAssignable", "error": "junit.framework.AssertionFailedError", "message": "type class org.apache.commons.lang3.reflect.TypeUtilsTest$Thing not assignable to org.apache.commons.lang3.reflect.TypeUtilsTest.org.apache.commons.lang3.reflect.TypeUtilsTest$This<java.lang.String, java.lang.String>!"}, "patched_method": {"file_path": "/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java", "method_name": "getTypeArguments", "content": "    /**\n     * <p> Return a map of the type arguments of a class in the context of <code>toClass</code>. </p>\n     *\n     * @param cls the class in question\n     * @param toClass the context class\n     * @param subtypeVarAssigns a map with type variables\n     * @return the map with type arguments\n     */\n    private static Map<TypeVariable<?>, Type> getTypeArguments(Class<?> cls, Class<?> toClass,\n            Map<TypeVariable<?>, Type> subtypeVarAssigns) {\n        // make sure they're assignable\n        if (!isAssignable(cls, toClass)) {\n            return null;\n        }\n\n        // can't work with primitives\n        if (cls.isPrimitive()) {\n            // both classes are primitives?\n            if (toClass.isPrimitive()) {\n                // dealing with widening here. No type arguments to be\n                // harvested with these two types.\n                return new HashMap<TypeVariable<?>, Type>();\n            }\n\n            // work with wrapper the wrapper class instead of the primitive\n            cls = ClassUtils.primitiveToWrapper(cls);\n        }\n\n        // create a copy of the incoming map, or an empty one if it's null\n        HashMap<TypeVariable<?>, Type> typeVarAssigns = subtypeVarAssigns == null ? new HashMap<TypeVariable<?>, Type>()\n                : new HashMap<TypeVariable<?>, Type>(subtypeVarAssigns);\n\n        // has target class been reached?\n        if (cls.getTypeParameters().length > 0 || toClass.equals(cls)) {\n            return typeVarAssigns;\n        }\n\n        // walk the inheritance hierarchy until the target class is reached\n        return getTypeArguments(getClosestParentType(cls, toClass), toClass, typeVarAssigns);\n    }", "javadoc_start_line": 642, "annotations_start_line": 650, "method_start_line": 651, "end_line": 681}, "steps": [], "generation_failure": {"error": "Failed to generate stacktrace", "error_message": "[Errno 2] No such file or directory: './projects/Lang/15/results/stacktrace-testIsAssignable-getTypeArguments.csv'"}}, {"failing_test": {"className": " org.apache.commons.lang3.reflect.TypeUtilsTest", "methodName": "testIsAssignable", "error": "junit.framework.AssertionFailedError", "message": "type class org.apache.commons.lang3.reflect.TypeUtilsTest$Thing not assignable to org.apache.commons.lang3.reflect.TypeUtilsTest.org.apache.commons.lang3.reflect.TypeUtilsTest$This<java.lang.String, java.lang.String>!"}, "patched_method": {"file_path": "/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java", "method_name": "isAssignable", "content": "    /**\n     * <p> Checks if the subject type may be implicitly cast to the target\n     * parameterized type following the Java generics rules. </p>\n     *\n     * @param type the subject type to be assigned to the target type\n     * @param toParameterizedType the target parameterized type\n     * @param typeVarAssigns a map with type variables\n     * @return true if <code>type</code> is assignable to <code>toType</code>.\n     */\n    private static boolean isAssignable(Type type, ParameterizedType toParameterizedType,\n            Map<TypeVariable<?>, Type> typeVarAssigns) {\n        if (type == null) {\n            return true;\n        }\n\n        // only a null type can be assigned to null type which\n        // would have cause the previous to return true\n        if (toParameterizedType == null) {\n            return false;\n        }\n\n        // all types are assignable to themselves\n        if (toParameterizedType.equals(type)) {\n            return true;\n        }\n\n        // get the target type's raw type\n        Class<?> toClass = getRawType(toParameterizedType);\n        // get the subject type's type arguments including owner type arguments\n        // and supertype arguments up to and including the target class.\n        Map<TypeVariable<?>, Type> fromTypeVarAssigns = getTypeArguments(type, toClass, null);\n\n        // null means the two types are not compatible\n        if (fromTypeVarAssigns == null) {\n            return false;\n        }\n\n        // compatible types, but there's no type arguments. this is equivalent\n        // to comparing Map< ?, ? > to Map, and raw types are always assignable\n        // to parameterized types.\n        if (fromTypeVarAssigns.isEmpty()) {\n            return true;\n        }\n\n        // get the target type's type arguments including owner type arguments\n        Map<TypeVariable<?>, Type> toTypeVarAssigns = getTypeArguments(toParameterizedType,\n                toClass, typeVarAssigns);\n\n        // now to check each type argument\n        for (Map.Entry<TypeVariable<?>, Type> entry : toTypeVarAssigns.entrySet()) {\n            Type toTypeArg = entry.getValue();\n            Type fromTypeArg = fromTypeVarAssigns.get(entry.getKey());\n\n            // parameters must either be absent from the subject type, within\n            // the bounds of the wildcard type, or be an exact match to the\n            // parameters of the target type.\n            if (fromTypeArg != null\n                    && !toTypeArg.equals(fromTypeArg)\n                    && !(toTypeArg instanceof WildcardType && isAssignable(fromTypeArg, toTypeArg,\n                            typeVarAssigns))) {\n                return false;\n            }\n        }\n\n        return true;\n    }", "javadoc_start_line": 170, "annotations_start_line": 179, "method_start_line": 180, "end_line": 235}, "steps": [], "generation_failure": {"error": "Failed to generate stacktrace", "error_message": "[Errno 2] No such file or directory: './projects/Lang/15/results/stacktrace-testIsAssignable-isAssignable.csv'"}}], "project": {"name": "Lang", "version": 15}}