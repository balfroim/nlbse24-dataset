{"tours": [{"failing_test": {"className": " org.jfree.data.statistics.junit.DefaultBoxAndWhiskerCategoryDatasetTests", "methodName": "testGetRangeBounds", "error": "junit.framework.AssertionFailedError", "message": "expected:<Range[8.5,9.6]> but was:<Range[8.6,9.6]>"}, "patched_method": {"file_path": "/source/org/jfree/data/statistics/DefaultBoxAndWhiskerCategoryDataset.java", "method_name": "add", "content": "    /**\n     * Adds a list of values relating to one Box and Whisker entity to the \n     * table.  The various median values are calculated.\n     *\n     * @param item  a box and whisker item (<code>null</code> not permitted).\n     * @param rowKey  the row key (<code>null</code> not permitted).\n     * @param columnKey  the column key (<code>null</code> not permitted).\n     * \n     * @see #add(List, Comparable, Comparable)\n     */\n    public void add(BoxAndWhiskerItem item, Comparable rowKey, \n            Comparable columnKey) {\n\n        this.data.addObject(item, rowKey, columnKey);\n        \n        // update cached min and max values\n        int r = this.data.getRowIndex(rowKey);\n        int c = this.data.getColumnIndex(columnKey);\n        if ((this.maximumRangeValueRow == r && this.maximumRangeValueColumn \n                == c) || (this.minimumRangeValueRow == r \n                && this.minimumRangeValueColumn == c))  {\n            updateBounds();\n        }\n        \n            double minval = Double.NaN;\n            if (item.getMinOutlier() != null) {\n                minval = item.getMinOutlier().doubleValue();\n            }\n            double maxval = Double.NaN;\n            if (item.getMaxOutlier() != null) {\n                maxval = item.getMaxOutlier().doubleValue();\n            }\n        \n            if (Double.isNaN(this.maximumRangeValue)) {\n                this.maximumRangeValue = maxval;\n                this.maximumRangeValueRow = r;\n                this.maximumRangeValueColumn = c;\n            }\n            else if (maxval > this.maximumRangeValue) {\n                this.maximumRangeValue = maxval;\n                this.maximumRangeValueRow = r;\n                this.maximumRangeValueColumn = c;\n            }\n        \n            if (Double.isNaN(this.minimumRangeValue)) {\n                this.minimumRangeValue = minval;\n                this.minimumRangeValueRow = r;\n                this.minimumRangeValueColumn = c;\n            }\n            else if (minval < this.minimumRangeValue) {\n                this.minimumRangeValue = minval;\n                this.minimumRangeValueRow = r;\n                this.minimumRangeValueColumn = c;\n            }\n        \n        this.rangeBounds = new Range(this.minimumRangeValue,\n              this.maximumRangeValue);\n        fireDatasetChanged();\n\n    }", "javadoc_start_line": 134, "annotations_start_line": 144, "method_start_line": 145, "end_line": 193}, "steps": [{"file_path": "/source/org/jfree/data/statistics/DefaultBoxAndWhiskerCategoryDataset.java", "method_name": "add", "content": "    /**\n     * Adds a list of values relating to one Box and Whisker entity to the \n     * table.  The various median values are calculated.\n     *\n     * @param item  a box and whisker item (<code>null</code> not permitted).\n     * @param rowKey  the row key (<code>null</code> not permitted).\n     * @param columnKey  the column key (<code>null</code> not permitted).\n     * \n     * @see #add(List, Comparable, Comparable)\n     */\n    public void add(BoxAndWhiskerItem item, Comparable rowKey, \n            Comparable columnKey) {\n\n        this.data.addObject(item, rowKey, columnKey);\n        \n        // update cached min and max values\n        int r = this.data.getRowIndex(rowKey);\n        int c = this.data.getColumnIndex(columnKey);\n        if ((this.maximumRangeValueRow == r && this.maximumRangeValueColumn \n                == c) || (this.minimumRangeValueRow == r \n                && this.minimumRangeValueColumn == c))  {\n            updateBounds();\n        }\n        \n            double minval = Double.NaN;\n            if (item.getMinOutlier() != null) {\n                minval = item.getMinOutlier().doubleValue();\n            }\n            double maxval = Double.NaN;\n            if (item.getMaxOutlier() != null) {\n                maxval = item.getMaxOutlier().doubleValue();\n            }\n        \n            if (Double.isNaN(this.maximumRangeValue)) {\n                this.maximumRangeValue = maxval;\n                this.maximumRangeValueRow = r;\n                this.maximumRangeValueColumn = c;\n            }\n            else if (maxval > this.maximumRangeValue) {\n                this.maximumRangeValue = maxval;\n                this.maximumRangeValueRow = r;\n                this.maximumRangeValueColumn = c;\n            }\n        \n            if (Double.isNaN(this.minimumRangeValue)) {\n                this.minimumRangeValue = minval;\n                this.minimumRangeValueRow = r;\n                this.minimumRangeValueColumn = c;\n            }\n            else if (minval < this.minimumRangeValue) {\n                this.minimumRangeValue = minval;\n                this.minimumRangeValueRow = r;\n                this.minimumRangeValueColumn = c;\n            }\n        \n        this.rangeBounds = new Range(this.minimumRangeValue,\n              this.maximumRangeValue);\n        fireDatasetChanged();\n\n    }", "javadoc_start_line": 134, "annotations_start_line": 144, "method_start_line": 145, "end_line": 193}]}, {"failing_test": {"className": " org.jfree.data.statistics.junit.DefaultBoxAndWhiskerCategoryDatasetTests", "methodName": "testGetRangeBounds", "error": "junit.framework.AssertionFailedError", "message": "expected:<Range[8.5,9.6]> but was:<Range[8.6,9.6]>"}, "patched_method": {"file_path": "/source/org/jfree/data/statistics/DefaultBoxAndWhiskerCategoryDataset.java", "method_name": "updateBounds", "content": "    /**\n     * Resets the cached bounds, by iterating over the entire dataset to find\n     * the current bounds.\n     */\n    private void updateBounds() {\n        this.minimumRangeValue = Double.NaN;\n        this.maximumRangeValue = Double.NaN;\n    }", "javadoc_start_line": 735, "annotations_start_line": 739, "method_start_line": 739, "end_line": 742}, "steps": [{"file_path": "/source/org/jfree/data/statistics/DefaultBoxAndWhiskerCategoryDataset.java", "method_name": "add", "content": "    /**\n     * Adds a list of values relating to one Box and Whisker entity to the \n     * table.  The various median values are calculated.\n     *\n     * @param item  a box and whisker item (<code>null</code> not permitted).\n     * @param rowKey  the row key (<code>null</code> not permitted).\n     * @param columnKey  the column key (<code>null</code> not permitted).\n     * \n     * @see #add(List, Comparable, Comparable)\n     */\n    public void add(BoxAndWhiskerItem item, Comparable rowKey, \n            Comparable columnKey) {\n\n        this.data.addObject(item, rowKey, columnKey);\n        \n        // update cached min and max values\n        int r = this.data.getRowIndex(rowKey);\n        int c = this.data.getColumnIndex(columnKey);\n        if ((this.maximumRangeValueRow == r && this.maximumRangeValueColumn \n                == c) || (this.minimumRangeValueRow == r \n                && this.minimumRangeValueColumn == c))  {\n            updateBounds();\n        }\n        \n            double minval = Double.NaN;\n            if (item.getMinOutlier() != null) {\n                minval = item.getMinOutlier().doubleValue();\n            }\n            double maxval = Double.NaN;\n            if (item.getMaxOutlier() != null) {\n                maxval = item.getMaxOutlier().doubleValue();\n            }\n        \n            if (Double.isNaN(this.maximumRangeValue)) {\n                this.maximumRangeValue = maxval;\n                this.maximumRangeValueRow = r;\n                this.maximumRangeValueColumn = c;\n            }\n            else if (maxval > this.maximumRangeValue) {\n                this.maximumRangeValue = maxval;\n                this.maximumRangeValueRow = r;\n                this.maximumRangeValueColumn = c;\n            }\n        \n            if (Double.isNaN(this.minimumRangeValue)) {\n                this.minimumRangeValue = minval;\n                this.minimumRangeValueRow = r;\n                this.minimumRangeValueColumn = c;\n            }\n            else if (minval < this.minimumRangeValue) {\n                this.minimumRangeValue = minval;\n                this.minimumRangeValueRow = r;\n                this.minimumRangeValueColumn = c;\n            }\n        \n        this.rangeBounds = new Range(this.minimumRangeValue,\n              this.maximumRangeValue);\n        fireDatasetChanged();\n\n    }", "javadoc_start_line": 134, "annotations_start_line": 144, "method_start_line": 145, "end_line": 193}, {"file_path": "/source/org/jfree/data/statistics/DefaultBoxAndWhiskerCategoryDataset.java", "method_name": "updateBounds", "content": "    /**\n     * Resets the cached bounds, by iterating over the entire dataset to find\n     * the current bounds.\n     */\n    private void updateBounds() {\n        this.minimumRangeValue = Double.NaN;\n        this.maximumRangeValue = Double.NaN;\n    }", "javadoc_start_line": 735, "annotations_start_line": 739, "method_start_line": 739, "end_line": 742}]}], "project": {"name": "Chart", "version": 21}}