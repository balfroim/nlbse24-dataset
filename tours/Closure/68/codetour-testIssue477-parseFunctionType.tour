{
  "$schema": "https://aka.ms/codetour-schema",
  "title": "Tour from testIssue477 to parseFunctionType",
  "steps": [
    {
      "file": "/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java",
      "description": "This code snippet appears to be a method for parsing JSDoc information. The method reads tokens from a JsDocTokenStream and processes them to extract JSDoc annotations, types, descriptions, and other relevant information. It handles various JSDoc tags such as @author, @constant, @constructor, @deprecated, @interface, @desc, @fileOverview, @license, @throws, @param, @return, @this, @typedef, and many others.\n\nThe method iterates through the tokens, processes each token based on its type, and records the extracted information in a JsDocBuilder. It also handles warnings and errors related to JSDoc parsing, such as missing or incompatible types, duplicate names, and unexpected end of file or end of comment.\n\nOverall, this method is responsible for parsing JSDoc comments and extracting structured information from them, which can be used for documentation, type checking, and other purposes in a JavaScript environment.",
      "line": 913
    },
    {
      "file": "/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java",
      "description": "This code snippet is a private method that looks for a type expression at the current token and, if found, returns it as a Node. The method consumes input, and it takes the current token, line number, and starting character position as parameters.\n\nThe method `parseAndRecordTypeNode` is responsible for parsing and recording a type expression found in the JSDoc tokens. It checks the current token and its context to determine the type expression, and then creates a Node to represent the type expression. The method also handles certain conditions such as whether the type expression is enclosed in curly braces and whether it's a braceless type.\n\nOverall, this method is part of the JSDoc parsing logic and is used to extract and represent type expressions found in JSDoc comments.",
      "line": 1062
    },
    {
      "file": "/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java",
      "description": "This code snippet is a private method that looks for a parameter type expression at the current token and, if found, returns it as a Node. The method consumes input and takes the current token, line number, starting character position, a boolean indicating whether the type expression starts with \"{\", and a boolean indicating whether only simple type names should be parsed.\n\nThe `parseAndRecordTypeNode` method is responsible for parsing and recording a parameter type expression found in the JSDoc tokens. It checks the current token and its context to determine the type expression, and then creates a Node to represent the type expression. The method also handles conditions such as whether the type expression is a simple name or a more complex type expression, and whether it's enclosed in curly braces.\n\nAfter parsing and creating the type Node, the method marks the type Node with the start and end character positions and whether it's a braceless type, and then returns the type Node.\n\nOverall, this method is part of the JSDoc parsing logic and is used to extract and represent parameter type expressions found in JSDoc comments.",
      "line": 1140
    },
    {
      "file": "/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java",
      "description": "In this code snippet, we have a private method `parseTypeExpressionAnnotation` that is responsible for parsing a type expression annotation based on the provided JsDocToken.\n\nThe method checks the current token to determine the type of type expression annotation. If the token is an opening curly brace (JsDocToken.LC), it indicates that the type expression is enclosed in curly braces. In this case, the method proceeds to parse the top-level type expression within the curly braces using the `parseTopLevelTypeExpression` method. After parsing the type expression, it ensures that the closing curly brace (JsDocToken.RC) is present, and if not, it reports a type syntax warning.\n\nIf the token is not an opening curly brace, the method directly parses the type expression using the `parseTypeExpression` method.\n\nOverall, this method is part of the JSDoc parsing logic and is used to handle the parsing of type expression annotations, whether they are enclosed in curly braces or not.",
      "line": 1515
    },
    {
      "file": "/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java",
      "description": "In this code snippet, we have a private method `parseTypeExpression` that is responsible for parsing a type expression based on the provided JsDocToken.\n\nThe method handles different cases of type expressions, including nullable types and unknown types. It checks the current token to determine the type of type expression and then proceeds to parse and create a Node representing the type expression.\n\nIf the token is a question mark (JsDocToken.QMARK), the method determines whether it represents a nullable type or an unknown type by using look-ahead to analyze the following token. If it indicates an unknown type, it returns a new Node representing an unknown type. Otherwise, it wraps the parsed basic type expression in a Node representing a nullable type.\n\nIf the token is an exclamation mark (JsDocToken.BANG), the method wraps the parsed basic type expression in a Node representing a non-nullable type.\n\nIn other cases, the method parses the basic type expression and then checks for a question mark or exclamation mark to determine if the type is nullable or non-nullable, wrapping the basic type expression accordingly.\n\nOverall, this method is part of the JSDoc parsing logic and is used to handle the parsing of various type expressions, including nullable and non-nullable types.",
      "line": 1679
    },
    {
      "file": "/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java",
      "description": "In this code snippet, we have a private method `parseBasicTypeExpression` that is responsible for parsing a basic type expression based on the provided JsDocToken.\n\nThe method handles different cases of basic type expressions, including wildcard, array type, record type, union type, function type, and specific type names such as \"null\" and \"undefined\". It checks the current token to determine the type of basic type expression and then proceeds to parse and create a Node representing the type expression.\n\nIf the token is a wildcard (JsDocToken.STAR), the method returns a new Node representing a wildcard type.\n\nIf the token indicates an array type (JsDocToken.LB), the method proceeds to parse the array type using the `parseArrayType` method.\n\nIf the token indicates a record type (JsDocToken.LC), the method proceeds to parse the record type using the `parseRecordType` method.\n\nIf the token indicates a union type (JsDocToken.LP), the method proceeds to parse the union type using the `parseUnionType` method.\n\nIf the token is a string, the method checks for specific strings such as \"function\", \"null\", or \"undefined\", and then proceeds to parse the corresponding type using the appropriate parsing method.\n\nIf none of",
      "line": 1710
    },
    {
      "file": "/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java",
      "description": "In this code snippet, we have a private method `parseFunctionType` that is responsible for parsing a function type based on the provided JsDocToken.\n\nThe method handles the parsing of a function type, including its signature, type parameters, context type (this or new), parameters type, and result type. It checks the current token to determine the structure of the function type and then proceeds to parse and create a Node representing the function type.\n\nThe method first checks for the presence of a left parenthesis (JsDocToken.LP) to indicate the start of the function type signature. It then proceeds to parse the function signature, which includes type parameters, context type, parameters type, and result type.\n\nThe parsing involves checking for the context type (this or new), parsing the parameters type, and parsing the result type. It ensures that the necessary tokens such as colons and commas are present in the correct positions, and reports syntax warnings if any required tokens are missing.\n\nOverall, this method is part of the JSDoc parsing logic and is used to handle the parsing of function types and their signatures, including the context type, parameters, and result type.",
      "line": 1826
    }
  ],
  "ref": "D4J_Closure_68_BUGGY_VERSION"
}